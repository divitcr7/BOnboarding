/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * Insure Investors API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery 
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  AMSActivitiesGetGetGroupTypeEntitysParams,
  AMSActivityReferenceGroupsAddActivityGroupParams,
  AMSClaimsAddAMSClaimParams,
  AMSCustomerAddAMSCustomerParams,
  AMSCustomerUpdateAMSCustomerParams,
  AMSRecentCustomerGetCUstomerByIDParams,
  AMSinvoicesGetInvoiceBillToByIDParams,
  AccountAddExternalLogin200Four,
  AccountAddExternalLogin200One,
  AccountAddExternalLogin200Three,
  AccountAddExternalLogin200Two,
  AccountChangePassword200Four,
  AccountChangePassword200One,
  AccountChangePassword200Three,
  AccountChangePassword200Two,
  AccountGetExternalLogin200Four,
  AccountGetExternalLogin200One,
  AccountGetExternalLogin200Three,
  AccountGetExternalLogin200Two,
  AccountGetExternalLoginParams,
  AccountGetExternalLoginsParams,
  AccountGetManageInfoParams,
  AccountLogout200Four,
  AccountLogout200One,
  AccountLogout200Three,
  AccountLogout200Two,
  AccountRegister200Four,
  AccountRegister200One,
  AccountRegister200Three,
  AccountRegister200Two,
  AccountRegisterExternal200Four,
  AccountRegisterExternal200One,
  AccountRegisterExternal200Three,
  AccountRegisterExternal200Two,
  AccountRemoveLogin200Four,
  AccountRemoveLogin200One,
  AccountRemoveLogin200Three,
  AccountRemoveLogin200Two,
  AccountSetPassword200Four,
  AccountSetPassword200One,
  AccountSetPassword200Three,
  AccountSetPassword200Two,
  AdditionalNamedInsuredPutAdditionalNamedInsured200FourItem,
  AdditionalNamedInsuredPutAdditionalNamedInsured200OneItem,
  AdditionalNamedInsuredPutAdditionalNamedInsured200ThreeItem,
  AdditionalNamedInsuredPutAdditionalNamedInsured200TwoItem,
  AdditionalNamedInsuredRateAdditionalNamedInsured200FourItem,
  AdditionalNamedInsuredRateAdditionalNamedInsured200OneItem,
  AdditionalNamedInsuredRateAdditionalNamedInsured200ThreeItem,
  AdditionalNamedInsuredRateAdditionalNamedInsured200TwoItem,
  BenchmarkControllersSing,
  BillingOptionChangeBillingOption200FourItem,
  BillingOptionChangeBillingOption200OneItem,
  BillingOptionChangeBillingOption200ThreeItem,
  BillingOptionChangeBillingOption200TwoItem,
  BuildersRiskQuoteGetParams,
  ConstructionTypePutConstructionType200FourItem,
  ConstructionTypePutConstructionType200OneItem,
  ConstructionTypePutConstructionType200ThreeItem,
  ConstructionTypePutConstructionType200TwoItem,
  ConstructionTypeRateConstructionType200FourItem,
  ConstructionTypeRateConstructionType200OneItem,
  ConstructionTypeRateConstructionType200ThreeItem,
  ConstructionTypeRateConstructionType200TwoItem,
  CustomerDeleteCustomerParams,
  CustomerGetAuthenticateCustomerByTokenIdParams,
  CustomerInvestmentStrategyMediaUpload200Four,
  CustomerInvestmentStrategyMediaUpload200One,
  CustomerInvestmentStrategyMediaUpload200Three,
  CustomerInvestmentStrategyMediaUpload200Two,
  CustomerPutCustomer200FourItem,
  CustomerPutCustomer200OneItem,
  CustomerPutCustomer200ThreeItem,
  CustomerPutCustomer200TwoItem,
  CustomerQuestionUpdateCustomerQuestion200FourItem,
  CustomerQuestionUpdateCustomerQuestion200OneItem,
  CustomerQuestionUpdateCustomerQuestion200ThreeItem,
  CustomerQuestionUpdateCustomerQuestion200TwoItem,
  CustomerRateCustomer200FourItem,
  CustomerRateCustomer200OneItem,
  CustomerRateCustomer200ThreeItem,
  CustomerRateCustomer200TwoItem,
  DeductiblePutDeductible200FourItem,
  DeductiblePutDeductible200OneItem,
  DeductiblePutDeductible200ThreeItem,
  DeductiblePutDeductible200TwoItem,
  DeductibleRateDeductible200FourItem,
  DeductibleRateDeductible200OneItem,
  DeductibleRateDeductible200ThreeItem,
  DeductibleRateDeductible200TwoItem,
  DomainModelAMSModelAMSActivityAction,
  DomainModelAMSModelAMSAgencyAddress,
  DomainModelAMSModelAMSAgencyBusinessUnits,
  DomainModelAMSModelAMSAttachments,
  DomainModelAMSModelAMSBroker,
  DomainModelAMSModelAMSBusinessUnits,
  DomainModelAMSModelAMSBussinessinformation,
  DomainModelAMSModelAMSClaimMade,
  DomainModelAMSModelAMSCommenActivity,
  DomainModelAMSModelAMSCommercialCareCoustody,
  DomainModelAMSModelAMSCommercialCareCoustodyBody,
  DomainModelAMSModelAMSCommercialLinesCoverages,
  DomainModelAMSModelAMSCommercialLinesCoveragesBody,
  DomainModelAMSModelAMSCommercialPremiseInformation,
  DomainModelAMSModelAMSCommercialPrmiarylocation,
  DomainModelAMSModelAMSCommercialTotalPremium,
  DomainModelAMSModelAMSCommercialUmbrellaAdditionalExposures,
  DomainModelAMSModelAMSCommercialUmbrellaGeneralLiability,
  DomainModelAMSModelAMSCommercialUmbrellaLiability,
  DomainModelAMSModelAMSCommercialUmbrellaLiabilityBody,
  DomainModelAMSModelAMSCommercialUmbrellaPolicyInformation,
  DomainModelAMSModelAMSCommercialUmbrellaVehicle,
  DomainModelAMSModelAMSCommercialUniqueAnswer,
  DomainModelAMSModelAMSCommercialValueReporting,
  DomainModelAMSModelAMSCommercialValueReportingBody,
  DomainModelAMSModelAMSCommercialproperty,
  DomainModelAMSModelAMSCommercialumbrellaUnderlyingCoverageExposure,
  DomainModelAMSModelAMSCoverdAutoSymbols,
  DomainModelAMSModelAMSCustomActionsDropDown,
  DomainModelAMSModelAMSDealerPhysicalDamage,
  DomainModelAMSModelAMSDrivers,
  DomainModelAMSModelAMSEPIMasterForms,
  DomainModelAMSModelAMSEmployee,
  DomainModelAMSModelAMSEmployeeActionDropDown,
  DomainModelAMSModelAMSEmployeeBody,
  DomainModelAMSModelAMSEmployeeDocuments,
  DomainModelAMSModelAMSEmployeeExpiringPolicies,
  DomainModelAMSModelAMSEmployeeLoginTime,
  DomainModelAMSModelAMSEmployeeLosPolicies,
  DomainModelAMSModelAMSEmployeeNotes,
  DomainModelAMSModelAMSEmployeePendingpolicyCanclellation,
  DomainModelAMSModelAMSEmployeeReassignDocument,
  DomainModelAMSModelAMSEmployeeRenewList,
  DomainModelAMSModelAMSEmployeeRenewal,
  DomainModelAMSModelAMSEntitySearchModel,
  DomainModelAMSModelAMSFirstNameinsured,
  DomainModelAMSModelAMSGarageLocation,
  DomainModelAMSModelAMSGarageOperation,
  DomainModelAMSModelAMSHomeOwnerOperators,
  DomainModelAMSModelAMSHosNowMobiles,
  DomainModelAMSModelAMSInvoiceBillToModel,
  DomainModelAMSModelAMSInvoiceCommissionModel,
  DomainModelAMSModelAMSInvoiceCustomerPremiumsModel,
  DomainModelAMSModelAMSInvoiceModel,
  DomainModelAMSModelAMSInvoicePolicyTransactionsModel,
  DomainModelAMSModelAMSInvoiceTransactionBussinessUnitsModel,
  DomainModelAMSModelAMSInvoiceTransactionModel,
  DomainModelAMSModelAMSInvoicedInstallmentsModel,
  DomainModelAMSModelAMSInvoices,
  DomainModelAMSModelAMSJournalEntryModel,
  DomainModelAMSModelAMSJournalVoucherModel,
  DomainModelAMSModelAMSLineofbussiness,
  DomainModelAMSModelAMSLossOfHistoryPolicies,
  DomainModelAMSModelAMSMessagesModel,
  DomainModelAMSModelAMSNotes,
  DomainModelAMSModelAMSPolicies,
  DomainModelAMSModelAMSPoliciesAddIntrest,
  DomainModelAMSModelAMSPoliciesCoinsured,
  DomainModelAMSModelAMSPoliciesCommercialLocation,
  DomainModelAMSModelAMSPoliciesCommercialSepplementalNames,
  DomainModelAMSModelAMSPoliciesContacts,
  DomainModelAMSModelAMSPoliciesEmployerInformation,
  DomainModelAMSModelAMSPoliciesGeneralInformation,
  DomainModelAMSModelAMSPoliciesNatureOfBussiness,
  DomainModelAMSModelAMSPoliciesOtherInsurance,
  DomainModelAMSModelAMSPoliciesPeriorCarriers,
  DomainModelAMSModelAMSPoliciesPersonal,
  DomainModelAMSModelAMSPoliciesPreviouceAddress,
  DomainModelAMSModelAMSPoliciesProducer,
  DomainModelAMSModelAMSPoliciesRateDate,
  DomainModelAMSModelAMSPoliciesRemark,
  DomainModelAMSModelAMSPoliciesSubCustomer,
  DomainModelAMSModelAMSPoliciesTransaction,
  DomainModelAMSModelAMSPoliciesTransactionPremiumCharge,
  DomainModelAMSModelAMSPolicyLOB,
  DomainModelAMSModelAMSPolicyPermissions,
  DomainModelAMSModelAMSPolicySubmissions,
  DomainModelAMSModelAMSPolicyTransactionPremium,
  DomainModelAMSModelAMSPolicyTransactions,
  DomainModelAMSModelAMSProfiles,
  DomainModelAMSModelAMSReceipt,
  DomainModelAMSModelAMSReceiptGeneralInformation,
  DomainModelAMSModelAMSReceiptVoidInformation,
  DomainModelAMSModelAMSRecentCustomer,
  DomainModelAMSModelAMSSuspenses,
  DomainModelAMSModelAMSSystemGeneratedWaivers,
  DomainModelAMSModelAMSVehicleStorage,
  DomainModelAMSModelAMSVoidinformationModel,
  DomainModelAMSModelAMSpoliciesForms,
  DomainModelAMSModelAMSvehicleInformation,
  DomainModelAMSModelActivityReferenceGroups,
  DomainModelAMSModelCAMSCmmercialCoveragePremiumActionDropDown,
  DomainModelAMSModelCustomActionsGetDropdowns,
  DomainModelAMSModelGetGroupTypeEntity,
  DomainModelAMSModelsAMSCommercialUmbrellaActionDropDown,
  DomainModelBechmarkUserGroup,
  DomainModelBechmarkUserGroupMember,
  DomainModelBechmarkUserGroupTemplate,
  DomainModelBechmarkUserRole,
  DomainModelBenchmarkActivity,
  DomainModelBenchmarkActivityBody,
  DomainModelBenchmarkActivityType,
  DomainModelBenchmarkActivityTypeBody,
  DomainModelBenchmarkAdditionalNamedInsured,
  DomainModelBenchmarkAdditionalNamedInsuredBody,
  DomainModelBenchmarkAgencyCredit,
  DomainModelBenchmarkAgencyCreditBody,
  DomainModelBenchmarkAgent,
  DomainModelBenchmarkAgentBody,
  DomainModelBenchmarkBillingMethod,
  DomainModelBenchmarkBillingMethodBody,
  DomainModelBenchmarkBillingOption,
  DomainModelBenchmarkBillingOptionBody,
  DomainModelBenchmarkBroker,
  DomainModelBenchmarkBrokerBody,
  DomainModelBenchmarkBrokerContacts,
  DomainModelBenchmarkBrokerContactsBody,
  DomainModelBenchmarkBuildersRiskPropertyBeingBuilt,
  DomainModelBenchmarkBuildersRiskPropertyBeingBuiltBody,
  DomainModelBenchmarkBuildersRiskQuote,
  DomainModelBenchmarkBuildersRiskQuoteBody,
  DomainModelBenchmarkConstructionType,
  DomainModelBenchmarkConstructionTypeBody,
  DomainModelBenchmarkContact,
  DomainModelBenchmarkContactBody,
  DomainModelBenchmarkCustomer,
  DomainModelBenchmarkCustomerBody,
  DomainModelBenchmarkCustomerContact,
  DomainModelBenchmarkCustomerContactBody,
  DomainModelBenchmarkCustomerInvestmentStrategy,
  DomainModelBenchmarkCustomerInvestmentStrategyBody,
  DomainModelBenchmarkCustomerQuestion,
  DomainModelBenchmarkCustomerQuestionBody,
  DomainModelBenchmarkDeductible,
  DomainModelBenchmarkDeductibleBody,
  DomainModelBenchmarkEmailTemplate,
  DomainModelBenchmarkEmailTemplateBody,
  DomainModelBenchmarkEndorsement,
  DomainModelBenchmarkEndorsementBody,
  DomainModelBenchmarkFile,
  DomainModelBenchmarkFileBatch,
  DomainModelBenchmarkFileBatchBody,
  DomainModelBenchmarkFileBody,
  DomainModelBenchmarkInquiry,
  DomainModelBenchmarkInquiryBody,
  DomainModelBenchmarkInvestorType,
  DomainModelBenchmarkInvestorTypeBody,
  DomainModelBenchmarkInvoice,
  DomainModelBenchmarkInvoiceBody,
  DomainModelBenchmarkInvoiceProperty,
  DomainModelBenchmarkInvoicePropertyBody,
  DomainModelBenchmarkJournal,
  DomainModelBenchmarkJournalBody,
  DomainModelBenchmarkMortgagee,
  DomainModelBenchmarkMortgageeBody,
  DomainModelBenchmarkOccupancyType,
  DomainModelBenchmarkOccupancyTypeBody,
  DomainModelBenchmarkPaymentMethod,
  DomainModelBenchmarkPaymentMethodBody,
  DomainModelBenchmarkPolicy,
  DomainModelBenchmarkPolicyBody,
  DomainModelBenchmarkPolicyByCustomerDTO,
  DomainModelBenchmarkPolicyDetail,
  DomainModelBenchmarkPolicyDetailBody,
  DomainModelBenchmarkPolicyStatsByCustomerDTO,
  DomainModelBenchmarkPolicyType,
  DomainModelBenchmarkPolicyTypeBody,
  DomainModelBenchmarkProduct,
  DomainModelBenchmarkProductBody,
  DomainModelBenchmarkProperty,
  DomainModelBenchmarkPropertyArrayBody,
  DomainModelBenchmarkPropertyBody,
  DomainModelBenchmarkPropertyCoverage,
  DomainModelBenchmarkPropertyCoverageBody,
  DomainModelBenchmarkPropertyMortgageCompany,
  DomainModelBenchmarkPropertyMortgageCompanyBody,
  DomainModelBenchmarkPropertyType,
  DomainModelBenchmarkPropertyTypeBody,
  DomainModelBenchmarkReminder,
  DomainModelBenchmarkReminderBody,
  DomainModelBenchmarkRoles,
  DomainModelBenchmarkTask,
  DomainModelBenchmarkTaskAssignment,
  DomainModelBenchmarkTaskAssignmentBody,
  DomainModelBenchmarkTaskAssignmentNote,
  DomainModelBenchmarkTaskAssignmentNoteBody,
  DomainModelBenchmarkTaskBody,
  DomainModelBenchmarkUnderwriter,
  DomainModelBenchmarkUnderwriterBody,
  DomainModelBenchmarkUser,
  DomainModelBenchmarkValuationType,
  DomainModelBenchmarkValuationTypeBody,
  DomainModelBenchmarkWritingCompany,
  DomainModelBenchmarkWritingCompanyBody,
  DomainModelBenchmarkZillow,
  DomainModelBenchmarkZillowBody,
  DomainModelBusinessProducerProduction,
  DomainModelChangePasswordBody,
  DomainModelDeleteEndorsementModelBody,
  DomainModelInsureInvestorsRating,
  DomainModelInsureInvestorsRatingBody,
  DomainModelModelAMSActivities,
  DomainModelModelAMSActivityGroup,
  DomainModelModelAMSActivityGroupTypes,
  DomainModelModelAMSAssignedEmployees,
  DomainModelModelAMSClaims,
  DomainModelModelAMSCommercialActionDropDown,
  DomainModelModelAMSCustomer,
  DomainModelModelAMSCustomerBenefitInfo,
  DomainModelModelAMSCustomerContacts,
  DomainModelModelAMSCustomerLossHistory,
  DomainModelModelAMSCustomerServicePersonnels,
  DomainModelModelAMSCustomerXDates,
  DomainModelModelAMSCustomerXReferences,
  DomainModelModelAMSDependents,
  DomainModelModelAMSDocuments,
  DomainModelModelAMSPoliciesActionDropDownEntry,
  DomainModelModelAuthtoken,
  DomainModelModelsAMSGarageAndDealerActionDropDown,
  DomainModelPaymentEntryDto,
  DomainModelPaymentProcessBody,
  DomainModelPaymentProcessTransaction,
  DomainModelPaymentProcessTransactionBody,
  DomainModelPortfolioRating,
  DomainModelPortfolioRatingBody,
  DomainModelPortfolioSummaryRating,
  DomainModelProductionDivider,
  DomainModelPropertyInsuredName,
  DomainModelRecurringSubscription,
  DomainModelRecurringSubscriptionBody,
  DomainModelSOVDto,
  DomainModelSamplePresenter,
  DomainModelSamplePresenterBody,
  DomainModelSampleStatus,
  DomainModelUser,
  DomainModelWritingCompanyProduct,
  FileGetFileByCustomerIdTemplateIdParams,
  InvoiceGetAllInvoiceByNameParams,
  JournalGetAllJournalByStatusParams,
  JournalGetJournalByNameParams,
  MortgageeGetMortgageeByNameAddressParams,
  OccupancyTypeGetOccupancyTypeByNameParams,
  PDFCreatorApplicationComplete200Four,
  PDFCreatorApplicationComplete200One,
  PDFCreatorApplicationComplete200Three,
  PDFCreatorApplicationComplete200Two,
  PDFCreatorCancellationOfCoverage200Four,
  PDFCreatorCancellationOfCoverage200One,
  PDFCreatorCancellationOfCoverage200Three,
  PDFCreatorCancellationOfCoverage200Two,
  PDFCreatorCancellationRequestForm200Four,
  PDFCreatorCancellationRequestForm200One,
  PDFCreatorCancellationRequestForm200Three,
  PDFCreatorCancellationRequestForm200Two,
  PDFCreatorCustomerWelcome200Four,
  PDFCreatorCustomerWelcome200One,
  PDFCreatorCustomerWelcome200Three,
  PDFCreatorCustomerWelcome200Two,
  PDFCreatorCustomerWelcomeEmailWithClientPortalAccess200Four,
  PDFCreatorCustomerWelcomeEmailWithClientPortalAccess200One,
  PDFCreatorCustomerWelcomeEmailWithClientPortalAccess200Three,
  PDFCreatorCustomerWelcomeEmailWithClientPortalAccess200Two,
  PDFCreatorDownloadAllDocumentsZipFile200Four,
  PDFCreatorDownloadAllDocumentsZipFile200One,
  PDFCreatorDownloadAllDocumentsZipFile200Three,
  PDFCreatorDownloadAllDocumentsZipFile200Two,
  PDFCreatorEndorsementCompletion200Four,
  PDFCreatorEndorsementCompletion200One,
  PDFCreatorEndorsementCompletion200Three,
  PDFCreatorEndorsementCompletion200Two,
  PDFCreatorGenerateMonthlyInvoice200Four,
  PDFCreatorGenerateMonthlyInvoice200One,
  PDFCreatorGenerateMonthlyInvoice200Three,
  PDFCreatorGenerateMonthlyInvoice200Two,
  PDFCreatorGeneratePendingPropertyExcel200Four,
  PDFCreatorGeneratePendingPropertyExcel200One,
  PDFCreatorGeneratePendingPropertyExcel200Three,
  PDFCreatorGeneratePendingPropertyExcel200Two,
  PDFCreatorGenericEmailTemplate200Four,
  PDFCreatorGenericEmailTemplate200One,
  PDFCreatorGenericEmailTemplate200Three,
  PDFCreatorGenericEmailTemplate200Two,
  PDFCreatorGenericEmailTemplateByCustomerInfo200Four,
  PDFCreatorGenericEmailTemplateByCustomerInfo200One,
  PDFCreatorGenericEmailTemplateByCustomerInfo200Three,
  PDFCreatorGenericEmailTemplateByCustomerInfo200Two,
  PDFCreatorGenericEmailTemplateByCustomerInfoParams,
  PDFCreatorGenericEmailTemplateParams,
  PDFCreatorMonthlyInvoiceTemplate200Four,
  PDFCreatorMonthlyInvoiceTemplate200One,
  PDFCreatorMonthlyInvoiceTemplate200Three,
  PDFCreatorMonthlyInvoiceTemplate200Two,
  PDFCreatorNewAcordForm140200Four,
  PDFCreatorNewAcordForm140200One,
  PDFCreatorNewAcordForm140200Three,
  PDFCreatorNewAcordForm140200Two,
  PDFCreatorNewLead200Four,
  PDFCreatorNewLead200One,
  PDFCreatorNewLead200Three,
  PDFCreatorNewLead200Two,
  PDFCreatorNewQuoteRequest200Four,
  PDFCreatorNewQuoteRequest200One,
  PDFCreatorNewQuoteRequest200Three,
  PDFCreatorNewQuoteRequest200Two,
  PDFCreatorPDFProposalCreator200Four,
  PDFCreatorPDFProposalCreator200One,
  PDFCreatorPDFProposalCreator200Three,
  PDFCreatorPDFProposalCreator200Two,
  PDFCreatorPDFProposalCreatorTest200Four,
  PDFCreatorPDFProposalCreatorTest200One,
  PDFCreatorPDFProposalCreatorTest200Three,
  PDFCreatorPDFProposalCreatorTest200Two,
  PDFCreatorPDFProposalCreatorforSign200Four,
  PDFCreatorPDFProposalCreatorforSign200One,
  PDFCreatorPDFProposalCreatorforSign200Three,
  PDFCreatorPDFProposalCreatorforSign200Two,
  PDFCreatorPDFWebProposalCreator200Four,
  PDFCreatorPDFWebProposalCreator200One,
  PDFCreatorPDFWebProposalCreator200Three,
  PDFCreatorPDFWebProposalCreator200Two,
  PDFCreatorPaymentEntryReport200Four,
  PDFCreatorPaymentEntryReport200One,
  PDFCreatorPaymentEntryReport200Three,
  PDFCreatorPaymentEntryReport200Two,
  PDFCreatorPolicyChangeRequestForm200Four,
  PDFCreatorPolicyChangeRequestForm200One,
  PDFCreatorPolicyChangeRequestForm200Three,
  PDFCreatorPolicyChangeRequestForm200Two,
  PDFCreatorQuoteIntroToClient200Four,
  PDFCreatorQuoteIntroToClient200One,
  PDFCreatorQuoteIntroToClient200Three,
  PDFCreatorQuoteIntroToClient200Two,
  PDFCreatorQuoteRequestUnderWriter200Four,
  PDFCreatorQuoteRequestUnderWriter200One,
  PDFCreatorQuoteRequestUnderWriter200Three,
  PDFCreatorQuoteRequestUnderWriter200Two,
  PDFCreatorREOMonthlyBillingReport200Four,
  PDFCreatorREOMonthlyBillingReport200One,
  PDFCreatorREOMonthlyBillingReport200Three,
  PDFCreatorREOMonthlyBillingReport200Two,
  PDFCreatorSendDocument200Four,
  PDFCreatorSendDocument200One,
  PDFCreatorSendDocument200Three,
  PDFCreatorSendDocument200Two,
  PDFCreatorSendPaymnetConfirmation200Four,
  PDFCreatorSendPaymnetConfirmation200One,
  PDFCreatorSendPaymnetConfirmation200Three,
  PDFCreatorSendPaymnetConfirmation200Two,
  PDFCreatorSendRecurringPaymnetScheduleConfirmation200Four,
  PDFCreatorSendRecurringPaymnetScheduleConfirmation200One,
  PDFCreatorSendRecurringPaymnetScheduleConfirmation200Three,
  PDFCreatorSendRecurringPaymnetScheduleConfirmation200Two,
  PDFCreatorSendToActiveCustomer200Four,
  PDFCreatorSendToActiveCustomer200One,
  PDFCreatorSendToActiveCustomer200Three,
  PDFCreatorSendToActiveCustomer200Two,
  PDFCreatorSendToCustomer200Four,
  PDFCreatorSendToCustomer200One,
  PDFCreatorSendToCustomer200Three,
  PDFCreatorSendToCustomer200Two,
  PDFCreatorSendToCustomerDataBody,
  PDFCreatorSendToPayee200Four,
  PDFCreatorSendToPayee200One,
  PDFCreatorSendToPayee200Three,
  PDFCreatorSendToPayee200Two,
  PDFCreatorSetteledTransactionSendThankMessageParams,
  PDFCreatorWebApplicationCompleteGenerateAndSend200Four,
  PDFCreatorWebApplicationCompleteGenerateAndSend200One,
  PDFCreatorWebApplicationCompleteGenerateAndSend200Three,
  PDFCreatorWebApplicationCompleteGenerateAndSend200Two,
  PaymentProcessingThanksEmailTemplateParams,
  PropertyGetAllActivePropertiesWithFiltersParams,
  PropertyGetSOVByPropertyIDsPropertyidsBody,
  ProvidersSPHelperGenericRecordListDomainModelBenchmarkAgencyCredit,
  ProvidersSPHelperGenericRecordListDomainModelBenchmarkAgent,
  ProvidersSPHelperGenericRecordListDomainModelBenchmarkBatchList,
  ProvidersSPHelperGenericRecordListDomainModelBenchmarkBillingMethod,
  ProvidersSPHelperGenericRecordListDomainModelBenchmarkBillingOption,
  ProvidersSPHelperGenericRecordListDomainModelBenchmarkBroker,
  ProvidersSPHelperGenericRecordListDomainModelBenchmarkConstructionType,
  ProvidersSPHelperGenericRecordListDomainModelBenchmarkContact,
  ProvidersSPHelperGenericRecordListDomainModelBenchmarkCustomer,
  ProvidersSPHelperGenericRecordListDomainModelBenchmarkEmailTemplate,
  ProvidersSPHelperGenericRecordListDomainModelBenchmarkInquiry,
  ProvidersSPHelperGenericRecordListDomainModelBenchmarkInvoice,
  ProvidersSPHelperGenericRecordListDomainModelBenchmarkOccupancyType,
  ProvidersSPHelperGenericRecordListDomainModelBenchmarkProduct,
  ProvidersSPHelperGenericRecordListDomainModelBenchmarkProperty,
  ProvidersSPHelperGenericRecordListDomainModelBenchmarkPropertyType,
  ProvidersSPHelperGenericRecordListDomainModelBenchmarkReminder,
  ProvidersSPHelperGenericRecordListDomainModelBenchmarkTask,
  ProvidersSPHelperGenericRecordListDomainModelBenchmarkTaskAssignment,
  ProvidersSPHelperGenericRecordListDomainModelBenchmarkTaskAssignmentNote,
  ProvidersSPHelperGenericRecordListDomainModelPaymentEntryDto,
  ProvidersSPHelperGenericRecordListDomainModelPaymentProcessTransaction,
  ProvidersSPHelperGenericRecordListDomainModelProductionDivider,
  ProvidersSPHelperGenericRecordListDomainModelREOMonthlyBillingReportDto,
  ProvidersSPHelperGenericRecordListDomainModelRecurringSubscription,
  ProvidersSPHelperGenericRecordListDomainModelTransactionSummaryDto,
  ProvidersSPHelperGenericRecordListDomainModelVMInvoicePropertyDetails,
  ProvidersSPHelperGenericRecordListDomainModelVMPropertyDetails,
  ProvidersSPHelperGenericRecordListDomainModelVMUnderwriter,
  ProvidersSPHelperGenericRecordListDomainModelVMWritingCompany,
  QuickBookAppCustomerDetailsParams,
  QuoteBindPolicy200Four,
  QuoteBindPolicy200One,
  QuoteBindPolicy200Three,
  QuoteBindPolicy200Two,
  QuoteBindPolicyWithAgencyCredit200Four,
  QuoteBindPolicyWithAgencyCredit200One,
  QuoteBindPolicyWithAgencyCredit200Three,
  QuoteBindPolicyWithAgencyCredit200Two,
  QuoteBindPolicyWithAgencyCreditParams,
  QuoteBindProcessor200Four,
  QuoteBindProcessor200One,
  QuoteBindProcessor200Three,
  QuoteBindProcessor200Two,
  SamplesPostSample200Four,
  SamplesPostSample200One,
  SamplesPostSample200Three,
  SamplesPostSample200Two,
  SamplesPutSample200FourItem,
  SamplesPutSample200OneItem,
  SamplesPutSample200ThreeItem,
  SamplesPutSample200TwoItem,
  SamplesRateSample200FourItem,
  SamplesRateSample200OneItem,
  SamplesRateSample200ThreeItem,
  SamplesRateSample200TwoItem,
  SystemIOStream,
  SystemWebMvcActionResult,
  UserPutUserParams,
  ValuationTypeGetValuationTypeByNameParams,
  ValuesGetSwaggerYaml200Four,
  ValuesGetSwaggerYaml200One,
  ValuesGetSwaggerYaml200Three,
  ValuesGetSwaggerYaml200Two,
  ValuesGetSwaggerYamlFile200Four,
  ValuesGetSwaggerYamlFile200One,
  ValuesGetSwaggerYamlFile200Three,
  ValuesGetSwaggerYamlFile200Two,
  ValuesPostValueBody,
  WebAppModelsAddExternalLoginBindingModel,
  WebAppModelsChangePasswordBindingModel,
  WebAppModelsExternalLoginViewModel,
  WebAppModelsManageInfoViewModel,
  WebAppModelsRegisterBindingModel,
  WebAppModelsRegisterExternalBindingModel,
  WebAppModelsRemoveLoginBindingModel,
  WebAppModelsSetPasswordBindingModel,
  WebAppModelsUserInfoViewModel,
  ZillowPostZillow200Four,
  ZillowPostZillow200One,
  ZillowPostZillow200Three,
  ZillowPostZillow200Two,
  ZillowPutZillow200FourItem,
  ZillowPutZillow200OneItem,
  ZillowPutZillow200ThreeItem,
  ZillowPutZillow200TwoItem
} from './models'
import { useCustomInstance } from './use-custom-instance';




export const useAccountGetUserInfoHook = () => {
        const accountGetUserInfo = useCustomInstance<WebAppModelsUserInfoViewModel>();

        return (
    
 signal?: AbortSignal
) => {
        return accountGetUserInfo(
          {url: `/api/Account/UserInfo`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAccountGetUserInfoQueryKey = () => {
    return [`/api/Account/UserInfo`] as const;
    }

    
export const useAccountGetUserInfoQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAccountGetUserInfoHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAccountGetUserInfoHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAccountGetUserInfoQueryKey();

  const accountGetUserInfo =  useAccountGetUserInfoHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAccountGetUserInfoHook>>>> = ({ signal }) => accountGetUserInfo(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAccountGetUserInfoHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AccountGetUserInfoQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAccountGetUserInfoHook>>>>
export type AccountGetUserInfoQueryError = unknown

export const useAccountGetUserInfo = <TData = Awaited<ReturnType<ReturnType<typeof useAccountGetUserInfoHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAccountGetUserInfoHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAccountGetUserInfoQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAccountLogoutHook = () => {
        const accountLogout = useCustomInstance<AccountLogout200One | AccountLogout200Two | AccountLogout200Three | AccountLogout200Four>();

        return (
    
 ) => {
        return accountLogout(
          {url: `/api/Account/Logout`, method: 'POST'
    },
          );
        }
      }
    


export const useAccountLogoutMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAccountLogoutHook>>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAccountLogoutHook>>>, TError,void, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const accountLogout =  useAccountLogoutHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAccountLogoutHook>>>, void> = () => {
          

          return  accountLogout()
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AccountLogoutMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAccountLogoutHook>>>>
    
    export type AccountLogoutMutationError = unknown

    export const useAccountLogout = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAccountLogoutHook>>>, TError,void, TContext>, }
) => {

      const mutationOptions = useAccountLogoutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAccountGetManageInfoHook = () => {
        const accountGetManageInfo = useCustomInstance<WebAppModelsManageInfoViewModel>();

        return (
    params: AccountGetManageInfoParams,
 signal?: AbortSignal
) => {
        return accountGetManageInfo(
          {url: `/api/Account/ManageInfo`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getAccountGetManageInfoQueryKey = (params: AccountGetManageInfoParams,) => {
    return [`/api/Account/ManageInfo`, ...(params ? [params]: [])] as const;
    }

    
export const useAccountGetManageInfoQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAccountGetManageInfoHook>>>, TError = unknown>(params: AccountGetManageInfoParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAccountGetManageInfoHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAccountGetManageInfoQueryKey(params);

  const accountGetManageInfo =  useAccountGetManageInfoHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAccountGetManageInfoHook>>>> = ({ signal }) => accountGetManageInfo(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAccountGetManageInfoHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AccountGetManageInfoQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAccountGetManageInfoHook>>>>
export type AccountGetManageInfoQueryError = unknown

export const useAccountGetManageInfo = <TData = Awaited<ReturnType<ReturnType<typeof useAccountGetManageInfoHook>>>, TError = unknown>(
 params: AccountGetManageInfoParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAccountGetManageInfoHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAccountGetManageInfoQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAccountChangePasswordHook = () => {
        const accountChangePassword = useCustomInstance<AccountChangePassword200One | AccountChangePassword200Two | AccountChangePassword200Three | AccountChangePassword200Four>();

        return (
    webAppModelsChangePasswordBindingModel: WebAppModelsChangePasswordBindingModel,
 ) => {
        return accountChangePassword(
          {url: `/api/Account/ChangePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: webAppModelsChangePasswordBindingModel
    },
          );
        }
      }
    


export const useAccountChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAccountChangePasswordHook>>>, TError,{data: WebAppModelsChangePasswordBindingModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAccountChangePasswordHook>>>, TError,{data: WebAppModelsChangePasswordBindingModel}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const accountChangePassword =  useAccountChangePasswordHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAccountChangePasswordHook>>>, {data: WebAppModelsChangePasswordBindingModel}> = (props) => {
          const {data} = props ?? {};

          return  accountChangePassword(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AccountChangePasswordMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAccountChangePasswordHook>>>>
    export type AccountChangePasswordMutationBody = WebAppModelsChangePasswordBindingModel
    export type AccountChangePasswordMutationError = unknown

    export const useAccountChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAccountChangePasswordHook>>>, TError,{data: WebAppModelsChangePasswordBindingModel}, TContext>, }
) => {

      const mutationOptions = useAccountChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAccountSetPasswordHook = () => {
        const accountSetPassword = useCustomInstance<AccountSetPassword200One | AccountSetPassword200Two | AccountSetPassword200Three | AccountSetPassword200Four>();

        return (
    webAppModelsSetPasswordBindingModel: WebAppModelsSetPasswordBindingModel,
 ) => {
        return accountSetPassword(
          {url: `/api/Account/SetPassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: webAppModelsSetPasswordBindingModel
    },
          );
        }
      }
    


export const useAccountSetPasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAccountSetPasswordHook>>>, TError,{data: WebAppModelsSetPasswordBindingModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAccountSetPasswordHook>>>, TError,{data: WebAppModelsSetPasswordBindingModel}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const accountSetPassword =  useAccountSetPasswordHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAccountSetPasswordHook>>>, {data: WebAppModelsSetPasswordBindingModel}> = (props) => {
          const {data} = props ?? {};

          return  accountSetPassword(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AccountSetPasswordMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAccountSetPasswordHook>>>>
    export type AccountSetPasswordMutationBody = WebAppModelsSetPasswordBindingModel
    export type AccountSetPasswordMutationError = unknown

    export const useAccountSetPassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAccountSetPasswordHook>>>, TError,{data: WebAppModelsSetPasswordBindingModel}, TContext>, }
) => {

      const mutationOptions = useAccountSetPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAccountAddExternalLoginHook = () => {
        const accountAddExternalLogin = useCustomInstance<AccountAddExternalLogin200One | AccountAddExternalLogin200Two | AccountAddExternalLogin200Three | AccountAddExternalLogin200Four>();

        return (
    webAppModelsAddExternalLoginBindingModel: WebAppModelsAddExternalLoginBindingModel,
 ) => {
        return accountAddExternalLogin(
          {url: `/api/Account/AddExternalLogin`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: webAppModelsAddExternalLoginBindingModel
    },
          );
        }
      }
    


export const useAccountAddExternalLoginMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAccountAddExternalLoginHook>>>, TError,{data: WebAppModelsAddExternalLoginBindingModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAccountAddExternalLoginHook>>>, TError,{data: WebAppModelsAddExternalLoginBindingModel}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const accountAddExternalLogin =  useAccountAddExternalLoginHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAccountAddExternalLoginHook>>>, {data: WebAppModelsAddExternalLoginBindingModel}> = (props) => {
          const {data} = props ?? {};

          return  accountAddExternalLogin(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AccountAddExternalLoginMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAccountAddExternalLoginHook>>>>
    export type AccountAddExternalLoginMutationBody = WebAppModelsAddExternalLoginBindingModel
    export type AccountAddExternalLoginMutationError = unknown

    export const useAccountAddExternalLogin = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAccountAddExternalLoginHook>>>, TError,{data: WebAppModelsAddExternalLoginBindingModel}, TContext>, }
) => {

      const mutationOptions = useAccountAddExternalLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAccountRemoveLoginHook = () => {
        const accountRemoveLogin = useCustomInstance<AccountRemoveLogin200One | AccountRemoveLogin200Two | AccountRemoveLogin200Three | AccountRemoveLogin200Four>();

        return (
    webAppModelsRemoveLoginBindingModel: WebAppModelsRemoveLoginBindingModel,
 ) => {
        return accountRemoveLogin(
          {url: `/api/Account/RemoveLogin`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: webAppModelsRemoveLoginBindingModel
    },
          );
        }
      }
    


export const useAccountRemoveLoginMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAccountRemoveLoginHook>>>, TError,{data: WebAppModelsRemoveLoginBindingModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAccountRemoveLoginHook>>>, TError,{data: WebAppModelsRemoveLoginBindingModel}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const accountRemoveLogin =  useAccountRemoveLoginHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAccountRemoveLoginHook>>>, {data: WebAppModelsRemoveLoginBindingModel}> = (props) => {
          const {data} = props ?? {};

          return  accountRemoveLogin(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AccountRemoveLoginMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAccountRemoveLoginHook>>>>
    export type AccountRemoveLoginMutationBody = WebAppModelsRemoveLoginBindingModel
    export type AccountRemoveLoginMutationError = unknown

    export const useAccountRemoveLogin = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAccountRemoveLoginHook>>>, TError,{data: WebAppModelsRemoveLoginBindingModel}, TContext>, }
) => {

      const mutationOptions = useAccountRemoveLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAccountGetExternalLoginHook = () => {
        const accountGetExternalLogin = useCustomInstance<AccountGetExternalLogin200One | AccountGetExternalLogin200Two | AccountGetExternalLogin200Three | AccountGetExternalLogin200Four>();

        return (
    params: AccountGetExternalLoginParams,
 signal?: AbortSignal
) => {
        return accountGetExternalLogin(
          {url: `/api/Account/ExternalLogin`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getAccountGetExternalLoginQueryKey = (params: AccountGetExternalLoginParams,) => {
    return [`/api/Account/ExternalLogin`, ...(params ? [params]: [])] as const;
    }

    
export const useAccountGetExternalLoginQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAccountGetExternalLoginHook>>>, TError = unknown>(params: AccountGetExternalLoginParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAccountGetExternalLoginHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAccountGetExternalLoginQueryKey(params);

  const accountGetExternalLogin =  useAccountGetExternalLoginHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAccountGetExternalLoginHook>>>> = ({ signal }) => accountGetExternalLogin(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAccountGetExternalLoginHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AccountGetExternalLoginQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAccountGetExternalLoginHook>>>>
export type AccountGetExternalLoginQueryError = unknown

export const useAccountGetExternalLogin = <TData = Awaited<ReturnType<ReturnType<typeof useAccountGetExternalLoginHook>>>, TError = unknown>(
 params: AccountGetExternalLoginParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAccountGetExternalLoginHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAccountGetExternalLoginQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAccountGetExternalLoginsHook = () => {
        const accountGetExternalLogins = useCustomInstance<WebAppModelsExternalLoginViewModel[]>();

        return (
    params: AccountGetExternalLoginsParams,
 signal?: AbortSignal
) => {
        return accountGetExternalLogins(
          {url: `/api/Account/ExternalLogins`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getAccountGetExternalLoginsQueryKey = (params: AccountGetExternalLoginsParams,) => {
    return [`/api/Account/ExternalLogins`, ...(params ? [params]: [])] as const;
    }

    
export const useAccountGetExternalLoginsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAccountGetExternalLoginsHook>>>, TError = unknown>(params: AccountGetExternalLoginsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAccountGetExternalLoginsHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAccountGetExternalLoginsQueryKey(params);

  const accountGetExternalLogins =  useAccountGetExternalLoginsHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAccountGetExternalLoginsHook>>>> = ({ signal }) => accountGetExternalLogins(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAccountGetExternalLoginsHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AccountGetExternalLoginsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAccountGetExternalLoginsHook>>>>
export type AccountGetExternalLoginsQueryError = unknown

export const useAccountGetExternalLogins = <TData = Awaited<ReturnType<ReturnType<typeof useAccountGetExternalLoginsHook>>>, TError = unknown>(
 params: AccountGetExternalLoginsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAccountGetExternalLoginsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAccountGetExternalLoginsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAccountRegisterHook = () => {
        const accountRegister = useCustomInstance<AccountRegister200One | AccountRegister200Two | AccountRegister200Three | AccountRegister200Four>();

        return (
    webAppModelsRegisterBindingModel: WebAppModelsRegisterBindingModel,
 ) => {
        return accountRegister(
          {url: `/api/Account/Register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: webAppModelsRegisterBindingModel
    },
          );
        }
      }
    


export const useAccountRegisterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAccountRegisterHook>>>, TError,{data: WebAppModelsRegisterBindingModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAccountRegisterHook>>>, TError,{data: WebAppModelsRegisterBindingModel}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const accountRegister =  useAccountRegisterHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAccountRegisterHook>>>, {data: WebAppModelsRegisterBindingModel}> = (props) => {
          const {data} = props ?? {};

          return  accountRegister(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AccountRegisterMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAccountRegisterHook>>>>
    export type AccountRegisterMutationBody = WebAppModelsRegisterBindingModel
    export type AccountRegisterMutationError = unknown

    export const useAccountRegister = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAccountRegisterHook>>>, TError,{data: WebAppModelsRegisterBindingModel}, TContext>, }
) => {

      const mutationOptions = useAccountRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAccountRegisterExternalHook = () => {
        const accountRegisterExternal = useCustomInstance<AccountRegisterExternal200One | AccountRegisterExternal200Two | AccountRegisterExternal200Three | AccountRegisterExternal200Four>();

        return (
    webAppModelsRegisterExternalBindingModel: WebAppModelsRegisterExternalBindingModel,
 ) => {
        return accountRegisterExternal(
          {url: `/api/Account/RegisterExternal`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: webAppModelsRegisterExternalBindingModel
    },
          );
        }
      }
    


export const useAccountRegisterExternalMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAccountRegisterExternalHook>>>, TError,{data: WebAppModelsRegisterExternalBindingModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAccountRegisterExternalHook>>>, TError,{data: WebAppModelsRegisterExternalBindingModel}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const accountRegisterExternal =  useAccountRegisterExternalHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAccountRegisterExternalHook>>>, {data: WebAppModelsRegisterExternalBindingModel}> = (props) => {
          const {data} = props ?? {};

          return  accountRegisterExternal(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AccountRegisterExternalMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAccountRegisterExternalHook>>>>
    export type AccountRegisterExternalMutationBody = WebAppModelsRegisterExternalBindingModel
    export type AccountRegisterExternalMutationError = unknown

    export const useAccountRegisterExternal = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAccountRegisterExternalHook>>>, TError,{data: WebAppModelsRegisterExternalBindingModel}, TContext>, }
) => {

      const mutationOptions = useAccountRegisterExternalMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useActivityGetAllActivityHook = () => {
        const activityGetAllActivity = useCustomInstance<DomainModelBenchmarkActivity[]>();

        return (
    
 signal?: AbortSignal
) => {
        return activityGetAllActivity(
          {url: `/api/Activity/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getActivityGetAllActivityQueryKey = () => {
    return [`/api/Activity/getAll`] as const;
    }

    
export const useActivityGetAllActivityQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useActivityGetAllActivityHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityGetAllActivityHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getActivityGetAllActivityQueryKey();

  const activityGetAllActivity =  useActivityGetAllActivityHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useActivityGetAllActivityHook>>>> = ({ signal }) => activityGetAllActivity(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityGetAllActivityHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ActivityGetAllActivityQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useActivityGetAllActivityHook>>>>
export type ActivityGetAllActivityQueryError = unknown

export const useActivityGetAllActivity = <TData = Awaited<ReturnType<ReturnType<typeof useActivityGetAllActivityHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityGetAllActivityHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useActivityGetAllActivityQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useActivityGetAllActivityByStatusHook = () => {
        const activityGetAllActivityByStatus = useCustomInstance<DomainModelBenchmarkActivity[]>();

        return (
    statusId: number,
 signal?: AbortSignal
) => {
        return activityGetAllActivityByStatus(
          {url: `/api/statuses/${statusId}/Activity`, method: 'GET', signal
    },
          );
        }
      }
    

export const getActivityGetAllActivityByStatusQueryKey = (statusId: number,) => {
    return [`/api/statuses/${statusId}/Activity`] as const;
    }

    
export const useActivityGetAllActivityByStatusQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useActivityGetAllActivityByStatusHook>>>, TError = unknown>(statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityGetAllActivityByStatusHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getActivityGetAllActivityByStatusQueryKey(statusId);

  const activityGetAllActivityByStatus =  useActivityGetAllActivityByStatusHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useActivityGetAllActivityByStatusHook>>>> = ({ signal }) => activityGetAllActivityByStatus(statusId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(statusId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityGetAllActivityByStatusHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ActivityGetAllActivityByStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useActivityGetAllActivityByStatusHook>>>>
export type ActivityGetAllActivityByStatusQueryError = unknown

export const useActivityGetAllActivityByStatus = <TData = Awaited<ReturnType<ReturnType<typeof useActivityGetAllActivityByStatusHook>>>, TError = unknown>(
 statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityGetAllActivityByStatusHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useActivityGetAllActivityByStatusQueryOptions(statusId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useActivityGetActivityByCustomerIdHook = () => {
        const activityGetActivityByCustomerId = useCustomInstance<DomainModelBenchmarkActivity[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return activityGetActivityByCustomerId(
          {url: `/api/customers/${customerId}/Activity`, method: 'GET', signal
    },
          );
        }
      }
    

export const getActivityGetActivityByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/Activity`] as const;
    }

    
export const useActivityGetActivityByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useActivityGetActivityByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityGetActivityByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getActivityGetActivityByCustomerIdQueryKey(customerId);

  const activityGetActivityByCustomerId =  useActivityGetActivityByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useActivityGetActivityByCustomerIdHook>>>> = ({ signal }) => activityGetActivityByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityGetActivityByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ActivityGetActivityByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useActivityGetActivityByCustomerIdHook>>>>
export type ActivityGetActivityByCustomerIdQueryError = unknown

export const useActivityGetActivityByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof useActivityGetActivityByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityGetActivityByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useActivityGetActivityByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useActivityPostActivityHook = () => {
        const activityPostActivity = useCustomInstance<DomainModelBenchmarkActivity>();

        return (
    domainModelBenchmarkActivityBody: DomainModelBenchmarkActivityBody,
 ) => {
        return activityPostActivity(
          {url: `/api/Activity/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkActivityBody
    },
          );
        }
      }
    


export const useActivityPostActivityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityPostActivityHook>>>, TError,{data: DomainModelBenchmarkActivityBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityPostActivityHook>>>, TError,{data: DomainModelBenchmarkActivityBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const activityPostActivity =  useActivityPostActivityHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useActivityPostActivityHook>>>, {data: DomainModelBenchmarkActivityBody}> = (props) => {
          const {data} = props ?? {};

          return  activityPostActivity(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ActivityPostActivityMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useActivityPostActivityHook>>>>
    export type ActivityPostActivityMutationBody = DomainModelBenchmarkActivityBody
    export type ActivityPostActivityMutationError = unknown

    export const useActivityPostActivity = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityPostActivityHook>>>, TError,{data: DomainModelBenchmarkActivityBody}, TContext>, }
) => {

      const mutationOptions = useActivityPostActivityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useActivityRateActivityHook = () => {
        const activityRateActivity = useCustomInstance<DomainModelBenchmarkActivity>();

        return (
    domainModelBenchmarkActivityBody: DomainModelBenchmarkActivityBody,
 ) => {
        return activityRateActivity(
          {url: `/api/Activity/rate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkActivityBody
    },
          );
        }
      }
    


export const useActivityRateActivityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityRateActivityHook>>>, TError,{data: DomainModelBenchmarkActivityBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityRateActivityHook>>>, TError,{data: DomainModelBenchmarkActivityBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const activityRateActivity =  useActivityRateActivityHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useActivityRateActivityHook>>>, {data: DomainModelBenchmarkActivityBody}> = (props) => {
          const {data} = props ?? {};

          return  activityRateActivity(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ActivityRateActivityMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useActivityRateActivityHook>>>>
    export type ActivityRateActivityMutationBody = DomainModelBenchmarkActivityBody
    export type ActivityRateActivityMutationError = unknown

    export const useActivityRateActivity = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityRateActivityHook>>>, TError,{data: DomainModelBenchmarkActivityBody}, TContext>, }
) => {

      const mutationOptions = useActivityRateActivityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useActivityPutActivityHook = () => {
        const activityPutActivity = useCustomInstance<DomainModelBenchmarkActivity>();

        return (
    domainModelBenchmarkActivityBody: DomainModelBenchmarkActivityBody,
 ) => {
        return activityPutActivity(
          {url: `/api/Activity/edit`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkActivityBody
    },
          );
        }
      }
    


export const useActivityPutActivityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityPutActivityHook>>>, TError,{data: DomainModelBenchmarkActivityBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityPutActivityHook>>>, TError,{data: DomainModelBenchmarkActivityBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const activityPutActivity =  useActivityPutActivityHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useActivityPutActivityHook>>>, {data: DomainModelBenchmarkActivityBody}> = (props) => {
          const {data} = props ?? {};

          return  activityPutActivity(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ActivityPutActivityMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useActivityPutActivityHook>>>>
    export type ActivityPutActivityMutationBody = DomainModelBenchmarkActivityBody
    export type ActivityPutActivityMutationError = unknown

    export const useActivityPutActivity = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityPutActivityHook>>>, TError,{data: DomainModelBenchmarkActivityBody}, TContext>, }
) => {

      const mutationOptions = useActivityPutActivityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useActivityDeleteActivityHook = () => {
        const activityDeleteActivity = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return activityDeleteActivity(
          {url: `/api/Activity/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getActivityDeleteActivityQueryKey = (id: number,) => {
    return [`/api/Activity/delete/${id}`] as const;
    }

    
export const useActivityDeleteActivityQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useActivityDeleteActivityHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityDeleteActivityHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getActivityDeleteActivityQueryKey(id);

  const activityDeleteActivity =  useActivityDeleteActivityHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useActivityDeleteActivityHook>>>> = ({ signal }) => activityDeleteActivity(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityDeleteActivityHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ActivityDeleteActivityQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useActivityDeleteActivityHook>>>>
export type ActivityDeleteActivityQueryError = unknown

export const useActivityDeleteActivity = <TData = Awaited<ReturnType<ReturnType<typeof useActivityDeleteActivityHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityDeleteActivityHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useActivityDeleteActivityQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useActivityUpdateActivityHook = () => {
        const activityUpdateActivity = useCustomInstance<DomainModelBenchmarkActivity[]>();

        return (
    domainModelBenchmarkActivity: DomainModelBenchmarkActivity[],
 ) => {
        return activityUpdateActivity(
          {url: `/api/Activity/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkActivity
    },
          );
        }
      }
    


export const useActivityUpdateActivityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityUpdateActivityHook>>>, TError,{data: DomainModelBenchmarkActivity[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityUpdateActivityHook>>>, TError,{data: DomainModelBenchmarkActivity[]}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const activityUpdateActivity =  useActivityUpdateActivityHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useActivityUpdateActivityHook>>>, {data: DomainModelBenchmarkActivity[]}> = (props) => {
          const {data} = props ?? {};

          return  activityUpdateActivity(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ActivityUpdateActivityMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useActivityUpdateActivityHook>>>>
    export type ActivityUpdateActivityMutationBody = DomainModelBenchmarkActivity[]
    export type ActivityUpdateActivityMutationError = unknown

    export const useActivityUpdateActivity = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityUpdateActivityHook>>>, TError,{data: DomainModelBenchmarkActivity[]}, TContext>, }
) => {

      const mutationOptions = useActivityUpdateActivityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useActivityGetHook = () => {
        const activityGet = useCustomInstance<DomainModelBenchmarkActivity>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return activityGet(
          {url: `/api/Activity/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getActivityGetQueryKey = (id: number,) => {
    return [`/api/Activity/${id}`] as const;
    }

    
export const useActivityGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useActivityGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getActivityGetQueryKey(id);

  const activityGet =  useActivityGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useActivityGetHook>>>> = ({ signal }) => activityGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ActivityGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useActivityGetHook>>>>
export type ActivityGetQueryError = unknown

export const useActivityGet = <TData = Awaited<ReturnType<ReturnType<typeof useActivityGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useActivityGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useActivityTypeGetAllActivityTypeHook = () => {
        const activityTypeGetAllActivityType = useCustomInstance<DomainModelBenchmarkActivityType[]>();

        return (
    
 signal?: AbortSignal
) => {
        return activityTypeGetAllActivityType(
          {url: `/api/ActivityType/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getActivityTypeGetAllActivityTypeQueryKey = () => {
    return [`/api/ActivityType/getAll`] as const;
    }

    
export const useActivityTypeGetAllActivityTypeQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useActivityTypeGetAllActivityTypeHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypeGetAllActivityTypeHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getActivityTypeGetAllActivityTypeQueryKey();

  const activityTypeGetAllActivityType =  useActivityTypeGetAllActivityTypeHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useActivityTypeGetAllActivityTypeHook>>>> = ({ signal }) => activityTypeGetAllActivityType(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypeGetAllActivityTypeHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ActivityTypeGetAllActivityTypeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useActivityTypeGetAllActivityTypeHook>>>>
export type ActivityTypeGetAllActivityTypeQueryError = unknown

export const useActivityTypeGetAllActivityType = <TData = Awaited<ReturnType<ReturnType<typeof useActivityTypeGetAllActivityTypeHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypeGetAllActivityTypeHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useActivityTypeGetAllActivityTypeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useActivityTypeGetAllActivityTypeByStatusHook = () => {
        const activityTypeGetAllActivityTypeByStatus = useCustomInstance<DomainModelBenchmarkActivityType[]>();

        return (
    statusId: number,
 signal?: AbortSignal
) => {
        return activityTypeGetAllActivityTypeByStatus(
          {url: `/api/statuses/${statusId}/ActivityType`, method: 'GET', signal
    },
          );
        }
      }
    

export const getActivityTypeGetAllActivityTypeByStatusQueryKey = (statusId: number,) => {
    return [`/api/statuses/${statusId}/ActivityType`] as const;
    }

    
export const useActivityTypeGetAllActivityTypeByStatusQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useActivityTypeGetAllActivityTypeByStatusHook>>>, TError = unknown>(statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypeGetAllActivityTypeByStatusHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getActivityTypeGetAllActivityTypeByStatusQueryKey(statusId);

  const activityTypeGetAllActivityTypeByStatus =  useActivityTypeGetAllActivityTypeByStatusHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useActivityTypeGetAllActivityTypeByStatusHook>>>> = ({ signal }) => activityTypeGetAllActivityTypeByStatus(statusId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(statusId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypeGetAllActivityTypeByStatusHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ActivityTypeGetAllActivityTypeByStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useActivityTypeGetAllActivityTypeByStatusHook>>>>
export type ActivityTypeGetAllActivityTypeByStatusQueryError = unknown

export const useActivityTypeGetAllActivityTypeByStatus = <TData = Awaited<ReturnType<ReturnType<typeof useActivityTypeGetAllActivityTypeByStatusHook>>>, TError = unknown>(
 statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypeGetAllActivityTypeByStatusHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useActivityTypeGetAllActivityTypeByStatusQueryOptions(statusId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useActivityTypeGetActivityTypeByCustomerIdHook = () => {
        const activityTypeGetActivityTypeByCustomerId = useCustomInstance<DomainModelBenchmarkActivityType[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return activityTypeGetActivityTypeByCustomerId(
          {url: `/api/customers/${customerId}/ActivityType`, method: 'GET', signal
    },
          );
        }
      }
    

export const getActivityTypeGetActivityTypeByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/ActivityType`] as const;
    }

    
export const useActivityTypeGetActivityTypeByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useActivityTypeGetActivityTypeByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypeGetActivityTypeByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getActivityTypeGetActivityTypeByCustomerIdQueryKey(customerId);

  const activityTypeGetActivityTypeByCustomerId =  useActivityTypeGetActivityTypeByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useActivityTypeGetActivityTypeByCustomerIdHook>>>> = ({ signal }) => activityTypeGetActivityTypeByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypeGetActivityTypeByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ActivityTypeGetActivityTypeByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useActivityTypeGetActivityTypeByCustomerIdHook>>>>
export type ActivityTypeGetActivityTypeByCustomerIdQueryError = unknown

export const useActivityTypeGetActivityTypeByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof useActivityTypeGetActivityTypeByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypeGetActivityTypeByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useActivityTypeGetActivityTypeByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useActivityTypePostActivityTypeHook = () => {
        const activityTypePostActivityType = useCustomInstance<DomainModelBenchmarkActivityType>();

        return (
    domainModelBenchmarkActivityTypeBody: DomainModelBenchmarkActivityTypeBody,
 ) => {
        return activityTypePostActivityType(
          {url: `/api/ActivityType/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkActivityTypeBody
    },
          );
        }
      }
    


export const useActivityTypePostActivityTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypePostActivityTypeHook>>>, TError,{data: DomainModelBenchmarkActivityTypeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypePostActivityTypeHook>>>, TError,{data: DomainModelBenchmarkActivityTypeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const activityTypePostActivityType =  useActivityTypePostActivityTypeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useActivityTypePostActivityTypeHook>>>, {data: DomainModelBenchmarkActivityTypeBody}> = (props) => {
          const {data} = props ?? {};

          return  activityTypePostActivityType(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ActivityTypePostActivityTypeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useActivityTypePostActivityTypeHook>>>>
    export type ActivityTypePostActivityTypeMutationBody = DomainModelBenchmarkActivityTypeBody
    export type ActivityTypePostActivityTypeMutationError = unknown

    export const useActivityTypePostActivityType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypePostActivityTypeHook>>>, TError,{data: DomainModelBenchmarkActivityTypeBody}, TContext>, }
) => {

      const mutationOptions = useActivityTypePostActivityTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useActivityTypeRateActivityTypeHook = () => {
        const activityTypeRateActivityType = useCustomInstance<DomainModelBenchmarkActivityType>();

        return (
    domainModelBenchmarkActivityTypeBody: DomainModelBenchmarkActivityTypeBody,
 ) => {
        return activityTypeRateActivityType(
          {url: `/api/ActivityType/rate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkActivityTypeBody
    },
          );
        }
      }
    


export const useActivityTypeRateActivityTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypeRateActivityTypeHook>>>, TError,{data: DomainModelBenchmarkActivityTypeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypeRateActivityTypeHook>>>, TError,{data: DomainModelBenchmarkActivityTypeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const activityTypeRateActivityType =  useActivityTypeRateActivityTypeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useActivityTypeRateActivityTypeHook>>>, {data: DomainModelBenchmarkActivityTypeBody}> = (props) => {
          const {data} = props ?? {};

          return  activityTypeRateActivityType(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ActivityTypeRateActivityTypeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useActivityTypeRateActivityTypeHook>>>>
    export type ActivityTypeRateActivityTypeMutationBody = DomainModelBenchmarkActivityTypeBody
    export type ActivityTypeRateActivityTypeMutationError = unknown

    export const useActivityTypeRateActivityType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypeRateActivityTypeHook>>>, TError,{data: DomainModelBenchmarkActivityTypeBody}, TContext>, }
) => {

      const mutationOptions = useActivityTypeRateActivityTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useActivityTypePutActivityTypeHook = () => {
        const activityTypePutActivityType = useCustomInstance<DomainModelBenchmarkActivityType>();

        return (
    domainModelBenchmarkActivityTypeBody: DomainModelBenchmarkActivityTypeBody,
 ) => {
        return activityTypePutActivityType(
          {url: `/api/ActivityType/edit`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkActivityTypeBody
    },
          );
        }
      }
    


export const useActivityTypePutActivityTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypePutActivityTypeHook>>>, TError,{data: DomainModelBenchmarkActivityTypeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypePutActivityTypeHook>>>, TError,{data: DomainModelBenchmarkActivityTypeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const activityTypePutActivityType =  useActivityTypePutActivityTypeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useActivityTypePutActivityTypeHook>>>, {data: DomainModelBenchmarkActivityTypeBody}> = (props) => {
          const {data} = props ?? {};

          return  activityTypePutActivityType(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ActivityTypePutActivityTypeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useActivityTypePutActivityTypeHook>>>>
    export type ActivityTypePutActivityTypeMutationBody = DomainModelBenchmarkActivityTypeBody
    export type ActivityTypePutActivityTypeMutationError = unknown

    export const useActivityTypePutActivityType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypePutActivityTypeHook>>>, TError,{data: DomainModelBenchmarkActivityTypeBody}, TContext>, }
) => {

      const mutationOptions = useActivityTypePutActivityTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useActivityTypeDeleteActivityTypeHook = () => {
        const activityTypeDeleteActivityType = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return activityTypeDeleteActivityType(
          {url: `/api/ActivityType/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getActivityTypeDeleteActivityTypeQueryKey = (id: number,) => {
    return [`/api/ActivityType/delete/${id}`] as const;
    }

    
export const useActivityTypeDeleteActivityTypeQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useActivityTypeDeleteActivityTypeHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypeDeleteActivityTypeHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getActivityTypeDeleteActivityTypeQueryKey(id);

  const activityTypeDeleteActivityType =  useActivityTypeDeleteActivityTypeHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useActivityTypeDeleteActivityTypeHook>>>> = ({ signal }) => activityTypeDeleteActivityType(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypeDeleteActivityTypeHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ActivityTypeDeleteActivityTypeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useActivityTypeDeleteActivityTypeHook>>>>
export type ActivityTypeDeleteActivityTypeQueryError = unknown

export const useActivityTypeDeleteActivityType = <TData = Awaited<ReturnType<ReturnType<typeof useActivityTypeDeleteActivityTypeHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypeDeleteActivityTypeHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useActivityTypeDeleteActivityTypeQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useActivityTypeUpdateActivityTypeHook = () => {
        const activityTypeUpdateActivityType = useCustomInstance<DomainModelBenchmarkActivityType[]>();

        return (
    domainModelBenchmarkActivityType: DomainModelBenchmarkActivityType[],
 ) => {
        return activityTypeUpdateActivityType(
          {url: `/api/ActivityType/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkActivityType
    },
          );
        }
      }
    


export const useActivityTypeUpdateActivityTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypeUpdateActivityTypeHook>>>, TError,{data: DomainModelBenchmarkActivityType[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypeUpdateActivityTypeHook>>>, TError,{data: DomainModelBenchmarkActivityType[]}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const activityTypeUpdateActivityType =  useActivityTypeUpdateActivityTypeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useActivityTypeUpdateActivityTypeHook>>>, {data: DomainModelBenchmarkActivityType[]}> = (props) => {
          const {data} = props ?? {};

          return  activityTypeUpdateActivityType(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ActivityTypeUpdateActivityTypeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useActivityTypeUpdateActivityTypeHook>>>>
    export type ActivityTypeUpdateActivityTypeMutationBody = DomainModelBenchmarkActivityType[]
    export type ActivityTypeUpdateActivityTypeMutationError = unknown

    export const useActivityTypeUpdateActivityType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypeUpdateActivityTypeHook>>>, TError,{data: DomainModelBenchmarkActivityType[]}, TContext>, }
) => {

      const mutationOptions = useActivityTypeUpdateActivityTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useActivityTypeGetHook = () => {
        const activityTypeGet = useCustomInstance<DomainModelBenchmarkActivityType>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return activityTypeGet(
          {url: `/api/ActivityType/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getActivityTypeGetQueryKey = (id: number,) => {
    return [`/api/ActivityType/${id}`] as const;
    }

    
export const useActivityTypeGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useActivityTypeGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypeGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getActivityTypeGetQueryKey(id);

  const activityTypeGet =  useActivityTypeGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useActivityTypeGetHook>>>> = ({ signal }) => activityTypeGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypeGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ActivityTypeGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useActivityTypeGetHook>>>>
export type ActivityTypeGetQueryError = unknown

export const useActivityTypeGet = <TData = Awaited<ReturnType<ReturnType<typeof useActivityTypeGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useActivityTypeGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useActivityTypeGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByAgentIdHook = () => {
        const additionalNamedInsuredGetAllAdditionalNamedInsuredByAgentId = useCustomInstance<DomainModelBenchmarkAdditionalNamedInsured[]>();

        return (
    propertyId: number,
 signal?: AbortSignal
) => {
        return additionalNamedInsuredGetAllAdditionalNamedInsuredByAgentId(
          {url: `/api/AdditionalNamedInsured/Property/${propertyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAdditionalNamedInsuredGetAllAdditionalNamedInsuredByAgentIdQueryKey = (propertyId: number,) => {
    return [`/api/AdditionalNamedInsured/Property/${propertyId}`] as const;
    }

    
export const useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByAgentIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByAgentIdHook>>>, TError = unknown>(propertyId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByAgentIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAdditionalNamedInsuredGetAllAdditionalNamedInsuredByAgentIdQueryKey(propertyId);

  const additionalNamedInsuredGetAllAdditionalNamedInsuredByAgentId =  useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByAgentIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByAgentIdHook>>>> = ({ signal }) => additionalNamedInsuredGetAllAdditionalNamedInsuredByAgentId(propertyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(propertyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByAgentIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AdditionalNamedInsuredGetAllAdditionalNamedInsuredByAgentIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByAgentIdHook>>>>
export type AdditionalNamedInsuredGetAllAdditionalNamedInsuredByAgentIdQueryError = unknown

export const useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByAgentId = <TData = Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByAgentIdHook>>>, TError = unknown>(
 propertyId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByAgentIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByAgentIdQueryOptions(propertyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAdditionalNamedInsuredGetAllUsersHook = () => {
        const additionalNamedInsuredGetAllUsers = useCustomInstance<DomainModelUser[]>();

        return (
    
 signal?: AbortSignal
) => {
        return additionalNamedInsuredGetAllUsers(
          {url: `/api/AdditionalNamedInsured/users`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAdditionalNamedInsuredGetAllUsersQueryKey = () => {
    return [`/api/AdditionalNamedInsured/users`] as const;
    }

    
export const useAdditionalNamedInsuredGetAllUsersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllUsersHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllUsersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAdditionalNamedInsuredGetAllUsersQueryKey();

  const additionalNamedInsuredGetAllUsers =  useAdditionalNamedInsuredGetAllUsersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllUsersHook>>>> = ({ signal }) => additionalNamedInsuredGetAllUsers(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllUsersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AdditionalNamedInsuredGetAllUsersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllUsersHook>>>>
export type AdditionalNamedInsuredGetAllUsersQueryError = unknown

export const useAdditionalNamedInsuredGetAllUsers = <TData = Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllUsersHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllUsersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAdditionalNamedInsuredGetAllUsersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByStatusHook = () => {
        const additionalNamedInsuredGetAllAdditionalNamedInsuredByStatus = useCustomInstance<DomainModelBenchmarkAdditionalNamedInsured[]>();

        return (
    statusId: number,
 signal?: AbortSignal
) => {
        return additionalNamedInsuredGetAllAdditionalNamedInsuredByStatus(
          {url: `/api/statuses/${statusId}/AdditionalNamedInsured`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAdditionalNamedInsuredGetAllAdditionalNamedInsuredByStatusQueryKey = (statusId: number,) => {
    return [`/api/statuses/${statusId}/AdditionalNamedInsured`] as const;
    }

    
export const useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByStatusQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByStatusHook>>>, TError = unknown>(statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByStatusHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAdditionalNamedInsuredGetAllAdditionalNamedInsuredByStatusQueryKey(statusId);

  const additionalNamedInsuredGetAllAdditionalNamedInsuredByStatus =  useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByStatusHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByStatusHook>>>> = ({ signal }) => additionalNamedInsuredGetAllAdditionalNamedInsuredByStatus(statusId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(statusId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByStatusHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AdditionalNamedInsuredGetAllAdditionalNamedInsuredByStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByStatusHook>>>>
export type AdditionalNamedInsuredGetAllAdditionalNamedInsuredByStatusQueryError = unknown

export const useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByStatus = <TData = Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByStatusHook>>>, TError = unknown>(
 statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByStatusHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAdditionalNamedInsuredGetAllAdditionalNamedInsuredByStatusQueryOptions(statusId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAdditionalNamedInsuredAuthenticateAdditionalNamedInsuredHook = () => {
        const additionalNamedInsuredAuthenticateAdditionalNamedInsured = useCustomInstance<DomainModelBenchmarkAdditionalNamedInsured>();

        return (
    domainModelBenchmarkAdditionalNamedInsuredBody: DomainModelBenchmarkAdditionalNamedInsuredBody,
 ) => {
        return additionalNamedInsuredAuthenticateAdditionalNamedInsured(
          {url: `/api/AdditionalNamedInsured/AuthenticateAdditionalNamedInsured`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkAdditionalNamedInsuredBody
    },
          );
        }
      }
    


export const useAdditionalNamedInsuredAuthenticateAdditionalNamedInsuredMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredAuthenticateAdditionalNamedInsuredHook>>>, TError,{data: DomainModelBenchmarkAdditionalNamedInsuredBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredAuthenticateAdditionalNamedInsuredHook>>>, TError,{data: DomainModelBenchmarkAdditionalNamedInsuredBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const additionalNamedInsuredAuthenticateAdditionalNamedInsured =  useAdditionalNamedInsuredAuthenticateAdditionalNamedInsuredHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredAuthenticateAdditionalNamedInsuredHook>>>, {data: DomainModelBenchmarkAdditionalNamedInsuredBody}> = (props) => {
          const {data} = props ?? {};

          return  additionalNamedInsuredAuthenticateAdditionalNamedInsured(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AdditionalNamedInsuredAuthenticateAdditionalNamedInsuredMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredAuthenticateAdditionalNamedInsuredHook>>>>
    export type AdditionalNamedInsuredAuthenticateAdditionalNamedInsuredMutationBody = DomainModelBenchmarkAdditionalNamedInsuredBody
    export type AdditionalNamedInsuredAuthenticateAdditionalNamedInsuredMutationError = unknown

    export const useAdditionalNamedInsuredAuthenticateAdditionalNamedInsured = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredAuthenticateAdditionalNamedInsuredHook>>>, TError,{data: DomainModelBenchmarkAdditionalNamedInsuredBody}, TContext>, }
) => {

      const mutationOptions = useAdditionalNamedInsuredAuthenticateAdditionalNamedInsuredMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAdditionalNamedInsuredPostMultiAdditionalNamedInsuredHook = () => {
        const additionalNamedInsuredPostMultiAdditionalNamedInsured = useCustomInstance<boolean>();

        return (
    domainModelBenchmarkAdditionalNamedInsured: DomainModelBenchmarkAdditionalNamedInsured[],
 ) => {
        return additionalNamedInsuredPostMultiAdditionalNamedInsured(
          {url: `/api/AdditionalNamedInsured/multi`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkAdditionalNamedInsured
    },
          );
        }
      }
    


export const useAdditionalNamedInsuredPostMultiAdditionalNamedInsuredMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredPostMultiAdditionalNamedInsuredHook>>>, TError,{data: DomainModelBenchmarkAdditionalNamedInsured[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredPostMultiAdditionalNamedInsuredHook>>>, TError,{data: DomainModelBenchmarkAdditionalNamedInsured[]}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const additionalNamedInsuredPostMultiAdditionalNamedInsured =  useAdditionalNamedInsuredPostMultiAdditionalNamedInsuredHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredPostMultiAdditionalNamedInsuredHook>>>, {data: DomainModelBenchmarkAdditionalNamedInsured[]}> = (props) => {
          const {data} = props ?? {};

          return  additionalNamedInsuredPostMultiAdditionalNamedInsured(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AdditionalNamedInsuredPostMultiAdditionalNamedInsuredMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredPostMultiAdditionalNamedInsuredHook>>>>
    export type AdditionalNamedInsuredPostMultiAdditionalNamedInsuredMutationBody = DomainModelBenchmarkAdditionalNamedInsured[]
    export type AdditionalNamedInsuredPostMultiAdditionalNamedInsuredMutationError = unknown

    export const useAdditionalNamedInsuredPostMultiAdditionalNamedInsured = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredPostMultiAdditionalNamedInsuredHook>>>, TError,{data: DomainModelBenchmarkAdditionalNamedInsured[]}, TContext>, }
) => {

      const mutationOptions = useAdditionalNamedInsuredPostMultiAdditionalNamedInsuredMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAdditionalNamedInsuredRateAdditionalNamedInsuredHook = () => {
        const additionalNamedInsuredRateAdditionalNamedInsured = useCustomInstance<AdditionalNamedInsuredRateAdditionalNamedInsured200OneItem[] | AdditionalNamedInsuredRateAdditionalNamedInsured200TwoItem[] | AdditionalNamedInsuredRateAdditionalNamedInsured200ThreeItem[] | AdditionalNamedInsuredRateAdditionalNamedInsured200FourItem[]>();

        return (
    domainModelBenchmarkAdditionalNamedInsuredBody: DomainModelBenchmarkAdditionalNamedInsuredBody,
 ) => {
        return additionalNamedInsuredRateAdditionalNamedInsured(
          {url: `/api/AdditionalNamedInsured/rate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkAdditionalNamedInsuredBody
    },
          );
        }
      }
    


export const useAdditionalNamedInsuredRateAdditionalNamedInsuredMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredRateAdditionalNamedInsuredHook>>>, TError,{data: DomainModelBenchmarkAdditionalNamedInsuredBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredRateAdditionalNamedInsuredHook>>>, TError,{data: DomainModelBenchmarkAdditionalNamedInsuredBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const additionalNamedInsuredRateAdditionalNamedInsured =  useAdditionalNamedInsuredRateAdditionalNamedInsuredHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredRateAdditionalNamedInsuredHook>>>, {data: DomainModelBenchmarkAdditionalNamedInsuredBody}> = (props) => {
          const {data} = props ?? {};

          return  additionalNamedInsuredRateAdditionalNamedInsured(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AdditionalNamedInsuredRateAdditionalNamedInsuredMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredRateAdditionalNamedInsuredHook>>>>
    export type AdditionalNamedInsuredRateAdditionalNamedInsuredMutationBody = DomainModelBenchmarkAdditionalNamedInsuredBody
    export type AdditionalNamedInsuredRateAdditionalNamedInsuredMutationError = unknown

    export const useAdditionalNamedInsuredRateAdditionalNamedInsured = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredRateAdditionalNamedInsuredHook>>>, TError,{data: DomainModelBenchmarkAdditionalNamedInsuredBody}, TContext>, }
) => {

      const mutationOptions = useAdditionalNamedInsuredRateAdditionalNamedInsuredMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAdditionalNamedInsuredPutAdditionalNamedInsuredHook = () => {
        const additionalNamedInsuredPutAdditionalNamedInsured = useCustomInstance<AdditionalNamedInsuredPutAdditionalNamedInsured200OneItem[] | AdditionalNamedInsuredPutAdditionalNamedInsured200TwoItem[] | AdditionalNamedInsuredPutAdditionalNamedInsured200ThreeItem[] | AdditionalNamedInsuredPutAdditionalNamedInsured200FourItem[]>();

        return (
    domainModelBenchmarkAdditionalNamedInsuredBody: DomainModelBenchmarkAdditionalNamedInsuredBody,
 ) => {
        return additionalNamedInsuredPutAdditionalNamedInsured(
          {url: `/api/AdditionalNamedInsured/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkAdditionalNamedInsuredBody
    },
          );
        }
      }
    


export const useAdditionalNamedInsuredPutAdditionalNamedInsuredMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredPutAdditionalNamedInsuredHook>>>, TError,{data: DomainModelBenchmarkAdditionalNamedInsuredBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredPutAdditionalNamedInsuredHook>>>, TError,{data: DomainModelBenchmarkAdditionalNamedInsuredBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const additionalNamedInsuredPutAdditionalNamedInsured =  useAdditionalNamedInsuredPutAdditionalNamedInsuredHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredPutAdditionalNamedInsuredHook>>>, {data: DomainModelBenchmarkAdditionalNamedInsuredBody}> = (props) => {
          const {data} = props ?? {};

          return  additionalNamedInsuredPutAdditionalNamedInsured(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AdditionalNamedInsuredPutAdditionalNamedInsuredMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredPutAdditionalNamedInsuredHook>>>>
    export type AdditionalNamedInsuredPutAdditionalNamedInsuredMutationBody = DomainModelBenchmarkAdditionalNamedInsuredBody
    export type AdditionalNamedInsuredPutAdditionalNamedInsuredMutationError = unknown

    export const useAdditionalNamedInsuredPutAdditionalNamedInsured = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredPutAdditionalNamedInsuredHook>>>, TError,{data: DomainModelBenchmarkAdditionalNamedInsuredBody}, TContext>, }
) => {

      const mutationOptions = useAdditionalNamedInsuredPutAdditionalNamedInsuredMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAdditionalNamedInsuredDeleteAdditionalNamedInsuredHook = () => {
        const additionalNamedInsuredDeleteAdditionalNamedInsured = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return additionalNamedInsuredDeleteAdditionalNamedInsured(
          {url: `/api/AdditionalNamedInsured/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAdditionalNamedInsuredDeleteAdditionalNamedInsuredQueryKey = (id: number,) => {
    return [`/api/AdditionalNamedInsured/delete/${id}`] as const;
    }

    
export const useAdditionalNamedInsuredDeleteAdditionalNamedInsuredQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredDeleteAdditionalNamedInsuredHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredDeleteAdditionalNamedInsuredHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAdditionalNamedInsuredDeleteAdditionalNamedInsuredQueryKey(id);

  const additionalNamedInsuredDeleteAdditionalNamedInsured =  useAdditionalNamedInsuredDeleteAdditionalNamedInsuredHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredDeleteAdditionalNamedInsuredHook>>>> = ({ signal }) => additionalNamedInsuredDeleteAdditionalNamedInsured(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredDeleteAdditionalNamedInsuredHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AdditionalNamedInsuredDeleteAdditionalNamedInsuredQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredDeleteAdditionalNamedInsuredHook>>>>
export type AdditionalNamedInsuredDeleteAdditionalNamedInsuredQueryError = unknown

export const useAdditionalNamedInsuredDeleteAdditionalNamedInsured = <TData = Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredDeleteAdditionalNamedInsuredHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredDeleteAdditionalNamedInsuredHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAdditionalNamedInsuredDeleteAdditionalNamedInsuredQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAdditionalNamedInsuredGetHook = () => {
        const additionalNamedInsuredGet = useCustomInstance<DomainModelBenchmarkAdditionalNamedInsured>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return additionalNamedInsuredGet(
          {url: `/api/AdditionalNamedInsured/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAdditionalNamedInsuredGetQueryKey = (id: number,) => {
    return [`/api/AdditionalNamedInsured/${id}`] as const;
    }

    
export const useAdditionalNamedInsuredGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAdditionalNamedInsuredGetQueryKey(id);

  const additionalNamedInsuredGet =  useAdditionalNamedInsuredGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetHook>>>> = ({ signal }) => additionalNamedInsuredGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AdditionalNamedInsuredGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetHook>>>>
export type AdditionalNamedInsuredGetQueryError = unknown

export const useAdditionalNamedInsuredGet = <TData = Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAdditionalNamedInsuredGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAdditionalNamedInsuredGetAllAdditionalNamedInsuredHook = () => {
        const additionalNamedInsuredGetAllAdditionalNamedInsured = useCustomInstance<DomainModelBenchmarkAdditionalNamedInsured[]>();

        return (
    
 signal?: AbortSignal
) => {
        return additionalNamedInsuredGetAllAdditionalNamedInsured(
          {url: `/api/AdditionalNamedInsured`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAdditionalNamedInsuredGetAllAdditionalNamedInsuredQueryKey = () => {
    return [`/api/AdditionalNamedInsured`] as const;
    }

    
export const useAdditionalNamedInsuredGetAllAdditionalNamedInsuredQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllAdditionalNamedInsuredHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllAdditionalNamedInsuredHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAdditionalNamedInsuredGetAllAdditionalNamedInsuredQueryKey();

  const additionalNamedInsuredGetAllAdditionalNamedInsured =  useAdditionalNamedInsuredGetAllAdditionalNamedInsuredHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllAdditionalNamedInsuredHook>>>> = ({ signal }) => additionalNamedInsuredGetAllAdditionalNamedInsured(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllAdditionalNamedInsuredHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AdditionalNamedInsuredGetAllAdditionalNamedInsuredQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllAdditionalNamedInsuredHook>>>>
export type AdditionalNamedInsuredGetAllAdditionalNamedInsuredQueryError = unknown

export const useAdditionalNamedInsuredGetAllAdditionalNamedInsured = <TData = Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllAdditionalNamedInsuredHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredGetAllAdditionalNamedInsuredHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAdditionalNamedInsuredGetAllAdditionalNamedInsuredQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAdditionalNamedInsuredPostAdditionalNamedInsuredHook = () => {
        const additionalNamedInsuredPostAdditionalNamedInsured = useCustomInstance<DomainModelBenchmarkAdditionalNamedInsured>();

        return (
    domainModelBenchmarkAdditionalNamedInsuredBody: DomainModelBenchmarkAdditionalNamedInsuredBody,
 ) => {
        return additionalNamedInsuredPostAdditionalNamedInsured(
          {url: `/api/AdditionalNamedInsured`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkAdditionalNamedInsuredBody
    },
          );
        }
      }
    


export const useAdditionalNamedInsuredPostAdditionalNamedInsuredMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredPostAdditionalNamedInsuredHook>>>, TError,{data: DomainModelBenchmarkAdditionalNamedInsuredBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredPostAdditionalNamedInsuredHook>>>, TError,{data: DomainModelBenchmarkAdditionalNamedInsuredBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const additionalNamedInsuredPostAdditionalNamedInsured =  useAdditionalNamedInsuredPostAdditionalNamedInsuredHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredPostAdditionalNamedInsuredHook>>>, {data: DomainModelBenchmarkAdditionalNamedInsuredBody}> = (props) => {
          const {data} = props ?? {};

          return  additionalNamedInsuredPostAdditionalNamedInsured(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AdditionalNamedInsuredPostAdditionalNamedInsuredMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredPostAdditionalNamedInsuredHook>>>>
    export type AdditionalNamedInsuredPostAdditionalNamedInsuredMutationBody = DomainModelBenchmarkAdditionalNamedInsuredBody
    export type AdditionalNamedInsuredPostAdditionalNamedInsuredMutationError = unknown

    export const useAdditionalNamedInsuredPostAdditionalNamedInsured = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAdditionalNamedInsuredPostAdditionalNamedInsuredHook>>>, TError,{data: DomainModelBenchmarkAdditionalNamedInsuredBody}, TContext>, }
) => {

      const mutationOptions = useAdditionalNamedInsuredPostAdditionalNamedInsuredMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAgencyCreditGetAllAgencyCreditHook = () => {
        const agencyCreditGetAllAgencyCredit = useCustomInstance<DomainModelBenchmarkAgencyCredit[]>();

        return (
    
 signal?: AbortSignal
) => {
        return agencyCreditGetAllAgencyCredit(
          {url: `/api/AgencyCredit/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAgencyCreditGetAllAgencyCreditQueryKey = () => {
    return [`/api/AgencyCredit/getAll`] as const;
    }

    
export const useAgencyCreditGetAllAgencyCreditQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAllAgencyCreditHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAllAgencyCreditHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAgencyCreditGetAllAgencyCreditQueryKey();

  const agencyCreditGetAllAgencyCredit =  useAgencyCreditGetAllAgencyCreditHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAllAgencyCreditHook>>>> = ({ signal }) => agencyCreditGetAllAgencyCredit(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAllAgencyCreditHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AgencyCreditGetAllAgencyCreditQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAllAgencyCreditHook>>>>
export type AgencyCreditGetAllAgencyCreditQueryError = unknown

export const useAgencyCreditGetAllAgencyCredit = <TData = Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAllAgencyCreditHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAllAgencyCreditHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAgencyCreditGetAllAgencyCreditQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAgencyCreditGetAllAgencyCreditByCreditTypeIdHook = () => {
        const agencyCreditGetAllAgencyCreditByCreditTypeId = useCustomInstance<DomainModelBenchmarkAgencyCredit[]>();

        return (
    creditTypeId: number,
 signal?: AbortSignal
) => {
        return agencyCreditGetAllAgencyCreditByCreditTypeId(
          {url: `/api/statuses/${creditTypeId}/AgencyCredit`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAgencyCreditGetAllAgencyCreditByCreditTypeIdQueryKey = (creditTypeId: number,) => {
    return [`/api/statuses/${creditTypeId}/AgencyCredit`] as const;
    }

    
export const useAgencyCreditGetAllAgencyCreditByCreditTypeIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAllAgencyCreditByCreditTypeIdHook>>>, TError = unknown>(creditTypeId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAllAgencyCreditByCreditTypeIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAgencyCreditGetAllAgencyCreditByCreditTypeIdQueryKey(creditTypeId);

  const agencyCreditGetAllAgencyCreditByCreditTypeId =  useAgencyCreditGetAllAgencyCreditByCreditTypeIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAllAgencyCreditByCreditTypeIdHook>>>> = ({ signal }) => agencyCreditGetAllAgencyCreditByCreditTypeId(creditTypeId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(creditTypeId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAllAgencyCreditByCreditTypeIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AgencyCreditGetAllAgencyCreditByCreditTypeIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAllAgencyCreditByCreditTypeIdHook>>>>
export type AgencyCreditGetAllAgencyCreditByCreditTypeIdQueryError = unknown

export const useAgencyCreditGetAllAgencyCreditByCreditTypeId = <TData = Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAllAgencyCreditByCreditTypeIdHook>>>, TError = unknown>(
 creditTypeId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAllAgencyCreditByCreditTypeIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAgencyCreditGetAllAgencyCreditByCreditTypeIdQueryOptions(creditTypeId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAgencyCreditGetAgencyCreditByCustomerIdHook = () => {
        const agencyCreditGetAgencyCreditByCustomerId = useCustomInstance<DomainModelBenchmarkAgencyCredit[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return agencyCreditGetAgencyCreditByCustomerId(
          {url: `/api/customers/${customerId}/AgencyCredit`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAgencyCreditGetAgencyCreditByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/AgencyCredit`] as const;
    }

    
export const useAgencyCreditGetAgencyCreditByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAgencyCreditGetAgencyCreditByCustomerIdQueryKey(customerId);

  const agencyCreditGetAgencyCreditByCustomerId =  useAgencyCreditGetAgencyCreditByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByCustomerIdHook>>>> = ({ signal }) => agencyCreditGetAgencyCreditByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AgencyCreditGetAgencyCreditByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByCustomerIdHook>>>>
export type AgencyCreditGetAgencyCreditByCustomerIdQueryError = unknown

export const useAgencyCreditGetAgencyCreditByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAgencyCreditGetAgencyCreditByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAgencyCreditGetAgencyCreditByPropertyIdHook = () => {
        const agencyCreditGetAgencyCreditByPropertyId = useCustomInstance<DomainModelBenchmarkAgencyCredit[]>();

        return (
    propertyId: number,
 signal?: AbortSignal
) => {
        return agencyCreditGetAgencyCreditByPropertyId(
          {url: `/api/AgencyCredit/Get/${propertyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAgencyCreditGetAgencyCreditByPropertyIdQueryKey = (propertyId: number,) => {
    return [`/api/AgencyCredit/Get/${propertyId}`] as const;
    }

    
export const useAgencyCreditGetAgencyCreditByPropertyIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByPropertyIdHook>>>, TError = unknown>(propertyId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByPropertyIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAgencyCreditGetAgencyCreditByPropertyIdQueryKey(propertyId);

  const agencyCreditGetAgencyCreditByPropertyId =  useAgencyCreditGetAgencyCreditByPropertyIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByPropertyIdHook>>>> = ({ signal }) => agencyCreditGetAgencyCreditByPropertyId(propertyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(propertyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByPropertyIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AgencyCreditGetAgencyCreditByPropertyIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByPropertyIdHook>>>>
export type AgencyCreditGetAgencyCreditByPropertyIdQueryError = unknown

export const useAgencyCreditGetAgencyCreditByPropertyId = <TData = Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByPropertyIdHook>>>, TError = unknown>(
 propertyId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByPropertyIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAgencyCreditGetAgencyCreditByPropertyIdQueryOptions(propertyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAgencyCreditGetAgencyCreditByInvoiceIdHook = () => {
        const agencyCreditGetAgencyCreditByInvoiceId = useCustomInstance<DomainModelBenchmarkAgencyCredit[]>();

        return (
    invoiceId: number,
 signal?: AbortSignal
) => {
        return agencyCreditGetAgencyCreditByInvoiceId(
          {url: `/api/AgencyCredit/Get/${invoiceId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAgencyCreditGetAgencyCreditByInvoiceIdQueryKey = (invoiceId: number,) => {
    return [`/api/AgencyCredit/Get/${invoiceId}`] as const;
    }

    
export const useAgencyCreditGetAgencyCreditByInvoiceIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByInvoiceIdHook>>>, TError = unknown>(invoiceId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByInvoiceIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAgencyCreditGetAgencyCreditByInvoiceIdQueryKey(invoiceId);

  const agencyCreditGetAgencyCreditByInvoiceId =  useAgencyCreditGetAgencyCreditByInvoiceIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByInvoiceIdHook>>>> = ({ signal }) => agencyCreditGetAgencyCreditByInvoiceId(invoiceId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(invoiceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByInvoiceIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AgencyCreditGetAgencyCreditByInvoiceIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByInvoiceIdHook>>>>
export type AgencyCreditGetAgencyCreditByInvoiceIdQueryError = unknown

export const useAgencyCreditGetAgencyCreditByInvoiceId = <TData = Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByInvoiceIdHook>>>, TError = unknown>(
 invoiceId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByInvoiceIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAgencyCreditGetAgencyCreditByInvoiceIdQueryOptions(invoiceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAgencyCreditPostAgencyCreditHook = () => {
        const agencyCreditPostAgencyCredit = useCustomInstance<DomainModelBenchmarkAgencyCredit>();

        return (
    domainModelBenchmarkAgencyCreditBody: DomainModelBenchmarkAgencyCreditBody,
 ) => {
        return agencyCreditPostAgencyCredit(
          {url: `/api/AgencyCredit/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkAgencyCreditBody
    },
          );
        }
      }
    


export const useAgencyCreditPostAgencyCreditMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditPostAgencyCreditHook>>>, TError,{data: DomainModelBenchmarkAgencyCreditBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditPostAgencyCreditHook>>>, TError,{data: DomainModelBenchmarkAgencyCreditBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const agencyCreditPostAgencyCredit =  useAgencyCreditPostAgencyCreditHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAgencyCreditPostAgencyCreditHook>>>, {data: DomainModelBenchmarkAgencyCreditBody}> = (props) => {
          const {data} = props ?? {};

          return  agencyCreditPostAgencyCredit(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AgencyCreditPostAgencyCreditMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgencyCreditPostAgencyCreditHook>>>>
    export type AgencyCreditPostAgencyCreditMutationBody = DomainModelBenchmarkAgencyCreditBody
    export type AgencyCreditPostAgencyCreditMutationError = unknown

    export const useAgencyCreditPostAgencyCredit = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditPostAgencyCreditHook>>>, TError,{data: DomainModelBenchmarkAgencyCreditBody}, TContext>, }
) => {

      const mutationOptions = useAgencyCreditPostAgencyCreditMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAgencyCreditPutAgencyCreditHook = () => {
        const agencyCreditPutAgencyCredit = useCustomInstance<DomainModelBenchmarkAgencyCredit>();

        return (
    domainModelBenchmarkAgencyCreditBody: DomainModelBenchmarkAgencyCreditBody,
 ) => {
        return agencyCreditPutAgencyCredit(
          {url: `/api/AgencyCredit/edit`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkAgencyCreditBody
    },
          );
        }
      }
    


export const useAgencyCreditPutAgencyCreditMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditPutAgencyCreditHook>>>, TError,{data: DomainModelBenchmarkAgencyCreditBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditPutAgencyCreditHook>>>, TError,{data: DomainModelBenchmarkAgencyCreditBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const agencyCreditPutAgencyCredit =  useAgencyCreditPutAgencyCreditHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAgencyCreditPutAgencyCreditHook>>>, {data: DomainModelBenchmarkAgencyCreditBody}> = (props) => {
          const {data} = props ?? {};

          return  agencyCreditPutAgencyCredit(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AgencyCreditPutAgencyCreditMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgencyCreditPutAgencyCreditHook>>>>
    export type AgencyCreditPutAgencyCreditMutationBody = DomainModelBenchmarkAgencyCreditBody
    export type AgencyCreditPutAgencyCreditMutationError = unknown

    export const useAgencyCreditPutAgencyCredit = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditPutAgencyCreditHook>>>, TError,{data: DomainModelBenchmarkAgencyCreditBody}, TContext>, }
) => {

      const mutationOptions = useAgencyCreditPutAgencyCreditMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAgencyCreditDeleteAgencyCreditHook = () => {
        const agencyCreditDeleteAgencyCredit = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return agencyCreditDeleteAgencyCredit(
          {url: `/api/AgencyCredit/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAgencyCreditDeleteAgencyCreditQueryKey = (id: number,) => {
    return [`/api/AgencyCredit/delete/${id}`] as const;
    }

    
export const useAgencyCreditDeleteAgencyCreditQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAgencyCreditDeleteAgencyCreditHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditDeleteAgencyCreditHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAgencyCreditDeleteAgencyCreditQueryKey(id);

  const agencyCreditDeleteAgencyCredit =  useAgencyCreditDeleteAgencyCreditHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAgencyCreditDeleteAgencyCreditHook>>>> = ({ signal }) => agencyCreditDeleteAgencyCredit(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditDeleteAgencyCreditHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AgencyCreditDeleteAgencyCreditQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgencyCreditDeleteAgencyCreditHook>>>>
export type AgencyCreditDeleteAgencyCreditQueryError = unknown

export const useAgencyCreditDeleteAgencyCredit = <TData = Awaited<ReturnType<ReturnType<typeof useAgencyCreditDeleteAgencyCreditHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditDeleteAgencyCreditHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAgencyCreditDeleteAgencyCreditQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAgencyCreditUpdateAgencyCreditHook = () => {
        const agencyCreditUpdateAgencyCredit = useCustomInstance<DomainModelBenchmarkAgencyCredit[]>();

        return (
    domainModelBenchmarkAgencyCredit: DomainModelBenchmarkAgencyCredit[],
 ) => {
        return agencyCreditUpdateAgencyCredit(
          {url: `/api/AgencyCredit/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkAgencyCredit
    },
          );
        }
      }
    


export const useAgencyCreditUpdateAgencyCreditMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditUpdateAgencyCreditHook>>>, TError,{data: DomainModelBenchmarkAgencyCredit[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditUpdateAgencyCreditHook>>>, TError,{data: DomainModelBenchmarkAgencyCredit[]}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const agencyCreditUpdateAgencyCredit =  useAgencyCreditUpdateAgencyCreditHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAgencyCreditUpdateAgencyCreditHook>>>, {data: DomainModelBenchmarkAgencyCredit[]}> = (props) => {
          const {data} = props ?? {};

          return  agencyCreditUpdateAgencyCredit(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AgencyCreditUpdateAgencyCreditMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgencyCreditUpdateAgencyCreditHook>>>>
    export type AgencyCreditUpdateAgencyCreditMutationBody = DomainModelBenchmarkAgencyCredit[]
    export type AgencyCreditUpdateAgencyCreditMutationError = unknown

    export const useAgencyCreditUpdateAgencyCredit = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditUpdateAgencyCreditHook>>>, TError,{data: DomainModelBenchmarkAgencyCredit[]}, TContext>, }
) => {

      const mutationOptions = useAgencyCreditUpdateAgencyCreditMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAgencyCreditGetAgencyCreditByCustomerIdWithFiltersHook = () => {
        const agencyCreditGetAgencyCreditByCustomerIdWithFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkAgencyCredit>();

        return (
    customerId: number,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return agencyCreditGetAgencyCreditByCustomerIdWithFilters(
          {url: `/api/customers/${customerId}/GetAgencyCreditByCustomerIdWithFilters/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAgencyCreditGetAgencyCreditByCustomerIdWithFiltersQueryKey = (customerId: number,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/customers/${customerId}/GetAgencyCreditByCustomerIdWithFilters/${startIndex}/${endIndex}`] as const;
    }

    
export const useAgencyCreditGetAgencyCreditByCustomerIdWithFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByCustomerIdWithFiltersHook>>>, TError = unknown>(customerId: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByCustomerIdWithFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAgencyCreditGetAgencyCreditByCustomerIdWithFiltersQueryKey(customerId,startIndex,endIndex);

  const agencyCreditGetAgencyCreditByCustomerIdWithFilters =  useAgencyCreditGetAgencyCreditByCustomerIdWithFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByCustomerIdWithFiltersHook>>>> = ({ signal }) => agencyCreditGetAgencyCreditByCustomerIdWithFilters(customerId,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByCustomerIdWithFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AgencyCreditGetAgencyCreditByCustomerIdWithFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByCustomerIdWithFiltersHook>>>>
export type AgencyCreditGetAgencyCreditByCustomerIdWithFiltersQueryError = unknown

export const useAgencyCreditGetAgencyCreditByCustomerIdWithFilters = <TData = Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByCustomerIdWithFiltersHook>>>, TError = unknown>(
 customerId: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetAgencyCreditByCustomerIdWithFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAgencyCreditGetAgencyCreditByCustomerIdWithFiltersQueryOptions(customerId,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAgencyCreditGetHook = () => {
        const agencyCreditGet = useCustomInstance<DomainModelBenchmarkAgencyCredit>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return agencyCreditGet(
          {url: `/api/AgencyCredit/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAgencyCreditGetQueryKey = (id: number,) => {
    return [`/api/AgencyCredit/${id}`] as const;
    }

    
export const useAgencyCreditGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAgencyCreditGetQueryKey(id);

  const agencyCreditGet =  useAgencyCreditGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetHook>>>> = ({ signal }) => agencyCreditGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AgencyCreditGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetHook>>>>
export type AgencyCreditGetQueryError = unknown

export const useAgencyCreditGet = <TData = Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgencyCreditGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAgencyCreditGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAgentGetTokenHook = () => {
        const agentGetToken = useCustomInstance<DomainModelModelAuthtoken>();

        return (
    
 signal?: AbortSignal
) => {
        return agentGetToken(
          {url: `/api/Agent/AuthenticateCustomer`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAgentGetTokenQueryKey = () => {
    return [`/api/Agent/AuthenticateCustomer`] as const;
    }

    
export const useAgentGetTokenQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAgentGetTokenHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentGetTokenHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAgentGetTokenQueryKey();

  const agentGetToken =  useAgentGetTokenHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAgentGetTokenHook>>>> = ({ signal }) => agentGetToken(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentGetTokenHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AgentGetTokenQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgentGetTokenHook>>>>
export type AgentGetTokenQueryError = unknown

export const useAgentGetToken = <TData = Awaited<ReturnType<ReturnType<typeof useAgentGetTokenHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentGetTokenHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAgentGetTokenQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAgentAuthenticateAgentHook = () => {
        const agentAuthenticateAgent = useCustomInstance<DomainModelBenchmarkAgent>();

        return (
    domainModelBenchmarkAgentBody: DomainModelBenchmarkAgentBody,
 ) => {
        return agentAuthenticateAgent(
          {url: `/api/Agent/AuthenticateAgent`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkAgentBody
    },
          );
        }
      }
    


export const useAgentAuthenticateAgentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentAuthenticateAgentHook>>>, TError,{data: DomainModelBenchmarkAgentBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentAuthenticateAgentHook>>>, TError,{data: DomainModelBenchmarkAgentBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const agentAuthenticateAgent =  useAgentAuthenticateAgentHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAgentAuthenticateAgentHook>>>, {data: DomainModelBenchmarkAgentBody}> = (props) => {
          const {data} = props ?? {};

          return  agentAuthenticateAgent(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AgentAuthenticateAgentMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgentAuthenticateAgentHook>>>>
    export type AgentAuthenticateAgentMutationBody = DomainModelBenchmarkAgentBody
    export type AgentAuthenticateAgentMutationError = unknown

    export const useAgentAuthenticateAgent = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentAuthenticateAgentHook>>>, TError,{data: DomainModelBenchmarkAgentBody}, TContext>, }
) => {

      const mutationOptions = useAgentAuthenticateAgentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAgentGetAllAgentHook = () => {
        const agentGetAllAgent = useCustomInstance<DomainModelBenchmarkAgent[]>();

        return (
    
 signal?: AbortSignal
) => {
        return agentGetAllAgent(
          {url: `/api/Agent/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAgentGetAllAgentQueryKey = () => {
    return [`/api/Agent/getAll`] as const;
    }

    
export const useAgentGetAllAgentQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAgentGetAllAgentHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentGetAllAgentHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAgentGetAllAgentQueryKey();

  const agentGetAllAgent =  useAgentGetAllAgentHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAgentGetAllAgentHook>>>> = ({ signal }) => agentGetAllAgent(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentGetAllAgentHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AgentGetAllAgentQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgentGetAllAgentHook>>>>
export type AgentGetAllAgentQueryError = unknown

export const useAgentGetAllAgent = <TData = Awaited<ReturnType<ReturnType<typeof useAgentGetAllAgentHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentGetAllAgentHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAgentGetAllAgentQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAgentGetHook = () => {
        const agentGet = useCustomInstance<DomainModelBenchmarkAgent>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return agentGet(
          {url: `/api/Agent/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAgentGetQueryKey = (id: number,) => {
    return [`/api/Agent/${id}`] as const;
    }

    
export const useAgentGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAgentGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAgentGetQueryKey(id);

  const agentGet =  useAgentGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAgentGetHook>>>> = ({ signal }) => agentGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AgentGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgentGetHook>>>>
export type AgentGetQueryError = unknown

export const useAgentGet = <TData = Awaited<ReturnType<ReturnType<typeof useAgentGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAgentGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAgentAgentGetHook = () => {
        const agentAgentGet = useCustomInstance<DomainModelBenchmarkAgent>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return agentAgentGet(
          {url: `/api/Agent/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAgentAgentGetQueryKey = (id: number,) => {
    return [`/api/Agent/get/${id}`] as const;
    }

    
export const useAgentAgentGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAgentAgentGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentAgentGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAgentAgentGetQueryKey(id);

  const agentAgentGet =  useAgentAgentGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAgentAgentGetHook>>>> = ({ signal }) => agentAgentGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentAgentGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AgentAgentGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgentAgentGetHook>>>>
export type AgentAgentGetQueryError = unknown

export const useAgentAgentGet = <TData = Awaited<ReturnType<ReturnType<typeof useAgentAgentGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentAgentGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAgentAgentGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAgentGetAllAgentByStatusHook = () => {
        const agentGetAllAgentByStatus = useCustomInstance<DomainModelBenchmarkAgent[]>();

        return (
    statusId: number,
 signal?: AbortSignal
) => {
        return agentGetAllAgentByStatus(
          {url: `/api/statuses/${statusId}/Agent`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAgentGetAllAgentByStatusQueryKey = (statusId: number,) => {
    return [`/api/statuses/${statusId}/Agent`] as const;
    }

    
export const useAgentGetAllAgentByStatusQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAgentGetAllAgentByStatusHook>>>, TError = unknown>(statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentGetAllAgentByStatusHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAgentGetAllAgentByStatusQueryKey(statusId);

  const agentGetAllAgentByStatus =  useAgentGetAllAgentByStatusHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAgentGetAllAgentByStatusHook>>>> = ({ signal }) => agentGetAllAgentByStatus(statusId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(statusId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentGetAllAgentByStatusHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AgentGetAllAgentByStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgentGetAllAgentByStatusHook>>>>
export type AgentGetAllAgentByStatusQueryError = unknown

export const useAgentGetAllAgentByStatus = <TData = Awaited<ReturnType<ReturnType<typeof useAgentGetAllAgentByStatusHook>>>, TError = unknown>(
 statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentGetAllAgentByStatusHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAgentGetAllAgentByStatusQueryOptions(statusId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAgentGetAgentByCustomerIdHook = () => {
        const agentGetAgentByCustomerId = useCustomInstance<DomainModelBenchmarkAgent[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return agentGetAgentByCustomerId(
          {url: `/api/customers/${customerId}/Agent`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAgentGetAgentByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/Agent`] as const;
    }

    
export const useAgentGetAgentByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAgentGetAgentByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentGetAgentByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAgentGetAgentByCustomerIdQueryKey(customerId);

  const agentGetAgentByCustomerId =  useAgentGetAgentByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAgentGetAgentByCustomerIdHook>>>> = ({ signal }) => agentGetAgentByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentGetAgentByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AgentGetAgentByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgentGetAgentByCustomerIdHook>>>>
export type AgentGetAgentByCustomerIdQueryError = unknown

export const useAgentGetAgentByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof useAgentGetAgentByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentGetAgentByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAgentGetAgentByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAgentUpdateAgentAvatarHook = () => {
        const agentUpdateAgentAvatar = useCustomInstance<string>();

        return (
    
 ) => {
        return agentUpdateAgentAvatar(
          {url: `/api/Agent/UpdateAgentAvatar`, method: 'POST'
    },
          );
        }
      }
    


export const useAgentUpdateAgentAvatarMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentUpdateAgentAvatarHook>>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentUpdateAgentAvatarHook>>>, TError,void, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const agentUpdateAgentAvatar =  useAgentUpdateAgentAvatarHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAgentUpdateAgentAvatarHook>>>, void> = () => {
          

          return  agentUpdateAgentAvatar()
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AgentUpdateAgentAvatarMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgentUpdateAgentAvatarHook>>>>
    
    export type AgentUpdateAgentAvatarMutationError = unknown

    export const useAgentUpdateAgentAvatar = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentUpdateAgentAvatarHook>>>, TError,void, TContext>, }
) => {

      const mutationOptions = useAgentUpdateAgentAvatarMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAgentPutAgentProfileHook = () => {
        const agentPutAgentProfile = useCustomInstance<DomainModelBenchmarkAgent>();

        return (
    domainModelBenchmarkAgentBody: DomainModelBenchmarkAgentBody,
 ) => {
        return agentPutAgentProfile(
          {url: `/api/Agent/UpdateAgentProfile`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkAgentBody
    },
          );
        }
      }
    


export const useAgentPutAgentProfileMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentPutAgentProfileHook>>>, TError,{data: DomainModelBenchmarkAgentBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentPutAgentProfileHook>>>, TError,{data: DomainModelBenchmarkAgentBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const agentPutAgentProfile =  useAgentPutAgentProfileHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAgentPutAgentProfileHook>>>, {data: DomainModelBenchmarkAgentBody}> = (props) => {
          const {data} = props ?? {};

          return  agentPutAgentProfile(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AgentPutAgentProfileMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgentPutAgentProfileHook>>>>
    export type AgentPutAgentProfileMutationBody = DomainModelBenchmarkAgentBody
    export type AgentPutAgentProfileMutationError = unknown

    export const useAgentPutAgentProfile = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentPutAgentProfileHook>>>, TError,{data: DomainModelBenchmarkAgentBody}, TContext>, }
) => {

      const mutationOptions = useAgentPutAgentProfileMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAgentChangePasswordHook = () => {
        const agentChangePassword = useCustomInstance<string>();

        return (
    domainModelChangePasswordBody: DomainModelChangePasswordBody,
 ) => {
        return agentChangePassword(
          {url: `/api/Agent/ChangePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelChangePasswordBody
    },
          );
        }
      }
    


export const useAgentChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentChangePasswordHook>>>, TError,{data: DomainModelChangePasswordBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentChangePasswordHook>>>, TError,{data: DomainModelChangePasswordBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const agentChangePassword =  useAgentChangePasswordHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAgentChangePasswordHook>>>, {data: DomainModelChangePasswordBody}> = (props) => {
          const {data} = props ?? {};

          return  agentChangePassword(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AgentChangePasswordMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgentChangePasswordHook>>>>
    export type AgentChangePasswordMutationBody = DomainModelChangePasswordBody
    export type AgentChangePasswordMutationError = unknown

    export const useAgentChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentChangePasswordHook>>>, TError,{data: DomainModelChangePasswordBody}, TContext>, }
) => {

      const mutationOptions = useAgentChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAgentPostAgentHook = () => {
        const agentPostAgent = useCustomInstance<DomainModelBenchmarkAgent>();

        return (
    domainModelBenchmarkAgentBody: DomainModelBenchmarkAgentBody,
 ) => {
        return agentPostAgent(
          {url: `/api/Agent/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkAgentBody
    },
          );
        }
      }
    


export const useAgentPostAgentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentPostAgentHook>>>, TError,{data: DomainModelBenchmarkAgentBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentPostAgentHook>>>, TError,{data: DomainModelBenchmarkAgentBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const agentPostAgent =  useAgentPostAgentHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAgentPostAgentHook>>>, {data: DomainModelBenchmarkAgentBody}> = (props) => {
          const {data} = props ?? {};

          return  agentPostAgent(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AgentPostAgentMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgentPostAgentHook>>>>
    export type AgentPostAgentMutationBody = DomainModelBenchmarkAgentBody
    export type AgentPostAgentMutationError = unknown

    export const useAgentPostAgent = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentPostAgentHook>>>, TError,{data: DomainModelBenchmarkAgentBody}, TContext>, }
) => {

      const mutationOptions = useAgentPostAgentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAgentRateAgentHook = () => {
        const agentRateAgent = useCustomInstance<DomainModelBenchmarkAgent>();

        return (
    domainModelBenchmarkAgentBody: DomainModelBenchmarkAgentBody,
 ) => {
        return agentRateAgent(
          {url: `/api/Agent/rate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkAgentBody
    },
          );
        }
      }
    


export const useAgentRateAgentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentRateAgentHook>>>, TError,{data: DomainModelBenchmarkAgentBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentRateAgentHook>>>, TError,{data: DomainModelBenchmarkAgentBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const agentRateAgent =  useAgentRateAgentHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAgentRateAgentHook>>>, {data: DomainModelBenchmarkAgentBody}> = (props) => {
          const {data} = props ?? {};

          return  agentRateAgent(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AgentRateAgentMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgentRateAgentHook>>>>
    export type AgentRateAgentMutationBody = DomainModelBenchmarkAgentBody
    export type AgentRateAgentMutationError = unknown

    export const useAgentRateAgent = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentRateAgentHook>>>, TError,{data: DomainModelBenchmarkAgentBody}, TContext>, }
) => {

      const mutationOptions = useAgentRateAgentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAgentPutAgentHook = () => {
        const agentPutAgent = useCustomInstance<DomainModelBenchmarkAgent>();

        return (
    domainModelBenchmarkAgentBody: DomainModelBenchmarkAgentBody,
 ) => {
        return agentPutAgent(
          {url: `/api/Agent/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkAgentBody
    },
          );
        }
      }
    


export const useAgentPutAgentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentPutAgentHook>>>, TError,{data: DomainModelBenchmarkAgentBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentPutAgentHook>>>, TError,{data: DomainModelBenchmarkAgentBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const agentPutAgent =  useAgentPutAgentHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAgentPutAgentHook>>>, {data: DomainModelBenchmarkAgentBody}> = (props) => {
          const {data} = props ?? {};

          return  agentPutAgent(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AgentPutAgentMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgentPutAgentHook>>>>
    export type AgentPutAgentMutationBody = DomainModelBenchmarkAgentBody
    export type AgentPutAgentMutationError = unknown

    export const useAgentPutAgent = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentPutAgentHook>>>, TError,{data: DomainModelBenchmarkAgentBody}, TContext>, }
) => {

      const mutationOptions = useAgentPutAgentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAgentDeleteAgentHook = () => {
        const agentDeleteAgent = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return agentDeleteAgent(
          {url: `/api/Agent/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAgentDeleteAgentQueryKey = (id: number,) => {
    return [`/api/Agent/delete/${id}`] as const;
    }

    
export const useAgentDeleteAgentQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAgentDeleteAgentHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentDeleteAgentHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAgentDeleteAgentQueryKey(id);

  const agentDeleteAgent =  useAgentDeleteAgentHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAgentDeleteAgentHook>>>> = ({ signal }) => agentDeleteAgent(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentDeleteAgentHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AgentDeleteAgentQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgentDeleteAgentHook>>>>
export type AgentDeleteAgentQueryError = unknown

export const useAgentDeleteAgent = <TData = Awaited<ReturnType<ReturnType<typeof useAgentDeleteAgentHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentDeleteAgentHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAgentDeleteAgentQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAgentUpdateAgentHook = () => {
        const agentUpdateAgent = useCustomInstance<DomainModelBenchmarkAgent[]>();

        return (
    domainModelBenchmarkAgent: DomainModelBenchmarkAgent[],
 ) => {
        return agentUpdateAgent(
          {url: `/api/Agent/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkAgent
    },
          );
        }
      }
    


export const useAgentUpdateAgentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentUpdateAgentHook>>>, TError,{data: DomainModelBenchmarkAgent[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentUpdateAgentHook>>>, TError,{data: DomainModelBenchmarkAgent[]}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const agentUpdateAgent =  useAgentUpdateAgentHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAgentUpdateAgentHook>>>, {data: DomainModelBenchmarkAgent[]}> = (props) => {
          const {data} = props ?? {};

          return  agentUpdateAgent(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AgentUpdateAgentMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgentUpdateAgentHook>>>>
    export type AgentUpdateAgentMutationBody = DomainModelBenchmarkAgent[]
    export type AgentUpdateAgentMutationError = unknown

    export const useAgentUpdateAgent = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgentUpdateAgentHook>>>, TError,{data: DomainModelBenchmarkAgent[]}, TContext>, }
) => {

      const mutationOptions = useAgentUpdateAgentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAgentGetAllAgentByFiltersHook = () => {
        const agentGetAllAgentByFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkAgent>();

        return (
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return agentGetAllAgentByFilters(
          {url: `/api/Agent/GetAllAgentDetails/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAgentGetAllAgentByFiltersQueryKey = (startIndex: number,
    endIndex: number,) => {
    return [`/api/Agent/GetAllAgentDetails/${startIndex}/${endIndex}`] as const;
    }

    
export const useAgentGetAllAgentByFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAgentGetAllAgentByFiltersHook>>>, TError = unknown>(startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentGetAllAgentByFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAgentGetAllAgentByFiltersQueryKey(startIndex,endIndex);

  const agentGetAllAgentByFilters =  useAgentGetAllAgentByFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAgentGetAllAgentByFiltersHook>>>> = ({ signal }) => agentGetAllAgentByFilters(startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentGetAllAgentByFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AgentGetAllAgentByFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgentGetAllAgentByFiltersHook>>>>
export type AgentGetAllAgentByFiltersQueryError = unknown

export const useAgentGetAllAgentByFilters = <TData = Awaited<ReturnType<ReturnType<typeof useAgentGetAllAgentByFiltersHook>>>, TError = unknown>(
 startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAgentGetAllAgentByFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAgentGetAllAgentByFiltersQueryOptions(startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSActivitiesGetAllAMSActivitiesHook = () => {
        const aMSActivitiesGetAllAMSActivities = useCustomInstance<DomainModelModelAMSActivities[]>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSActivitiesGetAllAMSActivities(
          {url: `/api/AMSActivities/GetAllAMSActivities`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSActivitiesGetAllAMSActivitiesQueryKey = () => {
    return [`/api/AMSActivities/GetAllAMSActivities`] as const;
    }

    
export const useAMSActivitiesGetAllAMSActivitiesQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetAllAMSActivitiesHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetAllAMSActivitiesHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSActivitiesGetAllAMSActivitiesQueryKey();

  const aMSActivitiesGetAllAMSActivities =  useAMSActivitiesGetAllAMSActivitiesHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetAllAMSActivitiesHook>>>> = ({ signal }) => aMSActivitiesGetAllAMSActivities(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetAllAMSActivitiesHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSActivitiesGetAllAMSActivitiesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetAllAMSActivitiesHook>>>>
export type AMSActivitiesGetAllAMSActivitiesQueryError = unknown

export const useAMSActivitiesGetAllAMSActivities = <TData = Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetAllAMSActivitiesHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetAllAMSActivitiesHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSActivitiesGetAllAMSActivitiesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSActivitiesGetActivitiesByCustomerIDHook = () => {
        const aMSActivitiesGetActivitiesByCustomerID = useCustomInstance<DomainModelModelAMSActivities>();

        return (
    activityID: string,
 signal?: AbortSignal
) => {
        return aMSActivitiesGetActivitiesByCustomerID(
          {url: `/api/AMSActivities/GetActivitiesByActivityID/${activityID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSActivitiesGetActivitiesByCustomerIDQueryKey = (activityID: string,) => {
    return [`/api/AMSActivities/GetActivitiesByActivityID/${activityID}`] as const;
    }

    
export const useAMSActivitiesGetActivitiesByCustomerIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetActivitiesByCustomerIDHook>>>, TError = unknown>(activityID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetActivitiesByCustomerIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSActivitiesGetActivitiesByCustomerIDQueryKey(activityID);

  const aMSActivitiesGetActivitiesByCustomerID =  useAMSActivitiesGetActivitiesByCustomerIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetActivitiesByCustomerIDHook>>>> = ({ signal }) => aMSActivitiesGetActivitiesByCustomerID(activityID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(activityID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetActivitiesByCustomerIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSActivitiesGetActivitiesByCustomerIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetActivitiesByCustomerIDHook>>>>
export type AMSActivitiesGetActivitiesByCustomerIDQueryError = unknown

export const useAMSActivitiesGetActivitiesByCustomerID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetActivitiesByCustomerIDHook>>>, TError = unknown>(
 activityID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetActivitiesByCustomerIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSActivitiesGetActivitiesByCustomerIDQueryOptions(activityID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSActivitiesGetAttachmentsAMSActivitiesHook = () => {
        const aMSActivitiesGetAttachmentsAMSActivities = useCustomInstance<DomainModelAMSModelAMSAttachments[]>();

        return (
    activityID: string,
 signal?: AbortSignal
) => {
        return aMSActivitiesGetAttachmentsAMSActivities(
          {url: `/api/AMSActivities/Attachments/${activityID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSActivitiesGetAttachmentsAMSActivitiesQueryKey = (activityID: string,) => {
    return [`/api/AMSActivities/Attachments/${activityID}`] as const;
    }

    
export const useAMSActivitiesGetAttachmentsAMSActivitiesQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetAttachmentsAMSActivitiesHook>>>, TError = unknown>(activityID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetAttachmentsAMSActivitiesHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSActivitiesGetAttachmentsAMSActivitiesQueryKey(activityID);

  const aMSActivitiesGetAttachmentsAMSActivities =  useAMSActivitiesGetAttachmentsAMSActivitiesHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetAttachmentsAMSActivitiesHook>>>> = ({ signal }) => aMSActivitiesGetAttachmentsAMSActivities(activityID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(activityID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetAttachmentsAMSActivitiesHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSActivitiesGetAttachmentsAMSActivitiesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetAttachmentsAMSActivitiesHook>>>>
export type AMSActivitiesGetAttachmentsAMSActivitiesQueryError = unknown

export const useAMSActivitiesGetAttachmentsAMSActivities = <TData = Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetAttachmentsAMSActivitiesHook>>>, TError = unknown>(
 activityID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetAttachmentsAMSActivitiesHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSActivitiesGetAttachmentsAMSActivitiesQueryOptions(activityID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSActivitiesGetCustomActionsDropdownsHook = () => {
        const aMSActivitiesGetCustomActionsDropdowns = useCustomInstance<DomainModelAMSModelCustomActionsGetDropdowns>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSActivitiesGetCustomActionsDropdowns(
          {url: `/api/AMSActivities/CustomActionsGetDropdowns`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSActivitiesGetCustomActionsDropdownsQueryKey = () => {
    return [`/api/AMSActivities/CustomActionsGetDropdowns`] as const;
    }

    
export const useAMSActivitiesGetCustomActionsDropdownsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetCustomActionsDropdownsHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetCustomActionsDropdownsHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSActivitiesGetCustomActionsDropdownsQueryKey();

  const aMSActivitiesGetCustomActionsDropdowns =  useAMSActivitiesGetCustomActionsDropdownsHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetCustomActionsDropdownsHook>>>> = ({ signal }) => aMSActivitiesGetCustomActionsDropdowns(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetCustomActionsDropdownsHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSActivitiesGetCustomActionsDropdownsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetCustomActionsDropdownsHook>>>>
export type AMSActivitiesGetCustomActionsDropdownsQueryError = unknown

export const useAMSActivitiesGetCustomActionsDropdowns = <TData = Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetCustomActionsDropdownsHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetCustomActionsDropdownsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSActivitiesGetCustomActionsDropdownsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSActivitiesGetGetGroupTypeEntitysHook = () => {
        const aMSActivitiesGetGetGroupTypeEntitys = useCustomInstance<DomainModelAMSModelGetGroupTypeEntity>();

        return (
    params?: AMSActivitiesGetGetGroupTypeEntitysParams,
 signal?: AbortSignal
) => {
        return aMSActivitiesGetGetGroupTypeEntitys(
          {url: `/api/AMSActivities/GetGroupTypeEntity`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getAMSActivitiesGetGetGroupTypeEntitysQueryKey = (params?: AMSActivitiesGetGetGroupTypeEntitysParams,) => {
    return [`/api/AMSActivities/GetGroupTypeEntity`, ...(params ? [params]: [])] as const;
    }

    
export const useAMSActivitiesGetGetGroupTypeEntitysQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetGetGroupTypeEntitysHook>>>, TError = unknown>(params?: AMSActivitiesGetGetGroupTypeEntitysParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetGetGroupTypeEntitysHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSActivitiesGetGetGroupTypeEntitysQueryKey(params);

  const aMSActivitiesGetGetGroupTypeEntitys =  useAMSActivitiesGetGetGroupTypeEntitysHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetGetGroupTypeEntitysHook>>>> = ({ signal }) => aMSActivitiesGetGetGroupTypeEntitys(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetGetGroupTypeEntitysHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSActivitiesGetGetGroupTypeEntitysQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetGetGroupTypeEntitysHook>>>>
export type AMSActivitiesGetGetGroupTypeEntitysQueryError = unknown

export const useAMSActivitiesGetGetGroupTypeEntitys = <TData = Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetGetGroupTypeEntitysHook>>>, TError = unknown>(
 params?: AMSActivitiesGetGetGroupTypeEntitysParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetGetGroupTypeEntitysHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSActivitiesGetGetGroupTypeEntitysQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSActivitiesGetAllActivitiesActionHook = () => {
        const aMSActivitiesGetAllActivitiesAction = useCustomInstance<DomainModelAMSModelAMSActivityAction[]>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSActivitiesGetAllActivitiesAction(
          {url: `/api/AMSActivities/AMSActivityAction`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSActivitiesGetAllActivitiesActionQueryKey = () => {
    return [`/api/AMSActivities/AMSActivityAction`] as const;
    }

    
export const useAMSActivitiesGetAllActivitiesActionQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetAllActivitiesActionHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetAllActivitiesActionHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSActivitiesGetAllActivitiesActionQueryKey();

  const aMSActivitiesGetAllActivitiesAction =  useAMSActivitiesGetAllActivitiesActionHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetAllActivitiesActionHook>>>> = ({ signal }) => aMSActivitiesGetAllActivitiesAction(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetAllActivitiesActionHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSActivitiesGetAllActivitiesActionQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetAllActivitiesActionHook>>>>
export type AMSActivitiesGetAllActivitiesActionQueryError = unknown

export const useAMSActivitiesGetAllActivitiesAction = <TData = Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetAllActivitiesActionHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetAllActivitiesActionHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSActivitiesGetAllActivitiesActionQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSActivitiesGetCommenActivityByIDHook = () => {
        const aMSActivitiesGetCommenActivityByID = useCustomInstance<DomainModelAMSModelAMSCommenActivity>();

        return (
    activityID: string,
 signal?: AbortSignal
) => {
        return aMSActivitiesGetCommenActivityByID(
          {url: `/api/AMSActivities/CommenActivity/${activityID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSActivitiesGetCommenActivityByIDQueryKey = (activityID: string,) => {
    return [`/api/AMSActivities/CommenActivity/${activityID}`] as const;
    }

    
export const useAMSActivitiesGetCommenActivityByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetCommenActivityByIDHook>>>, TError = unknown>(activityID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetCommenActivityByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSActivitiesGetCommenActivityByIDQueryKey(activityID);

  const aMSActivitiesGetCommenActivityByID =  useAMSActivitiesGetCommenActivityByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetCommenActivityByIDHook>>>> = ({ signal }) => aMSActivitiesGetCommenActivityByID(activityID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(activityID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetCommenActivityByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSActivitiesGetCommenActivityByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetCommenActivityByIDHook>>>>
export type AMSActivitiesGetCommenActivityByIDQueryError = unknown

export const useAMSActivitiesGetCommenActivityByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetCommenActivityByIDHook>>>, TError = unknown>(
 activityID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivitiesGetCommenActivityByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSActivitiesGetCommenActivityByIDQueryOptions(activityID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSActivityReferenceGroupsGetAllActivityReferenceGroupHook = () => {
        const aMSActivityReferenceGroupsGetAllActivityReferenceGroup = useCustomInstance<DomainModelAMSModelActivityReferenceGroups[]>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSActivityReferenceGroupsGetAllActivityReferenceGroup(
          {url: `/api/AMSActivityReferenceGroups/GetAllActivityReferenceGroups`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSActivityReferenceGroupsGetAllActivityReferenceGroupQueryKey = () => {
    return [`/api/AMSActivityReferenceGroups/GetAllActivityReferenceGroups`] as const;
    }

    
export const useAMSActivityReferenceGroupsGetAllActivityReferenceGroupQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsGetAllActivityReferenceGroupHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsGetAllActivityReferenceGroupHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSActivityReferenceGroupsGetAllActivityReferenceGroupQueryKey();

  const aMSActivityReferenceGroupsGetAllActivityReferenceGroup =  useAMSActivityReferenceGroupsGetAllActivityReferenceGroupHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsGetAllActivityReferenceGroupHook>>>> = ({ signal }) => aMSActivityReferenceGroupsGetAllActivityReferenceGroup(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsGetAllActivityReferenceGroupHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSActivityReferenceGroupsGetAllActivityReferenceGroupQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsGetAllActivityReferenceGroupHook>>>>
export type AMSActivityReferenceGroupsGetAllActivityReferenceGroupQueryError = unknown

export const useAMSActivityReferenceGroupsGetAllActivityReferenceGroup = <TData = Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsGetAllActivityReferenceGroupHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsGetAllActivityReferenceGroupHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSActivityReferenceGroupsGetAllActivityReferenceGroupQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSActivityReferenceGroupsGetActivityReferenceGroupByIDHook = () => {
        const aMSActivityReferenceGroupsGetActivityReferenceGroupByID = useCustomInstance<DomainModelAMSModelActivityReferenceGroups>();

        return (
    referenceID: string,
 signal?: AbortSignal
) => {
        return aMSActivityReferenceGroupsGetActivityReferenceGroupByID(
          {url: `/api/AMSActivityReferenceGroups/${referenceID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSActivityReferenceGroupsGetActivityReferenceGroupByIDQueryKey = (referenceID: string,) => {
    return [`/api/AMSActivityReferenceGroups/${referenceID}`] as const;
    }

    
export const useAMSActivityReferenceGroupsGetActivityReferenceGroupByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsGetActivityReferenceGroupByIDHook>>>, TError = unknown>(referenceID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsGetActivityReferenceGroupByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSActivityReferenceGroupsGetActivityReferenceGroupByIDQueryKey(referenceID);

  const aMSActivityReferenceGroupsGetActivityReferenceGroupByID =  useAMSActivityReferenceGroupsGetActivityReferenceGroupByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsGetActivityReferenceGroupByIDHook>>>> = ({ signal }) => aMSActivityReferenceGroupsGetActivityReferenceGroupByID(referenceID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(referenceID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsGetActivityReferenceGroupByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSActivityReferenceGroupsGetActivityReferenceGroupByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsGetActivityReferenceGroupByIDHook>>>>
export type AMSActivityReferenceGroupsGetActivityReferenceGroupByIDQueryError = unknown

export const useAMSActivityReferenceGroupsGetActivityReferenceGroupByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsGetActivityReferenceGroupByIDHook>>>, TError = unknown>(
 referenceID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsGetActivityReferenceGroupByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSActivityReferenceGroupsGetActivityReferenceGroupByIDQueryOptions(referenceID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSActivityReferenceGroupsDeleteActivityReferenceGroupByIDHook = () => {
        const aMSActivityReferenceGroupsDeleteActivityReferenceGroupByID = useCustomInstance<boolean>();

        return (
    referenceID: string,
 signal?: AbortSignal
) => {
        return aMSActivityReferenceGroupsDeleteActivityReferenceGroupByID(
          {url: `/api/AMSActivityReferenceGroups/Delete/${referenceID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSActivityReferenceGroupsDeleteActivityReferenceGroupByIDQueryKey = (referenceID: string,) => {
    return [`/api/AMSActivityReferenceGroups/Delete/${referenceID}`] as const;
    }

    
export const useAMSActivityReferenceGroupsDeleteActivityReferenceGroupByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsDeleteActivityReferenceGroupByIDHook>>>, TError = unknown>(referenceID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsDeleteActivityReferenceGroupByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSActivityReferenceGroupsDeleteActivityReferenceGroupByIDQueryKey(referenceID);

  const aMSActivityReferenceGroupsDeleteActivityReferenceGroupByID =  useAMSActivityReferenceGroupsDeleteActivityReferenceGroupByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsDeleteActivityReferenceGroupByIDHook>>>> = ({ signal }) => aMSActivityReferenceGroupsDeleteActivityReferenceGroupByID(referenceID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(referenceID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsDeleteActivityReferenceGroupByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSActivityReferenceGroupsDeleteActivityReferenceGroupByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsDeleteActivityReferenceGroupByIDHook>>>>
export type AMSActivityReferenceGroupsDeleteActivityReferenceGroupByIDQueryError = unknown

export const useAMSActivityReferenceGroupsDeleteActivityReferenceGroupByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsDeleteActivityReferenceGroupByIDHook>>>, TError = unknown>(
 referenceID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsDeleteActivityReferenceGroupByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSActivityReferenceGroupsDeleteActivityReferenceGroupByIDQueryOptions(referenceID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSActivityReferenceGroupsAddActivityGroupHook = () => {
        const aMSActivityReferenceGroupsAddActivityGroup = useCustomInstance<DomainModelAMSModelActivityReferenceGroups>();

        return (
    params?: AMSActivityReferenceGroupsAddActivityGroupParams,
 signal?: AbortSignal
) => {
        return aMSActivityReferenceGroupsAddActivityGroup(
          {url: `/api/AMSActivityReferenceGroups/AddActivity`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getAMSActivityReferenceGroupsAddActivityGroupQueryKey = (params?: AMSActivityReferenceGroupsAddActivityGroupParams,) => {
    return [`/api/AMSActivityReferenceGroups/AddActivity`, ...(params ? [params]: [])] as const;
    }

    
export const useAMSActivityReferenceGroupsAddActivityGroupQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsAddActivityGroupHook>>>, TError = unknown>(params?: AMSActivityReferenceGroupsAddActivityGroupParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsAddActivityGroupHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSActivityReferenceGroupsAddActivityGroupQueryKey(params);

  const aMSActivityReferenceGroupsAddActivityGroup =  useAMSActivityReferenceGroupsAddActivityGroupHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsAddActivityGroupHook>>>> = ({ signal }) => aMSActivityReferenceGroupsAddActivityGroup(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsAddActivityGroupHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSActivityReferenceGroupsAddActivityGroupQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsAddActivityGroupHook>>>>
export type AMSActivityReferenceGroupsAddActivityGroupQueryError = unknown

export const useAMSActivityReferenceGroupsAddActivityGroup = <TData = Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsAddActivityGroupHook>>>, TError = unknown>(
 params?: AMSActivityReferenceGroupsAddActivityGroupParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSActivityReferenceGroupsAddActivityGroupHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSActivityReferenceGroupsAddActivityGroupQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSAgencyAddressGetAllAgencyAddressHook = () => {
        const aMSAgencyAddressGetAllAgencyAddress = useCustomInstance<DomainModelAMSModelAMSAgencyAddress[]>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSAgencyAddressGetAllAgencyAddress(
          {url: `/api/AMSAgencyAddress/GetAllAgencyAddress`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSAgencyAddressGetAllAgencyAddressQueryKey = () => {
    return [`/api/AMSAgencyAddress/GetAllAgencyAddress`] as const;
    }

    
export const useAMSAgencyAddressGetAllAgencyAddressQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetAllAgencyAddressHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetAllAgencyAddressHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSAgencyAddressGetAllAgencyAddressQueryKey();

  const aMSAgencyAddressGetAllAgencyAddress =  useAMSAgencyAddressGetAllAgencyAddressHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetAllAgencyAddressHook>>>> = ({ signal }) => aMSAgencyAddressGetAllAgencyAddress(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetAllAgencyAddressHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSAgencyAddressGetAllAgencyAddressQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetAllAgencyAddressHook>>>>
export type AMSAgencyAddressGetAllAgencyAddressQueryError = unknown

export const useAMSAgencyAddressGetAllAgencyAddress = <TData = Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetAllAgencyAddressHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetAllAgencyAddressHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSAgencyAddressGetAllAgencyAddressQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSAgencyAddressGetAllAgencyBussinessUnitsHook = () => {
        const aMSAgencyAddressGetAllAgencyBussinessUnits = useCustomInstance<DomainModelAMSModelAMSAgencyBusinessUnits[]>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSAgencyAddressGetAllAgencyBussinessUnits(
          {url: `/api/AMSAgencyAddress/GetAllAgencybussinessUnits`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSAgencyAddressGetAllAgencyBussinessUnitsQueryKey = () => {
    return [`/api/AMSAgencyAddress/GetAllAgencybussinessUnits`] as const;
    }

    
export const useAMSAgencyAddressGetAllAgencyBussinessUnitsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetAllAgencyBussinessUnitsHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetAllAgencyBussinessUnitsHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSAgencyAddressGetAllAgencyBussinessUnitsQueryKey();

  const aMSAgencyAddressGetAllAgencyBussinessUnits =  useAMSAgencyAddressGetAllAgencyBussinessUnitsHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetAllAgencyBussinessUnitsHook>>>> = ({ signal }) => aMSAgencyAddressGetAllAgencyBussinessUnits(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetAllAgencyBussinessUnitsHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSAgencyAddressGetAllAgencyBussinessUnitsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetAllAgencyBussinessUnitsHook>>>>
export type AMSAgencyAddressGetAllAgencyBussinessUnitsQueryError = unknown

export const useAMSAgencyAddressGetAllAgencyBussinessUnits = <TData = Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetAllAgencyBussinessUnitsHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetAllAgencyBussinessUnitsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSAgencyAddressGetAllAgencyBussinessUnitsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSAgencyAddressGetActivitiesByCustomerIDHook = () => {
        const aMSAgencyAddressGetActivitiesByCustomerID = useCustomInstance<DomainModelAMSModelAMSEntitySearchModel[]>();

        return (
    phoneNo: string,
 signal?: AbortSignal
) => {
        return aMSAgencyAddressGetActivitiesByCustomerID(
          {url: `/api/AMSAgencyAddress/GetAgentByphone/${phoneNo}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSAgencyAddressGetActivitiesByCustomerIDQueryKey = (phoneNo: string,) => {
    return [`/api/AMSAgencyAddress/GetAgentByphone/${phoneNo}`] as const;
    }

    
export const useAMSAgencyAddressGetActivitiesByCustomerIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetActivitiesByCustomerIDHook>>>, TError = unknown>(phoneNo: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetActivitiesByCustomerIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSAgencyAddressGetActivitiesByCustomerIDQueryKey(phoneNo);

  const aMSAgencyAddressGetActivitiesByCustomerID =  useAMSAgencyAddressGetActivitiesByCustomerIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetActivitiesByCustomerIDHook>>>> = ({ signal }) => aMSAgencyAddressGetActivitiesByCustomerID(phoneNo, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(phoneNo), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetActivitiesByCustomerIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSAgencyAddressGetActivitiesByCustomerIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetActivitiesByCustomerIDHook>>>>
export type AMSAgencyAddressGetActivitiesByCustomerIDQueryError = unknown

export const useAMSAgencyAddressGetActivitiesByCustomerID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetActivitiesByCustomerIDHook>>>, TError = unknown>(
 phoneNo: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetActivitiesByCustomerIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSAgencyAddressGetActivitiesByCustomerIDQueryOptions(phoneNo,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSAgencyAddressGetAllBussinessUnitsHook = () => {
        const aMSAgencyAddressGetAllBussinessUnits = useCustomInstance<DomainModelAMSModelAMSBusinessUnits[]>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSAgencyAddressGetAllBussinessUnits(
          {url: `/api/AMSAgencyAddress/GetAllBussinessUnits`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSAgencyAddressGetAllBussinessUnitsQueryKey = () => {
    return [`/api/AMSAgencyAddress/GetAllBussinessUnits`] as const;
    }

    
export const useAMSAgencyAddressGetAllBussinessUnitsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetAllBussinessUnitsHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetAllBussinessUnitsHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSAgencyAddressGetAllBussinessUnitsQueryKey();

  const aMSAgencyAddressGetAllBussinessUnits =  useAMSAgencyAddressGetAllBussinessUnitsHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetAllBussinessUnitsHook>>>> = ({ signal }) => aMSAgencyAddressGetAllBussinessUnits(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetAllBussinessUnitsHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSAgencyAddressGetAllBussinessUnitsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetAllBussinessUnitsHook>>>>
export type AMSAgencyAddressGetAllBussinessUnitsQueryError = unknown

export const useAMSAgencyAddressGetAllBussinessUnits = <TData = Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetAllBussinessUnitsHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetAllBussinessUnitsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSAgencyAddressGetAllBussinessUnitsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSAgencyAddressGetBusinessUnitsByHaseCodesHook = () => {
        const aMSAgencyAddressGetBusinessUnitsByHaseCodes = useCustomInstance<DomainModelAMSModelAMSBusinessUnits>();

        return (
    generalLedgerBranchCodeHash: string,
    generalLedgerDepartmentCodeHash: string,
    generalLedgerDivisionCodeHash: string,
    generalLedgerGroupCodeHash: string,
 signal?: AbortSignal
) => {
        return aMSAgencyAddressGetBusinessUnitsByHaseCodes(
          {url: `/api/AMSAgencyAddress/${generalLedgerBranchCodeHash}/${generalLedgerDepartmentCodeHash}/${generalLedgerDivisionCodeHash}/${generalLedgerGroupCodeHash}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSAgencyAddressGetBusinessUnitsByHaseCodesQueryKey = (generalLedgerBranchCodeHash: string,
    generalLedgerDepartmentCodeHash: string,
    generalLedgerDivisionCodeHash: string,
    generalLedgerGroupCodeHash: string,) => {
    return [`/api/AMSAgencyAddress/${generalLedgerBranchCodeHash}/${generalLedgerDepartmentCodeHash}/${generalLedgerDivisionCodeHash}/${generalLedgerGroupCodeHash}`] as const;
    }

    
export const useAMSAgencyAddressGetBusinessUnitsByHaseCodesQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetBusinessUnitsByHaseCodesHook>>>, TError = unknown>(generalLedgerBranchCodeHash: string,
    generalLedgerDepartmentCodeHash: string,
    generalLedgerDivisionCodeHash: string,
    generalLedgerGroupCodeHash: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetBusinessUnitsByHaseCodesHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSAgencyAddressGetBusinessUnitsByHaseCodesQueryKey(generalLedgerBranchCodeHash,generalLedgerDepartmentCodeHash,generalLedgerDivisionCodeHash,generalLedgerGroupCodeHash);

  const aMSAgencyAddressGetBusinessUnitsByHaseCodes =  useAMSAgencyAddressGetBusinessUnitsByHaseCodesHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetBusinessUnitsByHaseCodesHook>>>> = ({ signal }) => aMSAgencyAddressGetBusinessUnitsByHaseCodes(generalLedgerBranchCodeHash,generalLedgerDepartmentCodeHash,generalLedgerDivisionCodeHash,generalLedgerGroupCodeHash, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(generalLedgerBranchCodeHash && generalLedgerDepartmentCodeHash && generalLedgerDivisionCodeHash && generalLedgerGroupCodeHash), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetBusinessUnitsByHaseCodesHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSAgencyAddressGetBusinessUnitsByHaseCodesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetBusinessUnitsByHaseCodesHook>>>>
export type AMSAgencyAddressGetBusinessUnitsByHaseCodesQueryError = unknown

export const useAMSAgencyAddressGetBusinessUnitsByHaseCodes = <TData = Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetBusinessUnitsByHaseCodesHook>>>, TError = unknown>(
 generalLedgerBranchCodeHash: string,
    generalLedgerDepartmentCodeHash: string,
    generalLedgerDivisionCodeHash: string,
    generalLedgerGroupCodeHash: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSAgencyAddressGetBusinessUnitsByHaseCodesHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSAgencyAddressGetBusinessUnitsByHaseCodesQueryOptions(generalLedgerBranchCodeHash,generalLedgerDepartmentCodeHash,generalLedgerDivisionCodeHash,generalLedgerGroupCodeHash,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSBrokerGetAllHook = () => {
        const aMSBrokerGetAll = useCustomInstance<DomainModelAMSModelAMSBroker[]>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSBrokerGetAll(
          {url: `/api/AMSBroker/GetAllBrokers`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSBrokerGetAllQueryKey = () => {
    return [`/api/AMSBroker/GetAllBrokers`] as const;
    }

    
export const useAMSBrokerGetAllQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSBrokerGetAllHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSBrokerGetAllHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSBrokerGetAllQueryKey();

  const aMSBrokerGetAll =  useAMSBrokerGetAllHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSBrokerGetAllHook>>>> = ({ signal }) => aMSBrokerGetAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSBrokerGetAllHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSBrokerGetAllQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSBrokerGetAllHook>>>>
export type AMSBrokerGetAllQueryError = unknown

export const useAMSBrokerGetAll = <TData = Awaited<ReturnType<ReturnType<typeof useAMSBrokerGetAllHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSBrokerGetAllHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSBrokerGetAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSBrokerGetBrokerByHasCodeHook = () => {
        const aMSBrokerGetBrokerByHasCode = useCustomInstance<DomainModelAMSModelAMSBroker>();

        return (
    hasCode: string,
 signal?: AbortSignal
) => {
        return aMSBrokerGetBrokerByHasCode(
          {url: `/api/AMSBroker/GetBrokerByHasCode/${hasCode}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSBrokerGetBrokerByHasCodeQueryKey = (hasCode: string,) => {
    return [`/api/AMSBroker/GetBrokerByHasCode/${hasCode}`] as const;
    }

    
export const useAMSBrokerGetBrokerByHasCodeQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSBrokerGetBrokerByHasCodeHook>>>, TError = unknown>(hasCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSBrokerGetBrokerByHasCodeHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSBrokerGetBrokerByHasCodeQueryKey(hasCode);

  const aMSBrokerGetBrokerByHasCode =  useAMSBrokerGetBrokerByHasCodeHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSBrokerGetBrokerByHasCodeHook>>>> = ({ signal }) => aMSBrokerGetBrokerByHasCode(hasCode, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(hasCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSBrokerGetBrokerByHasCodeHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSBrokerGetBrokerByHasCodeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSBrokerGetBrokerByHasCodeHook>>>>
export type AMSBrokerGetBrokerByHasCodeQueryError = unknown

export const useAMSBrokerGetBrokerByHasCode = <TData = Awaited<ReturnType<ReturnType<typeof useAMSBrokerGetBrokerByHasCodeHook>>>, TError = unknown>(
 hasCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSBrokerGetBrokerByHasCodeHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSBrokerGetBrokerByHasCodeQueryOptions(hasCode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSClaimsGetAllHook = () => {
        const aMSClaimsGetAll = useCustomInstance<DomainModelModelAMSClaims[]>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSClaimsGetAll(
          {url: `/api/AMSClaims/GetAllClaims`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSClaimsGetAllQueryKey = () => {
    return [`/api/AMSClaims/GetAllClaims`] as const;
    }

    
export const useAMSClaimsGetAllQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSClaimsGetAllHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSClaimsGetAllHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSClaimsGetAllQueryKey();

  const aMSClaimsGetAll =  useAMSClaimsGetAllHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSClaimsGetAllHook>>>> = ({ signal }) => aMSClaimsGetAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSClaimsGetAllHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSClaimsGetAllQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSClaimsGetAllHook>>>>
export type AMSClaimsGetAllQueryError = unknown

export const useAMSClaimsGetAll = <TData = Awaited<ReturnType<ReturnType<typeof useAMSClaimsGetAllHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSClaimsGetAllHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSClaimsGetAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSClaimsAddAMSClaimHook = () => {
        const aMSClaimsAddAMSClaim = useCustomInstance<DomainModelAMSModelAMSClaimMade>();

        return (
    params?: AMSClaimsAddAMSClaimParams,
 signal?: AbortSignal
) => {
        return aMSClaimsAddAMSClaim(
          {url: `/api/AMSClaims`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getAMSClaimsAddAMSClaimQueryKey = (params?: AMSClaimsAddAMSClaimParams,) => {
    return [`/api/AMSClaims`, ...(params ? [params]: [])] as const;
    }

    
export const useAMSClaimsAddAMSClaimQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSClaimsAddAMSClaimHook>>>, TError = unknown>(params?: AMSClaimsAddAMSClaimParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSClaimsAddAMSClaimHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSClaimsAddAMSClaimQueryKey(params);

  const aMSClaimsAddAMSClaim =  useAMSClaimsAddAMSClaimHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSClaimsAddAMSClaimHook>>>> = ({ signal }) => aMSClaimsAddAMSClaim(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSClaimsAddAMSClaimHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSClaimsAddAMSClaimQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSClaimsAddAMSClaimHook>>>>
export type AMSClaimsAddAMSClaimQueryError = unknown

export const useAMSClaimsAddAMSClaim = <TData = Awaited<ReturnType<ReturnType<typeof useAMSClaimsAddAMSClaimHook>>>, TError = unknown>(
 params?: AMSClaimsAddAMSClaimParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSClaimsAddAMSClaimHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSClaimsAddAMSClaimQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSClaimsGetClaimMadeByhasCodeHook = () => {
        const aMSClaimsGetClaimMadeByhasCode = useCustomInstance<DomainModelAMSModelAMSClaimMade>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
    sClaimsMadeId: string,
 signal?: AbortSignal
) => {
        return aMSClaimsGetClaimMadeByhasCode(
          {url: `/api/AMSClaims/GetClaimMadebyHasCode/${effectiveDate}/${lineOfBusinessId}/${policyId}/${sClaimsMadeId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSClaimsGetClaimMadeByhasCodeQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
    sClaimsMadeId: string,) => {
    return [`/api/AMSClaims/GetClaimMadebyHasCode/${effectiveDate}/${lineOfBusinessId}/${policyId}/${sClaimsMadeId}`] as const;
    }

    
export const useAMSClaimsGetClaimMadeByhasCodeQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSClaimsGetClaimMadeByhasCodeHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
    sClaimsMadeId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSClaimsGetClaimMadeByhasCodeHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSClaimsGetClaimMadeByhasCodeQueryKey(effectiveDate,lineOfBusinessId,policyId,sClaimsMadeId);

  const aMSClaimsGetClaimMadeByhasCode =  useAMSClaimsGetClaimMadeByhasCodeHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSClaimsGetClaimMadeByhasCodeHook>>>> = ({ signal }) => aMSClaimsGetClaimMadeByhasCode(effectiveDate,lineOfBusinessId,policyId,sClaimsMadeId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId && sClaimsMadeId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSClaimsGetClaimMadeByhasCodeHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSClaimsGetClaimMadeByhasCodeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSClaimsGetClaimMadeByhasCodeHook>>>>
export type AMSClaimsGetClaimMadeByhasCodeQueryError = unknown

export const useAMSClaimsGetClaimMadeByhasCode = <TData = Awaited<ReturnType<ReturnType<typeof useAMSClaimsGetClaimMadeByhasCodeHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
    sClaimsMadeId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSClaimsGetClaimMadeByhasCodeHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSClaimsGetClaimMadeByhasCodeQueryOptions(effectiveDate,lineOfBusinessId,policyId,sClaimsMadeId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSClaimsDeleteActivityReferenceGroupByIDHook = () => {
        const aMSClaimsDeleteActivityReferenceGroupByID = useCustomInstance<boolean>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
    sClaimsMadeId: string,
 ) => {
        return aMSClaimsDeleteActivityReferenceGroupByID(
          {url: `/api/AMSClaims/Delete/${effectiveDate}/${lineOfBusinessId}/${policyId}/${sClaimsMadeId}`, method: 'POST'
    },
          );
        }
      }
    


export const useAMSClaimsDeleteActivityReferenceGroupByIDMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSClaimsDeleteActivityReferenceGroupByIDHook>>>, TError,{effectiveDate: string;lineOfBusinessId: string;policyId: string;sClaimsMadeId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSClaimsDeleteActivityReferenceGroupByIDHook>>>, TError,{effectiveDate: string;lineOfBusinessId: string;policyId: string;sClaimsMadeId: string}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const aMSClaimsDeleteActivityReferenceGroupByID =  useAMSClaimsDeleteActivityReferenceGroupByIDHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAMSClaimsDeleteActivityReferenceGroupByIDHook>>>, {effectiveDate: string;lineOfBusinessId: string;policyId: string;sClaimsMadeId: string}> = (props) => {
          const {effectiveDate,lineOfBusinessId,policyId,sClaimsMadeId} = props ?? {};

          return  aMSClaimsDeleteActivityReferenceGroupByID(effectiveDate,lineOfBusinessId,policyId,sClaimsMadeId,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AMSClaimsDeleteActivityReferenceGroupByIDMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSClaimsDeleteActivityReferenceGroupByIDHook>>>>
    
    export type AMSClaimsDeleteActivityReferenceGroupByIDMutationError = unknown

    export const useAMSClaimsDeleteActivityReferenceGroupByID = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSClaimsDeleteActivityReferenceGroupByIDHook>>>, TError,{effectiveDate: string;lineOfBusinessId: string;policyId: string;sClaimsMadeId: string}, TContext>, }
) => {

      const mutationOptions = useAMSClaimsDeleteActivityReferenceGroupByIDMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAMSClaimsUpdateMAHook = () => {
        const aMSClaimsUpdateMA = useCustomInstance<boolean>();

        return (
    domainModelAMSModelAMSClaimMade: DomainModelAMSModelAMSClaimMade,
 ) => {
        return aMSClaimsUpdateMA(
          {url: `/api/AMSClaims/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelAMSModelAMSClaimMade
    },
          );
        }
      }
    


export const useAMSClaimsUpdateMAMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSClaimsUpdateMAHook>>>, TError,{data: DomainModelAMSModelAMSClaimMade}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSClaimsUpdateMAHook>>>, TError,{data: DomainModelAMSModelAMSClaimMade}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const aMSClaimsUpdateMA =  useAMSClaimsUpdateMAHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAMSClaimsUpdateMAHook>>>, {data: DomainModelAMSModelAMSClaimMade}> = (props) => {
          const {data} = props ?? {};

          return  aMSClaimsUpdateMA(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AMSClaimsUpdateMAMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSClaimsUpdateMAHook>>>>
    export type AMSClaimsUpdateMAMutationBody = DomainModelAMSModelAMSClaimMade
    export type AMSClaimsUpdateMAMutationError = unknown

    export const useAMSClaimsUpdateMA = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSClaimsUpdateMAHook>>>, TError,{data: DomainModelAMSModelAMSClaimMade}, TContext>, }
) => {

      const mutationOptions = useAMSClaimsUpdateMAMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAMSCommercialGetCommercialPropertyHook = () => {
        const aMSCommercialGetCommercialProperty = useCustomInstance<DomainModelAMSModelAMSCommercialproperty>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialProperty(
          {url: `/api/AMSCommercial/GetCommercialProperty/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialPropertyQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialProperty/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialPropertyQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialPropertyQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialProperty =  useAMSCommercialGetCommercialPropertyHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyHook>>>> = ({ signal }) => aMSCommercialGetCommercialProperty(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialPropertyQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyHook>>>>
export type AMSCommercialGetCommercialPropertyQueryError = unknown

export const useAMSCommercialGetCommercialProperty = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialPropertyQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialPropertyIntrestByIDHook = () => {
        const aMSCommercialGetCommercialPropertyIntrestByID = useCustomInstance<DomainModelAMSModelAMSPoliciesAddIntrest[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialPropertyIntrestByID(
          {url: `/api/AMSCommercial/GetCommercialPropertyIntrest/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialPropertyIntrestByIDQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialPropertyIntrest/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialPropertyIntrestByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyIntrestByIDHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyIntrestByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialPropertyIntrestByIDQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialPropertyIntrestByID =  useAMSCommercialGetCommercialPropertyIntrestByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyIntrestByIDHook>>>> = ({ signal }) => aMSCommercialGetCommercialPropertyIntrestByID(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyIntrestByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialPropertyIntrestByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyIntrestByIDHook>>>>
export type AMSCommercialGetCommercialPropertyIntrestByIDQueryError = unknown

export const useAMSCommercialGetCommercialPropertyIntrestByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyIntrestByIDHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyIntrestByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialPropertyIntrestByIDQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialPropertyCoverageByIDHook = () => {
        const aMSCommercialGetCommercialPropertyCoverageByID = useCustomInstance<DomainModelAMSModelAMSCommercialLinesCoverages[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialPropertyCoverageByID(
          {url: `/api/AMSCommercial/GetCommercialPropertyCoverage/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialPropertyCoverageByIDQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialPropertyCoverage/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialPropertyCoverageByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyCoverageByIDHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyCoverageByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialPropertyCoverageByIDQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialPropertyCoverageByID =  useAMSCommercialGetCommercialPropertyCoverageByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyCoverageByIDHook>>>> = ({ signal }) => aMSCommercialGetCommercialPropertyCoverageByID(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyCoverageByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialPropertyCoverageByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyCoverageByIDHook>>>>
export type AMSCommercialGetCommercialPropertyCoverageByIDQueryError = unknown

export const useAMSCommercialGetCommercialPropertyCoverageByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyCoverageByIDHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyCoverageByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialPropertyCoverageByIDQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialPropertyPolicyFormByIDHook = () => {
        const aMSCommercialGetCommercialPropertyPolicyFormByID = useCustomInstance<DomainModelAMSModelAMSpoliciesForms[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialPropertyPolicyFormByID(
          {url: `/api/AMSCommercial/GetCommercialPropertyPolicyform/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialPropertyPolicyFormByIDQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialPropertyPolicyform/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialPropertyPolicyFormByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyPolicyFormByIDHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyPolicyFormByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialPropertyPolicyFormByIDQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialPropertyPolicyFormByID =  useAMSCommercialGetCommercialPropertyPolicyFormByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyPolicyFormByIDHook>>>> = ({ signal }) => aMSCommercialGetCommercialPropertyPolicyFormByID(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyPolicyFormByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialPropertyPolicyFormByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyPolicyFormByIDHook>>>>
export type AMSCommercialGetCommercialPropertyPolicyFormByIDQueryError = unknown

export const useAMSCommercialGetCommercialPropertyPolicyFormByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyPolicyFormByIDHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyPolicyFormByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialPropertyPolicyFormByIDQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialPropertyAnswerByIDHook = () => {
        const aMSCommercialGetCommercialPropertyAnswerByID = useCustomInstance<DomainModelAMSModelAMSCommercialUniqueAnswer[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialPropertyAnswerByID(
          {url: `/api/AMSCommercial/GetCommercialPropertyUniqueAnswer/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialPropertyAnswerByIDQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialPropertyUniqueAnswer/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialPropertyAnswerByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyAnswerByIDHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyAnswerByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialPropertyAnswerByIDQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialPropertyAnswerByID =  useAMSCommercialGetCommercialPropertyAnswerByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyAnswerByIDHook>>>> = ({ signal }) => aMSCommercialGetCommercialPropertyAnswerByID(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyAnswerByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialPropertyAnswerByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyAnswerByIDHook>>>>
export type AMSCommercialGetCommercialPropertyAnswerByIDQueryError = unknown

export const useAMSCommercialGetCommercialPropertyAnswerByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyAnswerByIDHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyAnswerByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialPropertyAnswerByIDQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialPropertyPremiseInfoByIDHook = () => {
        const aMSCommercialGetCommercialPropertyPremiseInfoByID = useCustomInstance<DomainModelAMSModelAMSCommercialPremiseInformation[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialPropertyPremiseInfoByID(
          {url: `/api/AMSCommercial/GetCommercialPropertyPremiseInformation/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialPropertyPremiseInfoByIDQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialPropertyPremiseInformation/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialPropertyPremiseInfoByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyPremiseInfoByIDHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyPremiseInfoByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialPropertyPremiseInfoByIDQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialPropertyPremiseInfoByID =  useAMSCommercialGetCommercialPropertyPremiseInfoByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyPremiseInfoByIDHook>>>> = ({ signal }) => aMSCommercialGetCommercialPropertyPremiseInfoByID(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyPremiseInfoByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialPropertyPremiseInfoByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyPremiseInfoByIDHook>>>>
export type AMSCommercialGetCommercialPropertyPremiseInfoByIDQueryError = unknown

export const useAMSCommercialGetCommercialPropertyPremiseInfoByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyPremiseInfoByIDHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyPremiseInfoByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialPropertyPremiseInfoByIDQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialPropertyRemarkByIDHook = () => {
        const aMSCommercialGetCommercialPropertyRemarkByID = useCustomInstance<DomainModelAMSModelAMSPoliciesRemark[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialPropertyRemarkByID(
          {url: `/api/AMSCommercial/GetCommercialPropertyRemark/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialPropertyRemarkByIDQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialPropertyRemark/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialPropertyRemarkByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyRemarkByIDHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyRemarkByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialPropertyRemarkByIDQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialPropertyRemarkByID =  useAMSCommercialGetCommercialPropertyRemarkByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyRemarkByIDHook>>>> = ({ signal }) => aMSCommercialGetCommercialPropertyRemarkByID(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyRemarkByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialPropertyRemarkByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyRemarkByIDHook>>>>
export type AMSCommercialGetCommercialPropertyRemarkByIDQueryError = unknown

export const useAMSCommercialGetCommercialPropertyRemarkByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyRemarkByIDHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyRemarkByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialPropertyRemarkByIDQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialPropertyTotalPremiumByIDHook = () => {
        const aMSCommercialGetCommercialPropertyTotalPremiumByID = useCustomInstance<DomainModelAMSModelAMSCommercialTotalPremium[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialPropertyTotalPremiumByID(
          {url: `/api/AMSCommercial/GetCommercialPropertyTotalPremium/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialPropertyTotalPremiumByIDQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialPropertyTotalPremium/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialPropertyTotalPremiumByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyTotalPremiumByIDHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyTotalPremiumByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialPropertyTotalPremiumByIDQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialPropertyTotalPremiumByID =  useAMSCommercialGetCommercialPropertyTotalPremiumByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyTotalPremiumByIDHook>>>> = ({ signal }) => aMSCommercialGetCommercialPropertyTotalPremiumByID(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyTotalPremiumByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialPropertyTotalPremiumByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyTotalPremiumByIDHook>>>>
export type AMSCommercialGetCommercialPropertyTotalPremiumByIDQueryError = unknown

export const useAMSCommercialGetCommercialPropertyTotalPremiumByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyTotalPremiumByIDHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyTotalPremiumByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialPropertyTotalPremiumByIDQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialPropertyVAlueReportingByIDHook = () => {
        const aMSCommercialGetCommercialPropertyVAlueReportingByID = useCustomInstance<DomainModelAMSModelAMSCommercialValueReporting[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialPropertyVAlueReportingByID(
          {url: `/api/AMSCommercial/GetCommercialPropertyVAlueReporting/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialPropertyVAlueReportingByIDQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialPropertyVAlueReporting/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialPropertyVAlueReportingByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyVAlueReportingByIDHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyVAlueReportingByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialPropertyVAlueReportingByIDQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialPropertyVAlueReportingByID =  useAMSCommercialGetCommercialPropertyVAlueReportingByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyVAlueReportingByIDHook>>>> = ({ signal }) => aMSCommercialGetCommercialPropertyVAlueReportingByID(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyVAlueReportingByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialPropertyVAlueReportingByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyVAlueReportingByIDHook>>>>
export type AMSCommercialGetCommercialPropertyVAlueReportingByIDQueryError = unknown

export const useAMSCommercialGetCommercialPropertyVAlueReportingByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyVAlueReportingByIDHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyVAlueReportingByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialPropertyVAlueReportingByIDQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialPropertyActionHook = () => {
        const aMSCommercialGetCommercialPropertyAction = useCustomInstance<DomainModelModelAMSCommercialActionDropDown>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialPropertyAction(
          {url: `/api/AMSCommercial/GetCommercialPropertyAction`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialPropertyActionQueryKey = () => {
    return [`/api/AMSCommercial/GetCommercialPropertyAction`] as const;
    }

    
export const useAMSCommercialGetCommercialPropertyActionQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyActionHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyActionHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialPropertyActionQueryKey();

  const aMSCommercialGetCommercialPropertyAction =  useAMSCommercialGetCommercialPropertyActionHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyActionHook>>>> = ({ signal }) => aMSCommercialGetCommercialPropertyAction(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyActionHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialPropertyActionQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyActionHook>>>>
export type AMSCommercialGetCommercialPropertyActionQueryError = unknown

export const useAMSCommercialGetCommercialPropertyAction = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyActionHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyActionHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialPropertyActionQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialCareCustodyHook = () => {
        const aMSCommercialGetCommercialCareCustody = useCustomInstance<DomainModelAMSModelAMSCommercialCareCoustody>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialCareCustody(
          {url: `/api/AMSCommercial/GetCommercialCareCustody`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialCareCustodyQueryKey = () => {
    return [`/api/AMSCommercial/GetCommercialCareCustody`] as const;
    }

    
export const useAMSCommercialGetCommercialCareCustodyQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCareCustodyHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCareCustodyHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialCareCustodyQueryKey();

  const aMSCommercialGetCommercialCareCustody =  useAMSCommercialGetCommercialCareCustodyHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCareCustodyHook>>>> = ({ signal }) => aMSCommercialGetCommercialCareCustody(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCareCustodyHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialCareCustodyQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCareCustodyHook>>>>
export type AMSCommercialGetCommercialCareCustodyQueryError = unknown

export const useAMSCommercialGetCommercialCareCustody = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCareCustodyHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCareCustodyHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialCareCustodyQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialUpdateCommercialCareCustodyHook = () => {
        const aMSCommercialUpdateCommercialCareCustody = useCustomInstance<boolean>();

        return (
    domainModelAMSModelAMSCommercialCareCoustodyBody: DomainModelAMSModelAMSCommercialCareCoustodyBody,
 ) => {
        return aMSCommercialUpdateCommercialCareCustody(
          {url: `/api/AMSCommercial/AMSCommercialCustody/EditCustody`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelAMSModelAMSCommercialCareCoustodyBody
    },
          );
        }
      }
    


export const useAMSCommercialUpdateCommercialCareCustodyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialUpdateCommercialCareCustodyHook>>>, TError,{data: DomainModelAMSModelAMSCommercialCareCoustodyBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialUpdateCommercialCareCustodyHook>>>, TError,{data: DomainModelAMSModelAMSCommercialCareCoustodyBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const aMSCommercialUpdateCommercialCareCustody =  useAMSCommercialUpdateCommercialCareCustodyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialUpdateCommercialCareCustodyHook>>>, {data: DomainModelAMSModelAMSCommercialCareCoustodyBody}> = (props) => {
          const {data} = props ?? {};

          return  aMSCommercialUpdateCommercialCareCustody(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AMSCommercialUpdateCommercialCareCustodyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialUpdateCommercialCareCustodyHook>>>>
    export type AMSCommercialUpdateCommercialCareCustodyMutationBody = DomainModelAMSModelAMSCommercialCareCoustodyBody
    export type AMSCommercialUpdateCommercialCareCustodyMutationError = unknown

    export const useAMSCommercialUpdateCommercialCareCustody = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialUpdateCommercialCareCustodyHook>>>, TError,{data: DomainModelAMSModelAMSCommercialCareCoustodyBody}, TContext>, }
) => {

      const mutationOptions = useAMSCommercialUpdateCommercialCareCustodyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAMSCommercialADDCustodyHook = () => {
        const aMSCommercialADDCustody = useCustomInstance<DomainModelAMSModelAMSCommercialCareCoustody>();

        return (
    domainModelAMSModelAMSCommercialCareCoustodyBody: DomainModelAMSModelAMSCommercialCareCoustodyBody,
 ) => {
        return aMSCommercialADDCustody(
          {url: `/api/AMSCommercial/AMSCommercialCustody/ADDCustody`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelAMSModelAMSCommercialCareCoustodyBody
    },
          );
        }
      }
    


export const useAMSCommercialADDCustodyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialADDCustodyHook>>>, TError,{data: DomainModelAMSModelAMSCommercialCareCoustodyBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialADDCustodyHook>>>, TError,{data: DomainModelAMSModelAMSCommercialCareCoustodyBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const aMSCommercialADDCustody =  useAMSCommercialADDCustodyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialADDCustodyHook>>>, {data: DomainModelAMSModelAMSCommercialCareCoustodyBody}> = (props) => {
          const {data} = props ?? {};

          return  aMSCommercialADDCustody(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AMSCommercialADDCustodyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialADDCustodyHook>>>>
    export type AMSCommercialADDCustodyMutationBody = DomainModelAMSModelAMSCommercialCareCoustodyBody
    export type AMSCommercialADDCustodyMutationError = unknown

    export const useAMSCommercialADDCustody = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialADDCustodyHook>>>, TError,{data: DomainModelAMSModelAMSCommercialCareCoustodyBody}, TContext>, }
) => {

      const mutationOptions = useAMSCommercialADDCustodyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAMSCommercialDeleteCommercialCareCustodyHook = () => {
        const aMSCommercialDeleteCommercialCareCustody = useCustomInstance<boolean>();

        return (
    careCustodyControlId: string,
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 ) => {
        return aMSCommercialDeleteCommercialCareCustody(
          {url: `/api/AMSCommercial/AMSCommercialCustody/deleteCommercialcareCustody/${careCustodyControlId}/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'POST'
    },
          );
        }
      }
    


export const useAMSCommercialDeleteCommercialCareCustodyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialDeleteCommercialCareCustodyHook>>>, TError,{careCustodyControlId: string;effectiveDate: string;lineOfBusinessId: string;policyId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialDeleteCommercialCareCustodyHook>>>, TError,{careCustodyControlId: string;effectiveDate: string;lineOfBusinessId: string;policyId: string}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const aMSCommercialDeleteCommercialCareCustody =  useAMSCommercialDeleteCommercialCareCustodyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialDeleteCommercialCareCustodyHook>>>, {careCustodyControlId: string;effectiveDate: string;lineOfBusinessId: string;policyId: string}> = (props) => {
          const {careCustodyControlId,effectiveDate,lineOfBusinessId,policyId} = props ?? {};

          return  aMSCommercialDeleteCommercialCareCustody(careCustodyControlId,effectiveDate,lineOfBusinessId,policyId,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AMSCommercialDeleteCommercialCareCustodyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialDeleteCommercialCareCustodyHook>>>>
    
    export type AMSCommercialDeleteCommercialCareCustodyMutationError = unknown

    export const useAMSCommercialDeleteCommercialCareCustody = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialDeleteCommercialCareCustodyHook>>>, TError,{careCustodyControlId: string;effectiveDate: string;lineOfBusinessId: string;policyId: string}, TContext>, }
) => {

      const mutationOptions = useAMSCommercialDeleteCommercialCareCustodyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAMSCommercialGetCommercialGeneralLiabilityByIDHook = () => {
        const aMSCommercialGetCommercialGeneralLiabilityByID = useCustomInstance<DomainModelAMSModelAMSCommercialproperty>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialGeneralLiabilityByID(
          {url: `/api/AMSCommercial/GetCommercialGeneralLiability/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialGeneralLiabilityByIDQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialGeneralLiability/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialGeneralLiabilityByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialGeneralLiabilityByIDHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialGeneralLiabilityByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialGeneralLiabilityByIDQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialGeneralLiabilityByID =  useAMSCommercialGetCommercialGeneralLiabilityByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialGeneralLiabilityByIDHook>>>> = ({ signal }) => aMSCommercialGetCommercialGeneralLiabilityByID(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialGeneralLiabilityByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialGeneralLiabilityByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialGeneralLiabilityByIDHook>>>>
export type AMSCommercialGetCommercialGeneralLiabilityByIDQueryError = unknown

export const useAMSCommercialGetCommercialGeneralLiabilityByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialGeneralLiabilityByIDHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialGeneralLiabilityByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialGeneralLiabilityByIDQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialAddCommercialValuereportingHook = () => {
        const aMSCommercialAddCommercialValuereporting = useCustomInstance<DomainModelAMSModelAMSCommercialValueReporting>();

        return (
    domainModelAMSModelAMSCommercialValueReportingBody: DomainModelAMSModelAMSCommercialValueReportingBody,
 ) => {
        return aMSCommercialAddCommercialValuereporting(
          {url: `/api/AMSCommercial/CommercialValuereporting`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelAMSModelAMSCommercialValueReportingBody
    },
          );
        }
      }
    


export const useAMSCommercialAddCommercialValuereportingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialAddCommercialValuereportingHook>>>, TError,{data: DomainModelAMSModelAMSCommercialValueReportingBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialAddCommercialValuereportingHook>>>, TError,{data: DomainModelAMSModelAMSCommercialValueReportingBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const aMSCommercialAddCommercialValuereporting =  useAMSCommercialAddCommercialValuereportingHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialAddCommercialValuereportingHook>>>, {data: DomainModelAMSModelAMSCommercialValueReportingBody}> = (props) => {
          const {data} = props ?? {};

          return  aMSCommercialAddCommercialValuereporting(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AMSCommercialAddCommercialValuereportingMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialAddCommercialValuereportingHook>>>>
    export type AMSCommercialAddCommercialValuereportingMutationBody = DomainModelAMSModelAMSCommercialValueReportingBody
    export type AMSCommercialAddCommercialValuereportingMutationError = unknown

    export const useAMSCommercialAddCommercialValuereporting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialAddCommercialValuereportingHook>>>, TError,{data: DomainModelAMSModelAMSCommercialValueReportingBody}, TContext>, }
) => {

      const mutationOptions = useAMSCommercialAddCommercialValuereportingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAMSCommercialGetCommercialPropertyValueReportingHook = () => {
        const aMSCommercialGetCommercialPropertyValueReporting = useCustomInstance<DomainModelAMSModelAMSCommercialValueReporting>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialPropertyValueReporting(
          {url: `/api/AMSCommercial/CommercialPropertyValueReporting`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialPropertyValueReportingQueryKey = () => {
    return [`/api/AMSCommercial/CommercialPropertyValueReporting`] as const;
    }

    
export const useAMSCommercialGetCommercialPropertyValueReportingQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyValueReportingHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyValueReportingHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialPropertyValueReportingQueryKey();

  const aMSCommercialGetCommercialPropertyValueReporting =  useAMSCommercialGetCommercialPropertyValueReportingHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyValueReportingHook>>>> = ({ signal }) => aMSCommercialGetCommercialPropertyValueReporting(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyValueReportingHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialPropertyValueReportingQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyValueReportingHook>>>>
export type AMSCommercialGetCommercialPropertyValueReportingQueryError = unknown

export const useAMSCommercialGetCommercialPropertyValueReporting = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyValueReportingHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialPropertyValueReportingHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialPropertyValueReportingQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetSinglecommercialvaluereportingHook = () => {
        const aMSCommercialGetSinglecommercialvaluereporting = useCustomInstance<DomainModelAMSModelAMSCommercialValueReporting>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
    valueReportingId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetSinglecommercialvaluereporting(
          {url: `/api/AMSCommercial/GetSinglecommercialvaluereporting/${effectiveDate}/${lineOfBusinessId}/${policyId}/${valueReportingId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetSinglecommercialvaluereportingQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
    valueReportingId: string,) => {
    return [`/api/AMSCommercial/GetSinglecommercialvaluereporting/${effectiveDate}/${lineOfBusinessId}/${policyId}/${valueReportingId}`] as const;
    }

    
export const useAMSCommercialGetSinglecommercialvaluereportingQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetSinglecommercialvaluereportingHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
    valueReportingId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetSinglecommercialvaluereportingHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetSinglecommercialvaluereportingQueryKey(effectiveDate,lineOfBusinessId,policyId,valueReportingId);

  const aMSCommercialGetSinglecommercialvaluereporting =  useAMSCommercialGetSinglecommercialvaluereportingHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetSinglecommercialvaluereportingHook>>>> = ({ signal }) => aMSCommercialGetSinglecommercialvaluereporting(effectiveDate,lineOfBusinessId,policyId,valueReportingId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId && valueReportingId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetSinglecommercialvaluereportingHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetSinglecommercialvaluereportingQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetSinglecommercialvaluereportingHook>>>>
export type AMSCommercialGetSinglecommercialvaluereportingQueryError = unknown

export const useAMSCommercialGetSinglecommercialvaluereporting = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetSinglecommercialvaluereportingHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
    valueReportingId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetSinglecommercialvaluereportingHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetSinglecommercialvaluereportingQueryOptions(effectiveDate,lineOfBusinessId,policyId,valueReportingId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialUpdatecommercialvaluereportingHook = () => {
        const aMSCommercialUpdatecommercialvaluereporting = useCustomInstance<boolean>();

        return (
    domainModelAMSModelAMSCommercialValueReportingBody: DomainModelAMSModelAMSCommercialValueReportingBody,
 ) => {
        return aMSCommercialUpdatecommercialvaluereporting(
          {url: `/api/AMSCommercial/UpdateCommercialValuereporting`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelAMSModelAMSCommercialValueReportingBody
    },
          );
        }
      }
    


export const useAMSCommercialUpdatecommercialvaluereportingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialUpdatecommercialvaluereportingHook>>>, TError,{data: DomainModelAMSModelAMSCommercialValueReportingBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialUpdatecommercialvaluereportingHook>>>, TError,{data: DomainModelAMSModelAMSCommercialValueReportingBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const aMSCommercialUpdatecommercialvaluereporting =  useAMSCommercialUpdatecommercialvaluereportingHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialUpdatecommercialvaluereportingHook>>>, {data: DomainModelAMSModelAMSCommercialValueReportingBody}> = (props) => {
          const {data} = props ?? {};

          return  aMSCommercialUpdatecommercialvaluereporting(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AMSCommercialUpdatecommercialvaluereportingMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialUpdatecommercialvaluereportingHook>>>>
    export type AMSCommercialUpdatecommercialvaluereportingMutationBody = DomainModelAMSModelAMSCommercialValueReportingBody
    export type AMSCommercialUpdatecommercialvaluereportingMutationError = unknown

    export const useAMSCommercialUpdatecommercialvaluereporting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialUpdatecommercialvaluereportingHook>>>, TError,{data: DomainModelAMSModelAMSCommercialValueReportingBody}, TContext>, }
) => {

      const mutationOptions = useAMSCommercialUpdatecommercialvaluereportingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAMSCommercialDeletecommercialvaluereportingHook = () => {
        const aMSCommercialDeletecommercialvaluereporting = useCustomInstance<boolean>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
    valueReportingId: string,
 ) => {
        return aMSCommercialDeletecommercialvaluereporting(
          {url: `/api/AMSCommercial/DeleteCommercialValuereporting/${effectiveDate}/${lineOfBusinessId}/${policyId}/${valueReportingId}`, method: 'POST'
    },
          );
        }
      }
    


export const useAMSCommercialDeletecommercialvaluereportingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialDeletecommercialvaluereportingHook>>>, TError,{effectiveDate: string;lineOfBusinessId: string;policyId: string;valueReportingId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialDeletecommercialvaluereportingHook>>>, TError,{effectiveDate: string;lineOfBusinessId: string;policyId: string;valueReportingId: string}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const aMSCommercialDeletecommercialvaluereporting =  useAMSCommercialDeletecommercialvaluereportingHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialDeletecommercialvaluereportingHook>>>, {effectiveDate: string;lineOfBusinessId: string;policyId: string;valueReportingId: string}> = (props) => {
          const {effectiveDate,lineOfBusinessId,policyId,valueReportingId} = props ?? {};

          return  aMSCommercialDeletecommercialvaluereporting(effectiveDate,lineOfBusinessId,policyId,valueReportingId,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AMSCommercialDeletecommercialvaluereportingMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialDeletecommercialvaluereportingHook>>>>
    
    export type AMSCommercialDeletecommercialvaluereportingMutationError = unknown

    export const useAMSCommercialDeletecommercialvaluereporting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialDeletecommercialvaluereportingHook>>>, TError,{effectiveDate: string;lineOfBusinessId: string;policyId: string;valueReportingId: string}, TContext>, }
) => {

      const mutationOptions = useAMSCommercialDeletecommercialvaluereportingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAMSCommercialGetCommercialUmbrellaHook = () => {
        const aMSCommercialGetCommercialUmbrella = useCustomInstance<DomainModelAMSModelAMSCommercialproperty>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialUmbrella(
          {url: `/api/AMSCommercial/GetCommercialUmbrella/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialUmbrellaQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialUmbrella/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialUmbrellaQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialUmbrellaQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialUmbrella =  useAMSCommercialGetCommercialUmbrellaHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaHook>>>> = ({ signal }) => aMSCommercialGetCommercialUmbrella(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialUmbrellaQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaHook>>>>
export type AMSCommercialGetCommercialUmbrellaQueryError = unknown

export const useAMSCommercialGetCommercialUmbrella = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialUmbrellaQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialUmbrellacasecustodyHook = () => {
        const aMSCommercialGetCommercialUmbrellacasecustody = useCustomInstance<DomainModelAMSModelAMSCommercialCareCoustody[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialUmbrellacasecustody(
          {url: `/api/AMSCommercial/GetCommercialUmbrellacasecustody/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialUmbrellacasecustodyQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialUmbrellacasecustody/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialUmbrellacasecustodyQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellacasecustodyHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellacasecustodyHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialUmbrellacasecustodyQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialUmbrellacasecustody =  useAMSCommercialGetCommercialUmbrellacasecustodyHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellacasecustodyHook>>>> = ({ signal }) => aMSCommercialGetCommercialUmbrellacasecustody(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellacasecustodyHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialUmbrellacasecustodyQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellacasecustodyHook>>>>
export type AMSCommercialGetCommercialUmbrellacasecustodyQueryError = unknown

export const useAMSCommercialGetCommercialUmbrellacasecustody = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellacasecustodyHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellacasecustodyHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialUmbrellacasecustodyQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialUmbrellaUniqueAnswerHook = () => {
        const aMSCommercialGetCommercialUmbrellaUniqueAnswer = useCustomInstance<DomainModelAMSModelAMSCommercialUniqueAnswer[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialUmbrellaUniqueAnswer(
          {url: `/api/AMSCommercial/GetCommercialUmbrellaUniqueAnswer/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialUmbrellaUniqueAnswerQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialUmbrellaUniqueAnswer/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialUmbrellaUniqueAnswerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaUniqueAnswerHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaUniqueAnswerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialUmbrellaUniqueAnswerQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialUmbrellaUniqueAnswer =  useAMSCommercialGetCommercialUmbrellaUniqueAnswerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaUniqueAnswerHook>>>> = ({ signal }) => aMSCommercialGetCommercialUmbrellaUniqueAnswer(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaUniqueAnswerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialUmbrellaUniqueAnswerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaUniqueAnswerHook>>>>
export type AMSCommercialGetCommercialUmbrellaUniqueAnswerQueryError = unknown

export const useAMSCommercialGetCommercialUmbrellaUniqueAnswer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaUniqueAnswerHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaUniqueAnswerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialUmbrellaUniqueAnswerQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialUmbrellaPolicyFormHook = () => {
        const aMSCommercialGetCommercialUmbrellaPolicyForm = useCustomInstance<DomainModelAMSModelAMSpoliciesForms[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialUmbrellaPolicyForm(
          {url: `/api/AMSCommercial/GetCommercialUmbrellaPolicyForm/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialUmbrellaPolicyFormQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialUmbrellaPolicyForm/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialUmbrellaPolicyFormQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPolicyFormHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPolicyFormHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialUmbrellaPolicyFormQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialUmbrellaPolicyForm =  useAMSCommercialGetCommercialUmbrellaPolicyFormHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPolicyFormHook>>>> = ({ signal }) => aMSCommercialGetCommercialUmbrellaPolicyForm(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPolicyFormHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialUmbrellaPolicyFormQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPolicyFormHook>>>>
export type AMSCommercialGetCommercialUmbrellaPolicyFormQueryError = unknown

export const useAMSCommercialGetCommercialUmbrellaPolicyForm = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPolicyFormHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPolicyFormHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialUmbrellaPolicyFormQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialUmbrellaPrimaryLocationHook = () => {
        const aMSCommercialGetCommercialUmbrellaPrimaryLocation = useCustomInstance<DomainModelAMSModelAMSCommercialPrmiarylocation[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialUmbrellaPrimaryLocation(
          {url: `/api/AMSCommercial/GetCommercialUmbrellaPrimaryLocation/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialUmbrellaPrimaryLocationQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialUmbrellaPrimaryLocation/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialUmbrellaPrimaryLocationQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPrimaryLocationHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPrimaryLocationHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialUmbrellaPrimaryLocationQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialUmbrellaPrimaryLocation =  useAMSCommercialGetCommercialUmbrellaPrimaryLocationHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPrimaryLocationHook>>>> = ({ signal }) => aMSCommercialGetCommercialUmbrellaPrimaryLocation(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPrimaryLocationHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialUmbrellaPrimaryLocationQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPrimaryLocationHook>>>>
export type AMSCommercialGetCommercialUmbrellaPrimaryLocationQueryError = unknown

export const useAMSCommercialGetCommercialUmbrellaPrimaryLocation = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPrimaryLocationHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPrimaryLocationHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialUmbrellaPrimaryLocationQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialUmbrellaRemarkHook = () => {
        const aMSCommercialGetCommercialUmbrellaRemark = useCustomInstance<DomainModelAMSModelAMSPoliciesRemark[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialUmbrellaRemark(
          {url: `/api/AMSCommercial/GetCommercialUmbrellaRemark/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialUmbrellaRemarkQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialUmbrellaRemark/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialUmbrellaRemarkQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaRemarkHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaRemarkHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialUmbrellaRemarkQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialUmbrellaRemark =  useAMSCommercialGetCommercialUmbrellaRemarkHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaRemarkHook>>>> = ({ signal }) => aMSCommercialGetCommercialUmbrellaRemark(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaRemarkHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialUmbrellaRemarkQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaRemarkHook>>>>
export type AMSCommercialGetCommercialUmbrellaRemarkQueryError = unknown

export const useAMSCommercialGetCommercialUmbrellaRemark = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaRemarkHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaRemarkHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialUmbrellaRemarkQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialUmbrellaCoverageByIDHook = () => {
        const aMSCommercialGetCommercialUmbrellaCoverageByID = useCustomInstance<DomainModelAMSModelAMSCommercialLinesCoverages[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialUmbrellaCoverageByID(
          {url: `/api/AMSCommercial/GetCommercialUmbrellaCoverage/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialUmbrellaCoverageByIDQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialUmbrellaCoverage/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialUmbrellaCoverageByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaCoverageByIDHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaCoverageByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialUmbrellaCoverageByIDQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialUmbrellaCoverageByID =  useAMSCommercialGetCommercialUmbrellaCoverageByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaCoverageByIDHook>>>> = ({ signal }) => aMSCommercialGetCommercialUmbrellaCoverageByID(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaCoverageByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialUmbrellaCoverageByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaCoverageByIDHook>>>>
export type AMSCommercialGetCommercialUmbrellaCoverageByIDQueryError = unknown

export const useAMSCommercialGetCommercialUmbrellaCoverageByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaCoverageByIDHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaCoverageByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialUmbrellaCoverageByIDQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialUmbrellaVehicleByIDHook = () => {
        const aMSCommercialGetCommercialUmbrellaVehicleByID = useCustomInstance<DomainModelAMSModelAMSCommercialUmbrellaVehicle[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialUmbrellaVehicleByID(
          {url: `/api/AMSCommercial/GetCommercialUmbrellaVehicle/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialUmbrellaVehicleByIDQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialUmbrellaVehicle/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialUmbrellaVehicleByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaVehicleByIDHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaVehicleByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialUmbrellaVehicleByIDQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialUmbrellaVehicleByID =  useAMSCommercialGetCommercialUmbrellaVehicleByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaVehicleByIDHook>>>> = ({ signal }) => aMSCommercialGetCommercialUmbrellaVehicleByID(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaVehicleByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialUmbrellaVehicleByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaVehicleByIDHook>>>>
export type AMSCommercialGetCommercialUmbrellaVehicleByIDQueryError = unknown

export const useAMSCommercialGetCommercialUmbrellaVehicleByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaVehicleByIDHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaVehicleByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialUmbrellaVehicleByIDQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialUmbrellaLiabilityHook = () => {
        const aMSCommercialGetCommercialUmbrellaLiability = useCustomInstance<DomainModelAMSModelAMSCommercialUmbrellaLiability[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialUmbrellaLiability(
          {url: `/api/AMSCommercial/GetCommercialUmbrellaLiability/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialUmbrellaLiabilityQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialUmbrellaLiability/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialUmbrellaLiabilityQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaLiabilityHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaLiabilityHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialUmbrellaLiabilityQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialUmbrellaLiability =  useAMSCommercialGetCommercialUmbrellaLiabilityHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaLiabilityHook>>>> = ({ signal }) => aMSCommercialGetCommercialUmbrellaLiability(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaLiabilityHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialUmbrellaLiabilityQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaLiabilityHook>>>>
export type AMSCommercialGetCommercialUmbrellaLiabilityQueryError = unknown

export const useAMSCommercialGetCommercialUmbrellaLiability = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaLiabilityHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaLiabilityHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialUmbrellaLiabilityQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialUmbrellaAdditionalExposuresHook = () => {
        const aMSCommercialGetCommercialUmbrellaAdditionalExposures = useCustomInstance<DomainModelAMSModelAMSCommercialUmbrellaAdditionalExposures[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialUmbrellaAdditionalExposures(
          {url: `/api/AMSCommercial/GetCommercialUmbrellaAdditionalExposures/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialUmbrellaAdditionalExposuresQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialUmbrellaAdditionalExposures/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialUmbrellaAdditionalExposuresQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaAdditionalExposuresHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaAdditionalExposuresHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialUmbrellaAdditionalExposuresQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialUmbrellaAdditionalExposures =  useAMSCommercialGetCommercialUmbrellaAdditionalExposuresHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaAdditionalExposuresHook>>>> = ({ signal }) => aMSCommercialGetCommercialUmbrellaAdditionalExposures(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaAdditionalExposuresHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialUmbrellaAdditionalExposuresQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaAdditionalExposuresHook>>>>
export type AMSCommercialGetCommercialUmbrellaAdditionalExposuresQueryError = unknown

export const useAMSCommercialGetCommercialUmbrellaAdditionalExposures = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaAdditionalExposuresHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaAdditionalExposuresHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialUmbrellaAdditionalExposuresQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialUmbrellaPolicyHook = () => {
        const aMSCommercialGetCommercialUmbrellaPolicy = useCustomInstance<DomainModelAMSModelAMSCommercialUmbrellaPolicyInformation[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialUmbrellaPolicy(
          {url: `/api/AMSCommercial/GetCommercialUmbrellaPolicy/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialUmbrellaPolicyQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialUmbrellaPolicy/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialUmbrellaPolicyQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPolicyHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPolicyHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialUmbrellaPolicyQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialUmbrellaPolicy =  useAMSCommercialGetCommercialUmbrellaPolicyHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPolicyHook>>>> = ({ signal }) => aMSCommercialGetCommercialUmbrellaPolicy(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPolicyHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialUmbrellaPolicyQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPolicyHook>>>>
export type AMSCommercialGetCommercialUmbrellaPolicyQueryError = unknown

export const useAMSCommercialGetCommercialUmbrellaPolicy = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPolicyHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPolicyHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialUmbrellaPolicyQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialUmbrellaPremiumHook = () => {
        const aMSCommercialGetCommercialUmbrellaPremium = useCustomInstance<DomainModelAMSModelAMSCommercialTotalPremium[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialUmbrellaPremium(
          {url: `/api/AMSCommercial/GetCommercialUmbrellaPremium/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialUmbrellaPremiumQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialUmbrellaPremium/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialUmbrellaPremiumQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPremiumHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPremiumHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialUmbrellaPremiumQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialUmbrellaPremium =  useAMSCommercialGetCommercialUmbrellaPremiumHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPremiumHook>>>> = ({ signal }) => aMSCommercialGetCommercialUmbrellaPremium(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPremiumHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialUmbrellaPremiumQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPremiumHook>>>>
export type AMSCommercialGetCommercialUmbrellaPremiumQueryError = unknown

export const useAMSCommercialGetCommercialUmbrellaPremium = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPremiumHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaPremiumHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialUmbrellaPremiumQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialUmbrellaCoverageExplosureHook = () => {
        const aMSCommercialGetCommercialUmbrellaCoverageExplosure = useCustomInstance<DomainModelAMSModelAMSCommercialumbrellaUnderlyingCoverageExposure[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialUmbrellaCoverageExplosure(
          {url: `/api/AMSCommercial/GetCommercialUmbrellaCoverageExplosure/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialUmbrellaCoverageExplosureQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialUmbrellaCoverageExplosure/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialUmbrellaCoverageExplosureQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaCoverageExplosureHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaCoverageExplosureHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialUmbrellaCoverageExplosureQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialUmbrellaCoverageExplosure =  useAMSCommercialGetCommercialUmbrellaCoverageExplosureHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaCoverageExplosureHook>>>> = ({ signal }) => aMSCommercialGetCommercialUmbrellaCoverageExplosure(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaCoverageExplosureHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialUmbrellaCoverageExplosureQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaCoverageExplosureHook>>>>
export type AMSCommercialGetCommercialUmbrellaCoverageExplosureQueryError = unknown

export const useAMSCommercialGetCommercialUmbrellaCoverageExplosure = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaCoverageExplosureHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaCoverageExplosureHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialUmbrellaCoverageExplosureQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialUmbrellaGeneralLiabilityHook = () => {
        const aMSCommercialGetCommercialUmbrellaGeneralLiability = useCustomInstance<DomainModelAMSModelAMSCommercialUmbrellaGeneralLiability[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialUmbrellaGeneralLiability(
          {url: `/api/AMSCommercial/GetCommercialUmbrellaGeneralLiability/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialUmbrellaGeneralLiabilityQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/GetCommercialUmbrellaGeneralLiability/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialUmbrellaGeneralLiabilityQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaGeneralLiabilityHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaGeneralLiabilityHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialUmbrellaGeneralLiabilityQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialUmbrellaGeneralLiability =  useAMSCommercialGetCommercialUmbrellaGeneralLiabilityHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaGeneralLiabilityHook>>>> = ({ signal }) => aMSCommercialGetCommercialUmbrellaGeneralLiability(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaGeneralLiabilityHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialUmbrellaGeneralLiabilityQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaGeneralLiabilityHook>>>>
export type AMSCommercialGetCommercialUmbrellaGeneralLiabilityQueryError = unknown

export const useAMSCommercialGetCommercialUmbrellaGeneralLiability = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaGeneralLiabilityHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaGeneralLiabilityHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialUmbrellaGeneralLiabilityQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialUmbrellaActionHook = () => {
        const aMSCommercialGetCommercialUmbrellaAction = useCustomInstance<DomainModelAMSModelsAMSCommercialUmbrellaActionDropDown>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialUmbrellaAction(
          {url: `/api/AMSCommercial/CommercialUmbrellaAction`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialUmbrellaActionQueryKey = () => {
    return [`/api/AMSCommercial/CommercialUmbrellaAction`] as const;
    }

    
export const useAMSCommercialGetCommercialUmbrellaActionQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaActionHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaActionHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialUmbrellaActionQueryKey();

  const aMSCommercialGetCommercialUmbrellaAction =  useAMSCommercialGetCommercialUmbrellaActionHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaActionHook>>>> = ({ signal }) => aMSCommercialGetCommercialUmbrellaAction(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaActionHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialUmbrellaActionQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaActionHook>>>>
export type AMSCommercialGetCommercialUmbrellaActionQueryError = unknown

export const useAMSCommercialGetCommercialUmbrellaAction = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaActionHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialUmbrellaActionHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialUmbrellaActionQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialADDCommercialCoverageHook = () => {
        const aMSCommercialADDCommercialCoverage = useCustomInstance<DomainModelAMSModelAMSCommercialLinesCoverages>();

        return (
    domainModelAMSModelAMSCommercialLinesCoveragesBody: DomainModelAMSModelAMSCommercialLinesCoveragesBody,
 ) => {
        return aMSCommercialADDCommercialCoverage(
          {url: `/api/AMSCommercial/AddCommercialLineCoverage`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelAMSModelAMSCommercialLinesCoveragesBody
    },
          );
        }
      }
    


export const useAMSCommercialADDCommercialCoverageMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialADDCommercialCoverageHook>>>, TError,{data: DomainModelAMSModelAMSCommercialLinesCoveragesBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialADDCommercialCoverageHook>>>, TError,{data: DomainModelAMSModelAMSCommercialLinesCoveragesBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const aMSCommercialADDCommercialCoverage =  useAMSCommercialADDCommercialCoverageHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialADDCommercialCoverageHook>>>, {data: DomainModelAMSModelAMSCommercialLinesCoveragesBody}> = (props) => {
          const {data} = props ?? {};

          return  aMSCommercialADDCommercialCoverage(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AMSCommercialADDCommercialCoverageMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialADDCommercialCoverageHook>>>>
    export type AMSCommercialADDCommercialCoverageMutationBody = DomainModelAMSModelAMSCommercialLinesCoveragesBody
    export type AMSCommercialADDCommercialCoverageMutationError = unknown

    export const useAMSCommercialADDCommercialCoverage = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialADDCommercialCoverageHook>>>, TError,{data: DomainModelAMSModelAMSCommercialLinesCoveragesBody}, TContext>, }
) => {

      const mutationOptions = useAMSCommercialADDCommercialCoverageMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAMSCommercialGetCommercialCoveragepremiumHook = () => {
        const aMSCommercialGetCommercialCoveragepremium = useCustomInstance<DomainModelAMSModelAMSCommercialLinesCoverages[]>();

        return (
    coveragePremiumId: string,
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialCoveragepremium(
          {url: `/api/AMSCommercial/CommercialCoverage/${coveragePremiumId}/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialCoveragepremiumQueryKey = (coveragePremiumId: string,
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/CommercialCoverage/${coveragePremiumId}/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialCoveragepremiumQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCoveragepremiumHook>>>, TError = unknown>(coveragePremiumId: string,
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCoveragepremiumHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialCoveragepremiumQueryKey(coveragePremiumId,effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialCoveragepremium =  useAMSCommercialGetCommercialCoveragepremiumHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCoveragepremiumHook>>>> = ({ signal }) => aMSCommercialGetCommercialCoveragepremium(coveragePremiumId,effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(coveragePremiumId && effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCoveragepremiumHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialCoveragepremiumQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCoveragepremiumHook>>>>
export type AMSCommercialGetCommercialCoveragepremiumQueryError = unknown

export const useAMSCommercialGetCommercialCoveragepremium = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCoveragepremiumHook>>>, TError = unknown>(
 coveragePremiumId: string,
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCoveragepremiumHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialCoveragepremiumQueryOptions(coveragePremiumId,effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialUpdatecommerciallineCovrageHook = () => {
        const aMSCommercialUpdatecommerciallineCovrage = useCustomInstance<boolean>();

        return (
    domainModelAMSModelAMSCommercialLinesCoveragesBody: DomainModelAMSModelAMSCommercialLinesCoveragesBody,
 ) => {
        return aMSCommercialUpdatecommerciallineCovrage(
          {url: `/api/AMSCommercial/UpdateCommercialLineCoverage`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelAMSModelAMSCommercialLinesCoveragesBody
    },
          );
        }
      }
    


export const useAMSCommercialUpdatecommerciallineCovrageMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialUpdatecommerciallineCovrageHook>>>, TError,{data: DomainModelAMSModelAMSCommercialLinesCoveragesBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialUpdatecommerciallineCovrageHook>>>, TError,{data: DomainModelAMSModelAMSCommercialLinesCoveragesBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const aMSCommercialUpdatecommerciallineCovrage =  useAMSCommercialUpdatecommerciallineCovrageHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialUpdatecommerciallineCovrageHook>>>, {data: DomainModelAMSModelAMSCommercialLinesCoveragesBody}> = (props) => {
          const {data} = props ?? {};

          return  aMSCommercialUpdatecommerciallineCovrage(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AMSCommercialUpdatecommerciallineCovrageMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialUpdatecommerciallineCovrageHook>>>>
    export type AMSCommercialUpdatecommerciallineCovrageMutationBody = DomainModelAMSModelAMSCommercialLinesCoveragesBody
    export type AMSCommercialUpdatecommerciallineCovrageMutationError = unknown

    export const useAMSCommercialUpdatecommerciallineCovrage = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialUpdatecommerciallineCovrageHook>>>, TError,{data: DomainModelAMSModelAMSCommercialLinesCoveragesBody}, TContext>, }
) => {

      const mutationOptions = useAMSCommercialUpdatecommerciallineCovrageMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAMSCommercialGetCommercialLineCoverageActionHook = () => {
        const aMSCommercialGetCommercialLineCoverageAction = useCustomInstance<DomainModelAMSModelCAMSCmmercialCoveragePremiumActionDropDown>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialLineCoverageAction(
          {url: `/api/AMSCommercial/CommercialCoveragePremiumAction`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialLineCoverageActionQueryKey = () => {
    return [`/api/AMSCommercial/CommercialCoveragePremiumAction`] as const;
    }

    
export const useAMSCommercialGetCommercialLineCoverageActionQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialLineCoverageActionHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialLineCoverageActionHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialLineCoverageActionQueryKey();

  const aMSCommercialGetCommercialLineCoverageAction =  useAMSCommercialGetCommercialLineCoverageActionHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialLineCoverageActionHook>>>> = ({ signal }) => aMSCommercialGetCommercialLineCoverageAction(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialLineCoverageActionHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialLineCoverageActionQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialLineCoverageActionHook>>>>
export type AMSCommercialGetCommercialLineCoverageActionQueryError = unknown

export const useAMSCommercialGetCommercialLineCoverageAction = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialLineCoverageActionHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialLineCoverageActionHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialLineCoverageActionQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialCrimeDestroyHook = () => {
        const aMSCommercialGetCommercialCrimeDestroy = useCustomInstance<DomainModelAMSModelAMSCommercialLinesCoverages[]>();

        return (
    coveragePremiumId: string,
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialCrimeDestroy(
          {url: `/api/AMSCommercial/CommercialCoverageCrimeDestroy/${coveragePremiumId}/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialCrimeDestroyQueryKey = (coveragePremiumId: string,
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/CommercialCoverageCrimeDestroy/${coveragePremiumId}/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialCrimeDestroyQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCrimeDestroyHook>>>, TError = unknown>(coveragePremiumId: string,
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCrimeDestroyHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialCrimeDestroyQueryKey(coveragePremiumId,effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialCrimeDestroy =  useAMSCommercialGetCommercialCrimeDestroyHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCrimeDestroyHook>>>> = ({ signal }) => aMSCommercialGetCommercialCrimeDestroy(coveragePremiumId,effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(coveragePremiumId && effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCrimeDestroyHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialCrimeDestroyQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCrimeDestroyHook>>>>
export type AMSCommercialGetCommercialCrimeDestroyQueryError = unknown

export const useAMSCommercialGetCommercialCrimeDestroy = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCrimeDestroyHook>>>, TError = unknown>(
 coveragePremiumId: string,
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCrimeDestroyHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialCrimeDestroyQueryOptions(coveragePremiumId,effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialCoverageFactorsHook = () => {
        const aMSCommercialGetCommercialCoverageFactors = useCustomInstance<DomainModelAMSModelAMSCommercialLinesCoverages[]>();

        return (
    coveragePremiumId: string,
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialCoverageFactors(
          {url: `/api/AMSCommercial/CommercialCoverageFactors/${coveragePremiumId}/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialCoverageFactorsQueryKey = (coveragePremiumId: string,
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/CommercialCoverageFactors/${coveragePremiumId}/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialCoverageFactorsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCoverageFactorsHook>>>, TError = unknown>(coveragePremiumId: string,
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCoverageFactorsHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialCoverageFactorsQueryKey(coveragePremiumId,effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialCoverageFactors =  useAMSCommercialGetCommercialCoverageFactorsHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCoverageFactorsHook>>>> = ({ signal }) => aMSCommercialGetCommercialCoverageFactors(coveragePremiumId,effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(coveragePremiumId && effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCoverageFactorsHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialCoverageFactorsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCoverageFactorsHook>>>>
export type AMSCommercialGetCommercialCoverageFactorsQueryError = unknown

export const useAMSCommercialGetCommercialCoverageFactors = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCoverageFactorsHook>>>, TError = unknown>(
 coveragePremiumId: string,
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCoverageFactorsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialCoverageFactorsQueryOptions(coveragePremiumId,effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialGetCommercialCoverageDependedPropertyHook = () => {
        const aMSCommercialGetCommercialCoverageDependedProperty = useCustomInstance<DomainModelAMSModelAMSCommercialLinesCoverages[]>();

        return (
    coveragePremiumId: string,
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialGetCommercialCoverageDependedProperty(
          {url: `/api/AMSCommercial/CommercialCoverageDependedProperty/${coveragePremiumId}/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetCommercialCoverageDependedPropertyQueryKey = (coveragePremiumId: string,
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSCommercial/CommercialCoverageDependedProperty/${coveragePremiumId}/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSCommercialGetCommercialCoverageDependedPropertyQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCoverageDependedPropertyHook>>>, TError = unknown>(coveragePremiumId: string,
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCoverageDependedPropertyHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetCommercialCoverageDependedPropertyQueryKey(coveragePremiumId,effectiveDate,lineOfBusinessId,policyId);

  const aMSCommercialGetCommercialCoverageDependedProperty =  useAMSCommercialGetCommercialCoverageDependedPropertyHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCoverageDependedPropertyHook>>>> = ({ signal }) => aMSCommercialGetCommercialCoverageDependedProperty(coveragePremiumId,effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(coveragePremiumId && effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCoverageDependedPropertyHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetCommercialCoverageDependedPropertyQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCoverageDependedPropertyHook>>>>
export type AMSCommercialGetCommercialCoverageDependedPropertyQueryError = unknown

export const useAMSCommercialGetCommercialCoverageDependedProperty = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCoverageDependedPropertyHook>>>, TError = unknown>(
 coveragePremiumId: string,
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetCommercialCoverageDependedPropertyHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetCommercialCoverageDependedPropertyQueryOptions(coveragePremiumId,effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialADDCommercialUnderLyingHook = () => {
        const aMSCommercialADDCommercialUnderLying = useCustomInstance<DomainModelAMSModelAMSCommercialUmbrellaLiability>();

        return (
    domainModelAMSModelAMSCommercialUmbrellaLiabilityBody: DomainModelAMSModelAMSCommercialUmbrellaLiabilityBody,
 ) => {
        return aMSCommercialADDCommercialUnderLying(
          {url: `/api/AMSCommercial/ADDCommercialUnderLying`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelAMSModelAMSCommercialUmbrellaLiabilityBody
    },
          );
        }
      }
    


export const useAMSCommercialADDCommercialUnderLyingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialADDCommercialUnderLyingHook>>>, TError,{data: DomainModelAMSModelAMSCommercialUmbrellaLiabilityBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialADDCommercialUnderLyingHook>>>, TError,{data: DomainModelAMSModelAMSCommercialUmbrellaLiabilityBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const aMSCommercialADDCommercialUnderLying =  useAMSCommercialADDCommercialUnderLyingHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialADDCommercialUnderLyingHook>>>, {data: DomainModelAMSModelAMSCommercialUmbrellaLiabilityBody}> = (props) => {
          const {data} = props ?? {};

          return  aMSCommercialADDCommercialUnderLying(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AMSCommercialADDCommercialUnderLyingMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialADDCommercialUnderLyingHook>>>>
    export type AMSCommercialADDCommercialUnderLyingMutationBody = DomainModelAMSModelAMSCommercialUmbrellaLiabilityBody
    export type AMSCommercialADDCommercialUnderLyingMutationError = unknown

    export const useAMSCommercialADDCommercialUnderLying = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialADDCommercialUnderLyingHook>>>, TError,{data: DomainModelAMSModelAMSCommercialUmbrellaLiabilityBody}, TContext>, }
) => {

      const mutationOptions = useAMSCommercialADDCommercialUnderLyingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAMSCommercialGetAllCommercialLiabiltyHook = () => {
        const aMSCommercialGetAllCommercialLiabilty = useCustomInstance<DomainModelAMSModelAMSCommercialUmbrellaLiability>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSCommercialGetAllCommercialLiabilty(
          {url: `/api/AMSCommercial/CommercialunderLyingAction`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialGetAllCommercialLiabiltyQueryKey = () => {
    return [`/api/AMSCommercial/CommercialunderLyingAction`] as const;
    }

    
export const useAMSCommercialGetAllCommercialLiabiltyQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetAllCommercialLiabiltyHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetAllCommercialLiabiltyHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialGetAllCommercialLiabiltyQueryKey();

  const aMSCommercialGetAllCommercialLiabilty =  useAMSCommercialGetAllCommercialLiabiltyHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetAllCommercialLiabiltyHook>>>> = ({ signal }) => aMSCommercialGetAllCommercialLiabilty(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetAllCommercialLiabiltyHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialGetAllCommercialLiabiltyQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetAllCommercialLiabiltyHook>>>>
export type AMSCommercialGetAllCommercialLiabiltyQueryError = unknown

export const useAMSCommercialGetAllCommercialLiabilty = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetAllCommercialLiabiltyHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialGetAllCommercialLiabiltyHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialGetAllCommercialLiabiltyQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialCommercialSingleUnderLiabilityHook = () => {
        const aMSCommercialCommercialSingleUnderLiability = useCustomInstance<DomainModelAMSModelAMSCommercialUmbrellaLiability[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
    underlyingPolicyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialCommercialSingleUnderLiability(
          {url: `/api/AMSCommercial/CommercialSingleUnderLiability/${effectiveDate}/${lineOfBusinessId}/${policyId}/${underlyingPolicyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialCommercialSingleUnderLiabilityQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
    underlyingPolicyId: string,) => {
    return [`/api/AMSCommercial/CommercialSingleUnderLiability/${effectiveDate}/${lineOfBusinessId}/${policyId}/${underlyingPolicyId}`] as const;
    }

    
export const useAMSCommercialCommercialSingleUnderLiabilityQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialCommercialSingleUnderLiabilityHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
    underlyingPolicyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialCommercialSingleUnderLiabilityHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialCommercialSingleUnderLiabilityQueryKey(effectiveDate,lineOfBusinessId,policyId,underlyingPolicyId);

  const aMSCommercialCommercialSingleUnderLiability =  useAMSCommercialCommercialSingleUnderLiabilityHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialCommercialSingleUnderLiabilityHook>>>> = ({ signal }) => aMSCommercialCommercialSingleUnderLiability(effectiveDate,lineOfBusinessId,policyId,underlyingPolicyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId && underlyingPolicyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialCommercialSingleUnderLiabilityHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialCommercialSingleUnderLiabilityQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialCommercialSingleUnderLiabilityHook>>>>
export type AMSCommercialCommercialSingleUnderLiabilityQueryError = unknown

export const useAMSCommercialCommercialSingleUnderLiability = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialCommercialSingleUnderLiabilityHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
    underlyingPolicyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialCommercialSingleUnderLiabilityHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialCommercialSingleUnderLiabilityQueryOptions(effectiveDate,lineOfBusinessId,policyId,underlyingPolicyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCommercialUpdateCommercialUnderLyingHook = () => {
        const aMSCommercialUpdateCommercialUnderLying = useCustomInstance<boolean>();

        return (
    domainModelAMSModelAMSCommercialUmbrellaLiabilityBody: DomainModelAMSModelAMSCommercialUmbrellaLiabilityBody,
 ) => {
        return aMSCommercialUpdateCommercialUnderLying(
          {url: `/api/AMSCommercial/UpdateCommercialUnderLying`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelAMSModelAMSCommercialUmbrellaLiabilityBody
    },
          );
        }
      }
    


export const useAMSCommercialUpdateCommercialUnderLyingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialUpdateCommercialUnderLyingHook>>>, TError,{data: DomainModelAMSModelAMSCommercialUmbrellaLiabilityBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialUpdateCommercialUnderLyingHook>>>, TError,{data: DomainModelAMSModelAMSCommercialUmbrellaLiabilityBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const aMSCommercialUpdateCommercialUnderLying =  useAMSCommercialUpdateCommercialUnderLyingHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialUpdateCommercialUnderLyingHook>>>, {data: DomainModelAMSModelAMSCommercialUmbrellaLiabilityBody}> = (props) => {
          const {data} = props ?? {};

          return  aMSCommercialUpdateCommercialUnderLying(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AMSCommercialUpdateCommercialUnderLyingMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialUpdateCommercialUnderLyingHook>>>>
    export type AMSCommercialUpdateCommercialUnderLyingMutationBody = DomainModelAMSModelAMSCommercialUmbrellaLiabilityBody
    export type AMSCommercialUpdateCommercialUnderLyingMutationError = unknown

    export const useAMSCommercialUpdateCommercialUnderLying = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialUpdateCommercialUnderLyingHook>>>, TError,{data: DomainModelAMSModelAMSCommercialUmbrellaLiabilityBody}, TContext>, }
) => {

      const mutationOptions = useAMSCommercialUpdateCommercialUnderLyingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAMSCommercialDeleteCommercialSingleUnderLiabilityHook = () => {
        const aMSCommercialDeleteCommercialSingleUnderLiability = useCustomInstance<boolean>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
    underlyingPolicyId: string,
 signal?: AbortSignal
) => {
        return aMSCommercialDeleteCommercialSingleUnderLiability(
          {url: `/api/AMSCommercial/DeleteCommercialSingleUnderLiability/${effectiveDate}/${lineOfBusinessId}/${policyId}/${underlyingPolicyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCommercialDeleteCommercialSingleUnderLiabilityQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
    underlyingPolicyId: string,) => {
    return [`/api/AMSCommercial/DeleteCommercialSingleUnderLiability/${effectiveDate}/${lineOfBusinessId}/${policyId}/${underlyingPolicyId}`] as const;
    }

    
export const useAMSCommercialDeleteCommercialSingleUnderLiabilityQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialDeleteCommercialSingleUnderLiabilityHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
    underlyingPolicyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialDeleteCommercialSingleUnderLiabilityHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCommercialDeleteCommercialSingleUnderLiabilityQueryKey(effectiveDate,lineOfBusinessId,policyId,underlyingPolicyId);

  const aMSCommercialDeleteCommercialSingleUnderLiability =  useAMSCommercialDeleteCommercialSingleUnderLiabilityHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCommercialDeleteCommercialSingleUnderLiabilityHook>>>> = ({ signal }) => aMSCommercialDeleteCommercialSingleUnderLiability(effectiveDate,lineOfBusinessId,policyId,underlyingPolicyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId && underlyingPolicyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialDeleteCommercialSingleUnderLiabilityHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCommercialDeleteCommercialSingleUnderLiabilityQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCommercialDeleteCommercialSingleUnderLiabilityHook>>>>
export type AMSCommercialDeleteCommercialSingleUnderLiabilityQueryError = unknown

export const useAMSCommercialDeleteCommercialSingleUnderLiability = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCommercialDeleteCommercialSingleUnderLiabilityHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
    underlyingPolicyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCommercialDeleteCommercialSingleUnderLiabilityHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCommercialDeleteCommercialSingleUnderLiabilityQueryOptions(effectiveDate,lineOfBusinessId,policyId,underlyingPolicyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetAllCustomersHook = () => {
        const aMSCustomerGetAllCustomers = useCustomInstance<DomainModelModelAMSCustomer[]>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSCustomerGetAllCustomers(
          {url: `/api/AMS/Customer/GetAllCustomers`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetAllCustomersQueryKey = () => {
    return [`/api/AMS/Customer/GetAllCustomers`] as const;
    }

    
export const useAMSCustomerGetAllCustomersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetAllCustomersHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetAllCustomersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetAllCustomersQueryKey();

  const aMSCustomerGetAllCustomers =  useAMSCustomerGetAllCustomersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetAllCustomersHook>>>> = ({ signal }) => aMSCustomerGetAllCustomers(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetAllCustomersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetAllCustomersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetAllCustomersHook>>>>
export type AMSCustomerGetAllCustomersQueryError = unknown

export const useAMSCustomerGetAllCustomers = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetAllCustomersHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetAllCustomersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetAllCustomersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetAllHook = () => {
        const aMSCustomerGetAll = useCustomInstance<DomainModelModelAMSCustomer[]>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSCustomerGetAll(
          {url: `/api/AMSCustomer/GetAllCustomer`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetAllQueryKey = () => {
    return [`/api/AMSCustomer/GetAllCustomer`] as const;
    }

    
export const useAMSCustomerGetAllQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetAllHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetAllHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetAllQueryKey();

  const aMSCustomerGetAll =  useAMSCustomerGetAllHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetAllHook>>>> = ({ signal }) => aMSCustomerGetAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetAllHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetAllQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetAllHook>>>>
export type AMSCustomerGetAllQueryError = unknown

export const useAMSCustomerGetAll = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetAllHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetAllHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetCUstomerByIDHook = () => {
        const aMSCustomerGetCUstomerByID = useCustomInstance<DomainModelModelAMSCustomer>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetCUstomerByID(
          {url: `/api/AMSCustomer/GetIdByCustomer/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetCUstomerByIDQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/GetIdByCustomer/${customerId}`] as const;
    }

    
export const useAMSCustomerGetCUstomerByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCUstomerByIDHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCUstomerByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetCUstomerByIDQueryKey(customerId);

  const aMSCustomerGetCUstomerByID =  useAMSCustomerGetCUstomerByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCUstomerByIDHook>>>> = ({ signal }) => aMSCustomerGetCUstomerByID(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCUstomerByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetCUstomerByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCUstomerByIDHook>>>>
export type AMSCustomerGetCUstomerByIDQueryError = unknown

export const useAMSCustomerGetCUstomerByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCUstomerByIDHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCUstomerByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetCUstomerByIDQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerUpdateAMSCustomerHook = () => {
        const aMSCustomerUpdateAMSCustomer = useCustomInstance<DomainModelModelAMSCustomer>();

        return (
    params?: AMSCustomerUpdateAMSCustomerParams,
 signal?: AbortSignal
) => {
        return aMSCustomerUpdateAMSCustomer(
          {url: `/api/AMSCustomer/UpdateAMSCustomer`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getAMSCustomerUpdateAMSCustomerQueryKey = (params?: AMSCustomerUpdateAMSCustomerParams,) => {
    return [`/api/AMSCustomer/UpdateAMSCustomer`, ...(params ? [params]: [])] as const;
    }

    
export const useAMSCustomerUpdateAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerUpdateAMSCustomerHook>>>, TError = unknown>(params?: AMSCustomerUpdateAMSCustomerParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerUpdateAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerUpdateAMSCustomerQueryKey(params);

  const aMSCustomerUpdateAMSCustomer =  useAMSCustomerUpdateAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerUpdateAMSCustomerHook>>>> = ({ signal }) => aMSCustomerUpdateAMSCustomer(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerUpdateAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerUpdateAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerUpdateAMSCustomerHook>>>>
export type AMSCustomerUpdateAMSCustomerQueryError = unknown

export const useAMSCustomerUpdateAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerUpdateAMSCustomerHook>>>, TError = unknown>(
 params?: AMSCustomerUpdateAMSCustomerParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerUpdateAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerUpdateAMSCustomerQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerAddAMSCustomerHook = () => {
        const aMSCustomerAddAMSCustomer = useCustomInstance<DomainModelModelAMSCustomer>();

        return (
    params?: AMSCustomerAddAMSCustomerParams,
 signal?: AbortSignal
) => {
        return aMSCustomerAddAMSCustomer(
          {url: `/api/AMSCustomer/AddAMSCustomer`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getAMSCustomerAddAMSCustomerQueryKey = (params?: AMSCustomerAddAMSCustomerParams,) => {
    return [`/api/AMSCustomer/AddAMSCustomer`, ...(params ? [params]: [])] as const;
    }

    
export const useAMSCustomerAddAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerAddAMSCustomerHook>>>, TError = unknown>(params?: AMSCustomerAddAMSCustomerParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerAddAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerAddAMSCustomerQueryKey(params);

  const aMSCustomerAddAMSCustomer =  useAMSCustomerAddAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerAddAMSCustomerHook>>>> = ({ signal }) => aMSCustomerAddAMSCustomer(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerAddAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerAddAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerAddAMSCustomerHook>>>>
export type AMSCustomerAddAMSCustomerQueryError = unknown

export const useAMSCustomerAddAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerAddAMSCustomerHook>>>, TError = unknown>(
 params?: AMSCustomerAddAMSCustomerParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerAddAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerAddAMSCustomerQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetActivityAMSCustomerHook = () => {
        const aMSCustomerGetActivityAMSCustomer = useCustomInstance<DomainModelModelAMSActivities[]>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetActivityAMSCustomer(
          {url: `/api/AMSCustomer/${customerId}/Activities`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetActivityAMSCustomerQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/${customerId}/Activities`] as const;
    }

    
export const useAMSCustomerGetActivityAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetActivityAMSCustomerHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetActivityAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetActivityAMSCustomerQueryKey(customerId);

  const aMSCustomerGetActivityAMSCustomer =  useAMSCustomerGetActivityAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetActivityAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetActivityAMSCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetActivityAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetActivityAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetActivityAMSCustomerHook>>>>
export type AMSCustomerGetActivityAMSCustomerQueryError = unknown

export const useAMSCustomerGetActivityAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetActivityAMSCustomerHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetActivityAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetActivityAMSCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetActivityGroupsAMSCustomerHook = () => {
        const aMSCustomerGetActivityGroupsAMSCustomer = useCustomInstance<DomainModelModelAMSActivityGroup[]>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetActivityGroupsAMSCustomer(
          {url: `/api/AMSCustomer/${customerId}/ActivityGroups`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetActivityGroupsAMSCustomerQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/${customerId}/ActivityGroups`] as const;
    }

    
export const useAMSCustomerGetActivityGroupsAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetActivityGroupsAMSCustomerHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetActivityGroupsAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetActivityGroupsAMSCustomerQueryKey(customerId);

  const aMSCustomerGetActivityGroupsAMSCustomer =  useAMSCustomerGetActivityGroupsAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetActivityGroupsAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetActivityGroupsAMSCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetActivityGroupsAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetActivityGroupsAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetActivityGroupsAMSCustomerHook>>>>
export type AMSCustomerGetActivityGroupsAMSCustomerQueryError = unknown

export const useAMSCustomerGetActivityGroupsAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetActivityGroupsAMSCustomerHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetActivityGroupsAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetActivityGroupsAMSCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetActivityGroupTypesAMSCustomerHook = () => {
        const aMSCustomerGetActivityGroupTypesAMSCustomer = useCustomInstance<DomainModelModelAMSActivityGroupTypes[]>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetActivityGroupTypesAMSCustomer(
          {url: `/api/AMSCustomer/${customerId}/ActivityGroupTypes`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetActivityGroupTypesAMSCustomerQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/${customerId}/ActivityGroupTypes`] as const;
    }

    
export const useAMSCustomerGetActivityGroupTypesAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetActivityGroupTypesAMSCustomerHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetActivityGroupTypesAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetActivityGroupTypesAMSCustomerQueryKey(customerId);

  const aMSCustomerGetActivityGroupTypesAMSCustomer =  useAMSCustomerGetActivityGroupTypesAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetActivityGroupTypesAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetActivityGroupTypesAMSCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetActivityGroupTypesAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetActivityGroupTypesAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetActivityGroupTypesAMSCustomerHook>>>>
export type AMSCustomerGetActivityGroupTypesAMSCustomerQueryError = unknown

export const useAMSCustomerGetActivityGroupTypesAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetActivityGroupTypesAMSCustomerHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetActivityGroupTypesAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetActivityGroupTypesAMSCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetAssignedEmployeessAMSCustomerHook = () => {
        const aMSCustomerGetAssignedEmployeessAMSCustomer = useCustomInstance<DomainModelModelAMSAssignedEmployees[]>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetAssignedEmployeessAMSCustomer(
          {url: `/api/AMSCustomer/${customerId}/AssignedEmployees`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetAssignedEmployeessAMSCustomerQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/${customerId}/AssignedEmployees`] as const;
    }

    
export const useAMSCustomerGetAssignedEmployeessAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetAssignedEmployeessAMSCustomerHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetAssignedEmployeessAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetAssignedEmployeessAMSCustomerQueryKey(customerId);

  const aMSCustomerGetAssignedEmployeessAMSCustomer =  useAMSCustomerGetAssignedEmployeessAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetAssignedEmployeessAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetAssignedEmployeessAMSCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetAssignedEmployeessAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetAssignedEmployeessAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetAssignedEmployeessAMSCustomerHook>>>>
export type AMSCustomerGetAssignedEmployeessAMSCustomerQueryError = unknown

export const useAMSCustomerGetAssignedEmployeessAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetAssignedEmployeessAMSCustomerHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetAssignedEmployeessAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetAssignedEmployeessAMSCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetClaimsAMSCustomerHook = () => {
        const aMSCustomerGetClaimsAMSCustomer = useCustomInstance<DomainModelModelAMSClaims[]>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetClaimsAMSCustomer(
          {url: `/api/AMSCustomer/${customerId}/Claims`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetClaimsAMSCustomerQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/${customerId}/Claims`] as const;
    }

    
export const useAMSCustomerGetClaimsAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetClaimsAMSCustomerHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetClaimsAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetClaimsAMSCustomerQueryKey(customerId);

  const aMSCustomerGetClaimsAMSCustomer =  useAMSCustomerGetClaimsAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetClaimsAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetClaimsAMSCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetClaimsAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetClaimsAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetClaimsAMSCustomerHook>>>>
export type AMSCustomerGetClaimsAMSCustomerQueryError = unknown

export const useAMSCustomerGetClaimsAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetClaimsAMSCustomerHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetClaimsAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetClaimsAMSCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetCustomerBenefitInfoAMSCustomerHook = () => {
        const aMSCustomerGetCustomerBenefitInfoAMSCustomer = useCustomInstance<DomainModelModelAMSCustomerBenefitInfo[]>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetCustomerBenefitInfoAMSCustomer(
          {url: `/api/AMSCustomer/${customerId}/CustomerBenefitInfo`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetCustomerBenefitInfoAMSCustomerQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/${customerId}/CustomerBenefitInfo`] as const;
    }

    
export const useAMSCustomerGetCustomerBenefitInfoAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerBenefitInfoAMSCustomerHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerBenefitInfoAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetCustomerBenefitInfoAMSCustomerQueryKey(customerId);

  const aMSCustomerGetCustomerBenefitInfoAMSCustomer =  useAMSCustomerGetCustomerBenefitInfoAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerBenefitInfoAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetCustomerBenefitInfoAMSCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerBenefitInfoAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetCustomerBenefitInfoAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerBenefitInfoAMSCustomerHook>>>>
export type AMSCustomerGetCustomerBenefitInfoAMSCustomerQueryError = unknown

export const useAMSCustomerGetCustomerBenefitInfoAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerBenefitInfoAMSCustomerHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerBenefitInfoAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetCustomerBenefitInfoAMSCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetCustomerContactsAMSCustomerHook = () => {
        const aMSCustomerGetCustomerContactsAMSCustomer = useCustomInstance<DomainModelModelAMSCustomerContacts[]>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetCustomerContactsAMSCustomer(
          {url: `/api/AMSCustomer/${customerId}/CustomerContacts`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetCustomerContactsAMSCustomerQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/${customerId}/CustomerContacts`] as const;
    }

    
export const useAMSCustomerGetCustomerContactsAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerContactsAMSCustomerHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerContactsAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetCustomerContactsAMSCustomerQueryKey(customerId);

  const aMSCustomerGetCustomerContactsAMSCustomer =  useAMSCustomerGetCustomerContactsAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerContactsAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetCustomerContactsAMSCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerContactsAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetCustomerContactsAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerContactsAMSCustomerHook>>>>
export type AMSCustomerGetCustomerContactsAMSCustomerQueryError = unknown

export const useAMSCustomerGetCustomerContactsAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerContactsAMSCustomerHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerContactsAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetCustomerContactsAMSCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetCustomerLossHistoryAMSCustomerHook = () => {
        const aMSCustomerGetCustomerLossHistoryAMSCustomer = useCustomInstance<DomainModelModelAMSCustomerLossHistory[]>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetCustomerLossHistoryAMSCustomer(
          {url: `/api/AMSCustomer/${customerId}/CustomerLossHistory`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetCustomerLossHistoryAMSCustomerQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/${customerId}/CustomerLossHistory`] as const;
    }

    
export const useAMSCustomerGetCustomerLossHistoryAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerLossHistoryAMSCustomerHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerLossHistoryAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetCustomerLossHistoryAMSCustomerQueryKey(customerId);

  const aMSCustomerGetCustomerLossHistoryAMSCustomer =  useAMSCustomerGetCustomerLossHistoryAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerLossHistoryAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetCustomerLossHistoryAMSCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerLossHistoryAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetCustomerLossHistoryAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerLossHistoryAMSCustomerHook>>>>
export type AMSCustomerGetCustomerLossHistoryAMSCustomerQueryError = unknown

export const useAMSCustomerGetCustomerLossHistoryAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerLossHistoryAMSCustomerHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerLossHistoryAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetCustomerLossHistoryAMSCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetCustomerServicePersonnelsAMSCustomerHook = () => {
        const aMSCustomerGetCustomerServicePersonnelsAMSCustomer = useCustomInstance<DomainModelModelAMSCustomerServicePersonnels[]>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetCustomerServicePersonnelsAMSCustomer(
          {url: `/api/AMSCustomer/${customerId}/CustomerServicePersonnels`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetCustomerServicePersonnelsAMSCustomerQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/${customerId}/CustomerServicePersonnels`] as const;
    }

    
export const useAMSCustomerGetCustomerServicePersonnelsAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerServicePersonnelsAMSCustomerHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerServicePersonnelsAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetCustomerServicePersonnelsAMSCustomerQueryKey(customerId);

  const aMSCustomerGetCustomerServicePersonnelsAMSCustomer =  useAMSCustomerGetCustomerServicePersonnelsAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerServicePersonnelsAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetCustomerServicePersonnelsAMSCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerServicePersonnelsAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetCustomerServicePersonnelsAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerServicePersonnelsAMSCustomerHook>>>>
export type AMSCustomerGetCustomerServicePersonnelsAMSCustomerQueryError = unknown

export const useAMSCustomerGetCustomerServicePersonnelsAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerServicePersonnelsAMSCustomerHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerServicePersonnelsAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetCustomerServicePersonnelsAMSCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetCustomerXDatesAMSCustomerHook = () => {
        const aMSCustomerGetCustomerXDatesAMSCustomer = useCustomInstance<DomainModelModelAMSCustomerXDates[]>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetCustomerXDatesAMSCustomer(
          {url: `/api/AMSCustomer/${customerId}/CustomerXDates`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetCustomerXDatesAMSCustomerQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/${customerId}/CustomerXDates`] as const;
    }

    
export const useAMSCustomerGetCustomerXDatesAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerXDatesAMSCustomerHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerXDatesAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetCustomerXDatesAMSCustomerQueryKey(customerId);

  const aMSCustomerGetCustomerXDatesAMSCustomer =  useAMSCustomerGetCustomerXDatesAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerXDatesAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetCustomerXDatesAMSCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerXDatesAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetCustomerXDatesAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerXDatesAMSCustomerHook>>>>
export type AMSCustomerGetCustomerXDatesAMSCustomerQueryError = unknown

export const useAMSCustomerGetCustomerXDatesAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerXDatesAMSCustomerHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerXDatesAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetCustomerXDatesAMSCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetCustomerXReferencesAMSCustomerHook = () => {
        const aMSCustomerGetCustomerXReferencesAMSCustomer = useCustomInstance<DomainModelModelAMSCustomerXReferences[]>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetCustomerXReferencesAMSCustomer(
          {url: `/api/AMSCustomer/${customerId}/CustomerXReferences`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetCustomerXReferencesAMSCustomerQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/${customerId}/CustomerXReferences`] as const;
    }

    
export const useAMSCustomerGetCustomerXReferencesAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerXReferencesAMSCustomerHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerXReferencesAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetCustomerXReferencesAMSCustomerQueryKey(customerId);

  const aMSCustomerGetCustomerXReferencesAMSCustomer =  useAMSCustomerGetCustomerXReferencesAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerXReferencesAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetCustomerXReferencesAMSCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerXReferencesAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetCustomerXReferencesAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerXReferencesAMSCustomerHook>>>>
export type AMSCustomerGetCustomerXReferencesAMSCustomerQueryError = unknown

export const useAMSCustomerGetCustomerXReferencesAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerXReferencesAMSCustomerHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomerXReferencesAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetCustomerXReferencesAMSCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetDependentsAMSCustomerHook = () => {
        const aMSCustomerGetDependentsAMSCustomer = useCustomInstance<DomainModelModelAMSDependents[]>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetDependentsAMSCustomer(
          {url: `/api/AMSCustomer/${customerId}/Dependents`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetDependentsAMSCustomerQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/${customerId}/Dependents`] as const;
    }

    
export const useAMSCustomerGetDependentsAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetDependentsAMSCustomerHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetDependentsAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetDependentsAMSCustomerQueryKey(customerId);

  const aMSCustomerGetDependentsAMSCustomer =  useAMSCustomerGetDependentsAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetDependentsAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetDependentsAMSCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetDependentsAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetDependentsAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetDependentsAMSCustomerHook>>>>
export type AMSCustomerGetDependentsAMSCustomerQueryError = unknown

export const useAMSCustomerGetDependentsAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetDependentsAMSCustomerHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetDependentsAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetDependentsAMSCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetDocumentsAMSCustomerHook = () => {
        const aMSCustomerGetDocumentsAMSCustomer = useCustomInstance<DomainModelModelAMSDocuments[]>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetDocumentsAMSCustomer(
          {url: `/api/AMSCustomer/${customerId}/Documents`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetDocumentsAMSCustomerQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/${customerId}/Documents`] as const;
    }

    
export const useAMSCustomerGetDocumentsAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetDocumentsAMSCustomerHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetDocumentsAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetDocumentsAMSCustomerQueryKey(customerId);

  const aMSCustomerGetDocumentsAMSCustomer =  useAMSCustomerGetDocumentsAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetDocumentsAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetDocumentsAMSCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetDocumentsAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetDocumentsAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetDocumentsAMSCustomerHook>>>>
export type AMSCustomerGetDocumentsAMSCustomerQueryError = unknown

export const useAMSCustomerGetDocumentsAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetDocumentsAMSCustomerHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetDocumentsAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetDocumentsAMSCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetEPIMasterFormsAMSCustomerHook = () => {
        const aMSCustomerGetEPIMasterFormsAMSCustomer = useCustomInstance<DomainModelAMSModelAMSEPIMasterForms[]>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetEPIMasterFormsAMSCustomer(
          {url: `/api/AMSCustomer/${customerId}/EPIMasterForms`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetEPIMasterFormsAMSCustomerQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/${customerId}/EPIMasterForms`] as const;
    }

    
export const useAMSCustomerGetEPIMasterFormsAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetEPIMasterFormsAMSCustomerHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetEPIMasterFormsAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetEPIMasterFormsAMSCustomerQueryKey(customerId);

  const aMSCustomerGetEPIMasterFormsAMSCustomer =  useAMSCustomerGetEPIMasterFormsAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetEPIMasterFormsAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetEPIMasterFormsAMSCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetEPIMasterFormsAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetEPIMasterFormsAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetEPIMasterFormsAMSCustomerHook>>>>
export type AMSCustomerGetEPIMasterFormsAMSCustomerQueryError = unknown

export const useAMSCustomerGetEPIMasterFormsAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetEPIMasterFormsAMSCustomerHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetEPIMasterFormsAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetEPIMasterFormsAMSCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetInvoicesAMSCustomerHook = () => {
        const aMSCustomerGetInvoicesAMSCustomer = useCustomInstance<DomainModelAMSModelAMSInvoices[]>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetInvoicesAMSCustomer(
          {url: `/api/AMSCustomer/${customerId}/Invoices`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetInvoicesAMSCustomerQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/${customerId}/Invoices`] as const;
    }

    
export const useAMSCustomerGetInvoicesAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetInvoicesAMSCustomerHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetInvoicesAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetInvoicesAMSCustomerQueryKey(customerId);

  const aMSCustomerGetInvoicesAMSCustomer =  useAMSCustomerGetInvoicesAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetInvoicesAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetInvoicesAMSCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetInvoicesAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetInvoicesAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetInvoicesAMSCustomerHook>>>>
export type AMSCustomerGetInvoicesAMSCustomerQueryError = unknown

export const useAMSCustomerGetInvoicesAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetInvoicesAMSCustomerHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetInvoicesAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetInvoicesAMSCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetNotesAMSCustomerHook = () => {
        const aMSCustomerGetNotesAMSCustomer = useCustomInstance<DomainModelAMSModelAMSNotes[]>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetNotesAMSCustomer(
          {url: `/api/AMSCustomer/${customerId}/Notes`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetNotesAMSCustomerQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/${customerId}/Notes`] as const;
    }

    
export const useAMSCustomerGetNotesAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetNotesAMSCustomerHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetNotesAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetNotesAMSCustomerQueryKey(customerId);

  const aMSCustomerGetNotesAMSCustomer =  useAMSCustomerGetNotesAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetNotesAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetNotesAMSCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetNotesAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetNotesAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetNotesAMSCustomerHook>>>>
export type AMSCustomerGetNotesAMSCustomerQueryError = unknown

export const useAMSCustomerGetNotesAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetNotesAMSCustomerHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetNotesAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetNotesAMSCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetPoliciesAMSCustomerHook = () => {
        const aMSCustomerGetPoliciesAMSCustomer = useCustomInstance<DomainModelAMSModelAMSPolicies[]>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetPoliciesAMSCustomer(
          {url: `/api/AMSCustomer/${customerId}/Policies`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetPoliciesAMSCustomerQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/${customerId}/Policies`] as const;
    }

    
export const useAMSCustomerGetPoliciesAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPoliciesAMSCustomerHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPoliciesAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetPoliciesAMSCustomerQueryKey(customerId);

  const aMSCustomerGetPoliciesAMSCustomer =  useAMSCustomerGetPoliciesAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPoliciesAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetPoliciesAMSCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPoliciesAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetPoliciesAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPoliciesAMSCustomerHook>>>>
export type AMSCustomerGetPoliciesAMSCustomerQueryError = unknown

export const useAMSCustomerGetPoliciesAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPoliciesAMSCustomerHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPoliciesAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetPoliciesAMSCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetPolicyLOBAMSCustomerHook = () => {
        const aMSCustomerGetPolicyLOBAMSCustomer = useCustomInstance<DomainModelAMSModelAMSPolicyLOB[]>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetPolicyLOBAMSCustomer(
          {url: `/api/AMSCustomer/${customerId}/PolicyLOB`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetPolicyLOBAMSCustomerQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/${customerId}/PolicyLOB`] as const;
    }

    
export const useAMSCustomerGetPolicyLOBAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicyLOBAMSCustomerHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicyLOBAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetPolicyLOBAMSCustomerQueryKey(customerId);

  const aMSCustomerGetPolicyLOBAMSCustomer =  useAMSCustomerGetPolicyLOBAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicyLOBAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetPolicyLOBAMSCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicyLOBAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetPolicyLOBAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicyLOBAMSCustomerHook>>>>
export type AMSCustomerGetPolicyLOBAMSCustomerQueryError = unknown

export const useAMSCustomerGetPolicyLOBAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicyLOBAMSCustomerHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicyLOBAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetPolicyLOBAMSCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetPolicySubmissionsAMSCustomerHook = () => {
        const aMSCustomerGetPolicySubmissionsAMSCustomer = useCustomInstance<DomainModelAMSModelAMSPolicySubmissions[]>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetPolicySubmissionsAMSCustomer(
          {url: `/api/AMSCustomer/${customerId}/PolicySubmissions`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetPolicySubmissionsAMSCustomerQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/${customerId}/PolicySubmissions`] as const;
    }

    
export const useAMSCustomerGetPolicySubmissionsAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicySubmissionsAMSCustomerHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicySubmissionsAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetPolicySubmissionsAMSCustomerQueryKey(customerId);

  const aMSCustomerGetPolicySubmissionsAMSCustomer =  useAMSCustomerGetPolicySubmissionsAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicySubmissionsAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetPolicySubmissionsAMSCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicySubmissionsAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetPolicySubmissionsAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicySubmissionsAMSCustomerHook>>>>
export type AMSCustomerGetPolicySubmissionsAMSCustomerQueryError = unknown

export const useAMSCustomerGetPolicySubmissionsAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicySubmissionsAMSCustomerHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicySubmissionsAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetPolicySubmissionsAMSCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetPolicyTransactionsAMSCustomerHook = () => {
        const aMSCustomerGetPolicyTransactionsAMSCustomer = useCustomInstance<DomainModelAMSModelAMSPolicyTransactions[]>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetPolicyTransactionsAMSCustomer(
          {url: `/api/AMSCustomer/${customerId}/PolicyTransactions`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetPolicyTransactionsAMSCustomerQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/${customerId}/PolicyTransactions`] as const;
    }

    
export const useAMSCustomerGetPolicyTransactionsAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicyTransactionsAMSCustomerHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicyTransactionsAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetPolicyTransactionsAMSCustomerQueryKey(customerId);

  const aMSCustomerGetPolicyTransactionsAMSCustomer =  useAMSCustomerGetPolicyTransactionsAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicyTransactionsAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetPolicyTransactionsAMSCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicyTransactionsAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetPolicyTransactionsAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicyTransactionsAMSCustomerHook>>>>
export type AMSCustomerGetPolicyTransactionsAMSCustomerQueryError = unknown

export const useAMSCustomerGetPolicyTransactionsAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicyTransactionsAMSCustomerHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicyTransactionsAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetPolicyTransactionsAMSCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetProfilesAMSCustomerHook = () => {
        const aMSCustomerGetProfilesAMSCustomer = useCustomInstance<DomainModelAMSModelAMSProfiles[]>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetProfilesAMSCustomer(
          {url: `/api/AMSCustomer/${customerId}/Profiles`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetProfilesAMSCustomerQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/${customerId}/Profiles`] as const;
    }

    
export const useAMSCustomerGetProfilesAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetProfilesAMSCustomerHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetProfilesAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetProfilesAMSCustomerQueryKey(customerId);

  const aMSCustomerGetProfilesAMSCustomer =  useAMSCustomerGetProfilesAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetProfilesAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetProfilesAMSCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetProfilesAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetProfilesAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetProfilesAMSCustomerHook>>>>
export type AMSCustomerGetProfilesAMSCustomerQueryError = unknown

export const useAMSCustomerGetProfilesAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetProfilesAMSCustomerHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetProfilesAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetProfilesAMSCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetSuspensesAMSCustomerHook = () => {
        const aMSCustomerGetSuspensesAMSCustomer = useCustomInstance<DomainModelAMSModelAMSSuspenses[]>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetSuspensesAMSCustomer(
          {url: `/api/AMSCustomer/${customerId}/Suspenses`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetSuspensesAMSCustomerQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/${customerId}/Suspenses`] as const;
    }

    
export const useAMSCustomerGetSuspensesAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetSuspensesAMSCustomerHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetSuspensesAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetSuspensesAMSCustomerQueryKey(customerId);

  const aMSCustomerGetSuspensesAMSCustomer =  useAMSCustomerGetSuspensesAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetSuspensesAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetSuspensesAMSCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetSuspensesAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetSuspensesAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetSuspensesAMSCustomerHook>>>>
export type AMSCustomerGetSuspensesAMSCustomerQueryError = unknown

export const useAMSCustomerGetSuspensesAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetSuspensesAMSCustomerHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetSuspensesAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetSuspensesAMSCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetPolicyPermissionsAMSCustomerHook = () => {
        const aMSCustomerGetPolicyPermissionsAMSCustomer = useCustomInstance<DomainModelAMSModelAMSPolicyPermissions>();

        return (
    customerId: string,
 signal?: AbortSignal
) => {
        return aMSCustomerGetPolicyPermissionsAMSCustomer(
          {url: `/api/AMSCustomer/${customerId}/PolicyPermissions`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetPolicyPermissionsAMSCustomerQueryKey = (customerId: string,) => {
    return [`/api/AMSCustomer/${customerId}/PolicyPermissions`] as const;
    }

    
export const useAMSCustomerGetPolicyPermissionsAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicyPermissionsAMSCustomerHook>>>, TError = unknown>(customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicyPermissionsAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetPolicyPermissionsAMSCustomerQueryKey(customerId);

  const aMSCustomerGetPolicyPermissionsAMSCustomer =  useAMSCustomerGetPolicyPermissionsAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicyPermissionsAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetPolicyPermissionsAMSCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicyPermissionsAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetPolicyPermissionsAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicyPermissionsAMSCustomerHook>>>>
export type AMSCustomerGetPolicyPermissionsAMSCustomerQueryError = unknown

export const useAMSCustomerGetPolicyPermissionsAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicyPermissionsAMSCustomerHook>>>, TError = unknown>(
 customerId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetPolicyPermissionsAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetPolicyPermissionsAMSCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSCustomerGetCustomActionsGetDropdownsAMSCustomerHook = () => {
        const aMSCustomerGetCustomActionsGetDropdownsAMSCustomer = useCustomInstance<DomainModelAMSModelAMSCustomActionsDropDown>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSCustomerGetCustomActionsGetDropdownsAMSCustomer(
          {url: `/api/AMSCustomer/CustomActionsGetDropdowns`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSCustomerGetCustomActionsGetDropdownsAMSCustomerQueryKey = () => {
    return [`/api/AMSCustomer/CustomActionsGetDropdowns`] as const;
    }

    
export const useAMSCustomerGetCustomActionsGetDropdownsAMSCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomActionsGetDropdownsAMSCustomerHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomActionsGetDropdownsAMSCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSCustomerGetCustomActionsGetDropdownsAMSCustomerQueryKey();

  const aMSCustomerGetCustomActionsGetDropdownsAMSCustomer =  useAMSCustomerGetCustomActionsGetDropdownsAMSCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomActionsGetDropdownsAMSCustomerHook>>>> = ({ signal }) => aMSCustomerGetCustomActionsGetDropdownsAMSCustomer(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomActionsGetDropdownsAMSCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSCustomerGetCustomActionsGetDropdownsAMSCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomActionsGetDropdownsAMSCustomerHook>>>>
export type AMSCustomerGetCustomActionsGetDropdownsAMSCustomerQueryError = unknown

export const useAMSCustomerGetCustomActionsGetDropdownsAMSCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomActionsGetDropdownsAMSCustomerHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSCustomerGetCustomActionsGetDropdownsAMSCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSCustomerGetCustomActionsGetDropdownsAMSCustomerQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSEmployeeGetAllHook = () => {
        const aMSEmployeeGetAll = useCustomInstance<DomainModelAMSModelAMSEmployee[]>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSEmployeeGetAll(
          {url: `/api/AMSEmployee/GetAllEmployee`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSEmployeeGetAllQueryKey = () => {
    return [`/api/AMSEmployee/GetAllEmployee`] as const;
    }

    
export const useAMSEmployeeGetAllQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetAllHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetAllHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSEmployeeGetAllQueryKey();

  const aMSEmployeeGetAll =  useAMSEmployeeGetAllHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetAllHook>>>> = ({ signal }) => aMSEmployeeGetAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetAllHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSEmployeeGetAllQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetAllHook>>>>
export type AMSEmployeeGetAllQueryError = unknown

export const useAMSEmployeeGetAll = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetAllHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetAllHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSEmployeeGetAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSEmployeeGetEmployeeByIDHook = () => {
        const aMSEmployeeGetEmployeeByID = useCustomInstance<DomainModelAMSModelAMSEmployee>();

        return (
    employeeID: string,
 signal?: AbortSignal
) => {
        return aMSEmployeeGetEmployeeByID(
          {url: `/api/AMSEmployee/Employee/${employeeID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSEmployeeGetEmployeeByIDQueryKey = (employeeID: string,) => {
    return [`/api/AMSEmployee/Employee/${employeeID}`] as const;
    }

    
export const useAMSEmployeeGetEmployeeByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeByIDHook>>>, TError = unknown>(employeeID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSEmployeeGetEmployeeByIDQueryKey(employeeID);

  const aMSEmployeeGetEmployeeByID =  useAMSEmployeeGetEmployeeByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeByIDHook>>>> = ({ signal }) => aMSEmployeeGetEmployeeByID(employeeID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(employeeID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSEmployeeGetEmployeeByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeByIDHook>>>>
export type AMSEmployeeGetEmployeeByIDQueryError = unknown

export const useAMSEmployeeGetEmployeeByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeByIDHook>>>, TError = unknown>(
 employeeID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSEmployeeGetEmployeeByIDQueryOptions(employeeID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSEmployeeAddEmployeeHook = () => {
        const aMSEmployeeAddEmployee = useCustomInstance<DomainModelAMSModelAMSEmployee>();

        return (
    domainModelAMSModelAMSEmployeeBody: DomainModelAMSModelAMSEmployeeBody,
 ) => {
        return aMSEmployeeAddEmployee(
          {url: `/api/AMSEmployee/Employee`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelAMSModelAMSEmployeeBody
    },
          );
        }
      }
    


export const useAMSEmployeeAddEmployeeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeAddEmployeeHook>>>, TError,{data: DomainModelAMSModelAMSEmployeeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeAddEmployeeHook>>>, TError,{data: DomainModelAMSModelAMSEmployeeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const aMSEmployeeAddEmployee =  useAMSEmployeeAddEmployeeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeAddEmployeeHook>>>, {data: DomainModelAMSModelAMSEmployeeBody}> = (props) => {
          const {data} = props ?? {};

          return  aMSEmployeeAddEmployee(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AMSEmployeeAddEmployeeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeAddEmployeeHook>>>>
    export type AMSEmployeeAddEmployeeMutationBody = DomainModelAMSModelAMSEmployeeBody
    export type AMSEmployeeAddEmployeeMutationError = unknown

    export const useAMSEmployeeAddEmployee = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeAddEmployeeHook>>>, TError,{data: DomainModelAMSModelAMSEmployeeBody}, TContext>, }
) => {

      const mutationOptions = useAMSEmployeeAddEmployeeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAMSEmployeeUpdateEmployeeHook = () => {
        const aMSEmployeeUpdateEmployee = useCustomInstance<boolean>();

        return (
    domainModelAMSModelAMSEmployeeBody: DomainModelAMSModelAMSEmployeeBody,
 ) => {
        return aMSEmployeeUpdateEmployee(
          {url: `/api/AMSEmployee/EditEmployee`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelAMSModelAMSEmployeeBody
    },
          );
        }
      }
    


export const useAMSEmployeeUpdateEmployeeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeUpdateEmployeeHook>>>, TError,{data: DomainModelAMSModelAMSEmployeeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeUpdateEmployeeHook>>>, TError,{data: DomainModelAMSModelAMSEmployeeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const aMSEmployeeUpdateEmployee =  useAMSEmployeeUpdateEmployeeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeUpdateEmployeeHook>>>, {data: DomainModelAMSModelAMSEmployeeBody}> = (props) => {
          const {data} = props ?? {};

          return  aMSEmployeeUpdateEmployee(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AMSEmployeeUpdateEmployeeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeUpdateEmployeeHook>>>>
    export type AMSEmployeeUpdateEmployeeMutationBody = DomainModelAMSModelAMSEmployeeBody
    export type AMSEmployeeUpdateEmployeeMutationError = unknown

    export const useAMSEmployeeUpdateEmployee = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeUpdateEmployeeHook>>>, TError,{data: DomainModelAMSModelAMSEmployeeBody}, TContext>, }
) => {

      const mutationOptions = useAMSEmployeeUpdateEmployeeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAMSEmployeeGetDocumentHook = () => {
        const aMSEmployeeGetDocument = useCustomInstance<DomainModelAMSModelAMSEmployeeDocuments[]>();

        return (
    employeeHasCode: string,
 signal?: AbortSignal
) => {
        return aMSEmployeeGetDocument(
          {url: `/api/AMSEmployee/GetDocument/${employeeHasCode}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSEmployeeGetDocumentQueryKey = (employeeHasCode: string,) => {
    return [`/api/AMSEmployee/GetDocument/${employeeHasCode}`] as const;
    }

    
export const useAMSEmployeeGetDocumentQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetDocumentHook>>>, TError = unknown>(employeeHasCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetDocumentHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSEmployeeGetDocumentQueryKey(employeeHasCode);

  const aMSEmployeeGetDocument =  useAMSEmployeeGetDocumentHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetDocumentHook>>>> = ({ signal }) => aMSEmployeeGetDocument(employeeHasCode, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(employeeHasCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetDocumentHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSEmployeeGetDocumentQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetDocumentHook>>>>
export type AMSEmployeeGetDocumentQueryError = unknown

export const useAMSEmployeeGetDocument = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetDocumentHook>>>, TError = unknown>(
 employeeHasCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetDocumentHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSEmployeeGetDocumentQueryOptions(employeeHasCode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSEmployeeGetEmployeeExpiringPoliciesHook = () => {
        const aMSEmployeeGetEmployeeExpiringPolicies = useCustomInstance<DomainModelAMSModelAMSEmployeeExpiringPolicies[]>();

        return (
    employeeHasCode: string,
 signal?: AbortSignal
) => {
        return aMSEmployeeGetEmployeeExpiringPolicies(
          {url: `/api/AMSEmployee/EmployeeExpiringPolicies/${employeeHasCode}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSEmployeeGetEmployeeExpiringPoliciesQueryKey = (employeeHasCode: string,) => {
    return [`/api/AMSEmployee/EmployeeExpiringPolicies/${employeeHasCode}`] as const;
    }

    
export const useAMSEmployeeGetEmployeeExpiringPoliciesQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeExpiringPoliciesHook>>>, TError = unknown>(employeeHasCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeExpiringPoliciesHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSEmployeeGetEmployeeExpiringPoliciesQueryKey(employeeHasCode);

  const aMSEmployeeGetEmployeeExpiringPolicies =  useAMSEmployeeGetEmployeeExpiringPoliciesHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeExpiringPoliciesHook>>>> = ({ signal }) => aMSEmployeeGetEmployeeExpiringPolicies(employeeHasCode, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(employeeHasCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeExpiringPoliciesHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSEmployeeGetEmployeeExpiringPoliciesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeExpiringPoliciesHook>>>>
export type AMSEmployeeGetEmployeeExpiringPoliciesQueryError = unknown

export const useAMSEmployeeGetEmployeeExpiringPolicies = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeExpiringPoliciesHook>>>, TError = unknown>(
 employeeHasCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeExpiringPoliciesHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSEmployeeGetEmployeeExpiringPoliciesQueryOptions(employeeHasCode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSEmployeeGetEmployeeLoginTimeHook = () => {
        const aMSEmployeeGetEmployeeLoginTime = useCustomInstance<DomainModelAMSModelAMSEmployeeLoginTime[]>();

        return (
    employeeHasCode: string,
 signal?: AbortSignal
) => {
        return aMSEmployeeGetEmployeeLoginTime(
          {url: `/api/AMSEmployee/EmployeeLoginTime/${employeeHasCode}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSEmployeeGetEmployeeLoginTimeQueryKey = (employeeHasCode: string,) => {
    return [`/api/AMSEmployee/EmployeeLoginTime/${employeeHasCode}`] as const;
    }

    
export const useAMSEmployeeGetEmployeeLoginTimeQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeLoginTimeHook>>>, TError = unknown>(employeeHasCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeLoginTimeHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSEmployeeGetEmployeeLoginTimeQueryKey(employeeHasCode);

  const aMSEmployeeGetEmployeeLoginTime =  useAMSEmployeeGetEmployeeLoginTimeHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeLoginTimeHook>>>> = ({ signal }) => aMSEmployeeGetEmployeeLoginTime(employeeHasCode, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(employeeHasCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeLoginTimeHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSEmployeeGetEmployeeLoginTimeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeLoginTimeHook>>>>
export type AMSEmployeeGetEmployeeLoginTimeQueryError = unknown

export const useAMSEmployeeGetEmployeeLoginTime = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeLoginTimeHook>>>, TError = unknown>(
 employeeHasCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeLoginTimeHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSEmployeeGetEmployeeLoginTimeQueryOptions(employeeHasCode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSEmployeeGetEmployeeloginTimeHook = () => {
        const aMSEmployeeGetEmployeeloginTime = useCustomInstance<DomainModelAMSModelAMSEmployeeLoginTime>();

        return (
    authorizedLoginTimeId: string,
    employeeCode: string,
 signal?: AbortSignal
) => {
        return aMSEmployeeGetEmployeeloginTime(
          {url: `/api/AMSEmployee/GetEmployeeloginTime/${authorizedLoginTimeId}/${employeeCode}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSEmployeeGetEmployeeloginTimeQueryKey = (authorizedLoginTimeId: string,
    employeeCode: string,) => {
    return [`/api/AMSEmployee/GetEmployeeloginTime/${authorizedLoginTimeId}/${employeeCode}`] as const;
    }

    
export const useAMSEmployeeGetEmployeeloginTimeQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeloginTimeHook>>>, TError = unknown>(authorizedLoginTimeId: string,
    employeeCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeloginTimeHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSEmployeeGetEmployeeloginTimeQueryKey(authorizedLoginTimeId,employeeCode);

  const aMSEmployeeGetEmployeeloginTime =  useAMSEmployeeGetEmployeeloginTimeHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeloginTimeHook>>>> = ({ signal }) => aMSEmployeeGetEmployeeloginTime(authorizedLoginTimeId,employeeCode, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(authorizedLoginTimeId && employeeCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeloginTimeHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSEmployeeGetEmployeeloginTimeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeloginTimeHook>>>>
export type AMSEmployeeGetEmployeeloginTimeQueryError = unknown

export const useAMSEmployeeGetEmployeeloginTime = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeloginTimeHook>>>, TError = unknown>(
 authorizedLoginTimeId: string,
    employeeCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeloginTimeHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSEmployeeGetEmployeeloginTimeQueryOptions(authorizedLoginTimeId,employeeCode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSEmployeeGetEmployeeLosPoliciesHook = () => {
        const aMSEmployeeGetEmployeeLosPolicies = useCustomInstance<DomainModelAMSModelAMSEmployeeLosPolicies[]>();

        return (
    employeeHasCode: string,
 signal?: AbortSignal
) => {
        return aMSEmployeeGetEmployeeLosPolicies(
          {url: `/api/AMSEmployee/EmployeeLosPolicies/${employeeHasCode}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSEmployeeGetEmployeeLosPoliciesQueryKey = (employeeHasCode: string,) => {
    return [`/api/AMSEmployee/EmployeeLosPolicies/${employeeHasCode}`] as const;
    }

    
export const useAMSEmployeeGetEmployeeLosPoliciesQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeLosPoliciesHook>>>, TError = unknown>(employeeHasCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeLosPoliciesHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSEmployeeGetEmployeeLosPoliciesQueryKey(employeeHasCode);

  const aMSEmployeeGetEmployeeLosPolicies =  useAMSEmployeeGetEmployeeLosPoliciesHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeLosPoliciesHook>>>> = ({ signal }) => aMSEmployeeGetEmployeeLosPolicies(employeeHasCode, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(employeeHasCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeLosPoliciesHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSEmployeeGetEmployeeLosPoliciesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeLosPoliciesHook>>>>
export type AMSEmployeeGetEmployeeLosPoliciesQueryError = unknown

export const useAMSEmployeeGetEmployeeLosPolicies = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeLosPoliciesHook>>>, TError = unknown>(
 employeeHasCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeLosPoliciesHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSEmployeeGetEmployeeLosPoliciesQueryOptions(employeeHasCode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSEmployeeGetEmployeeNotesHook = () => {
        const aMSEmployeeGetEmployeeNotes = useCustomInstance<DomainModelAMSModelAMSEmployeeNotes[]>();

        return (
    employeeHasCode: string,
 signal?: AbortSignal
) => {
        return aMSEmployeeGetEmployeeNotes(
          {url: `/api/AMSEmployee/EmployeeNotes/${employeeHasCode}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSEmployeeGetEmployeeNotesQueryKey = (employeeHasCode: string,) => {
    return [`/api/AMSEmployee/EmployeeNotes/${employeeHasCode}`] as const;
    }

    
export const useAMSEmployeeGetEmployeeNotesQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeNotesHook>>>, TError = unknown>(employeeHasCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeNotesHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSEmployeeGetEmployeeNotesQueryKey(employeeHasCode);

  const aMSEmployeeGetEmployeeNotes =  useAMSEmployeeGetEmployeeNotesHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeNotesHook>>>> = ({ signal }) => aMSEmployeeGetEmployeeNotes(employeeHasCode, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(employeeHasCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeNotesHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSEmployeeGetEmployeeNotesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeNotesHook>>>>
export type AMSEmployeeGetEmployeeNotesQueryError = unknown

export const useAMSEmployeeGetEmployeeNotes = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeNotesHook>>>, TError = unknown>(
 employeeHasCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeNotesHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSEmployeeGetEmployeeNotesQueryOptions(employeeHasCode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSEmployeeGetEmployeePendingPolicyCanclellationsHook = () => {
        const aMSEmployeeGetEmployeePendingPolicyCanclellations = useCustomInstance<DomainModelAMSModelAMSEmployeePendingpolicyCanclellation[]>();

        return (
    employeeHasCode: string,
 signal?: AbortSignal
) => {
        return aMSEmployeeGetEmployeePendingPolicyCanclellations(
          {url: `/api/AMSEmployee/EmployeePendingPolicies/${employeeHasCode}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSEmployeeGetEmployeePendingPolicyCanclellationsQueryKey = (employeeHasCode: string,) => {
    return [`/api/AMSEmployee/EmployeePendingPolicies/${employeeHasCode}`] as const;
    }

    
export const useAMSEmployeeGetEmployeePendingPolicyCanclellationsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeePendingPolicyCanclellationsHook>>>, TError = unknown>(employeeHasCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeePendingPolicyCanclellationsHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSEmployeeGetEmployeePendingPolicyCanclellationsQueryKey(employeeHasCode);

  const aMSEmployeeGetEmployeePendingPolicyCanclellations =  useAMSEmployeeGetEmployeePendingPolicyCanclellationsHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeePendingPolicyCanclellationsHook>>>> = ({ signal }) => aMSEmployeeGetEmployeePendingPolicyCanclellations(employeeHasCode, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(employeeHasCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeePendingPolicyCanclellationsHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSEmployeeGetEmployeePendingPolicyCanclellationsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeePendingPolicyCanclellationsHook>>>>
export type AMSEmployeeGetEmployeePendingPolicyCanclellationsQueryError = unknown

export const useAMSEmployeeGetEmployeePendingPolicyCanclellations = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeePendingPolicyCanclellationsHook>>>, TError = unknown>(
 employeeHasCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeePendingPolicyCanclellationsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSEmployeeGetEmployeePendingPolicyCanclellationsQueryOptions(employeeHasCode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSEmployeeGetAllEmployeeHook = () => {
        const aMSEmployeeGetAllEmployee = useCustomInstance<DomainModelAMSModelAMSEmployeeActionDropDown>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSEmployeeGetAllEmployee(
          {url: `/api/AMSEmployee/GetAllEmployeeAction`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSEmployeeGetAllEmployeeQueryKey = () => {
    return [`/api/AMSEmployee/GetAllEmployeeAction`] as const;
    }

    
export const useAMSEmployeeGetAllEmployeeQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetAllEmployeeHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetAllEmployeeHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSEmployeeGetAllEmployeeQueryKey();

  const aMSEmployeeGetAllEmployee =  useAMSEmployeeGetAllEmployeeHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetAllEmployeeHook>>>> = ({ signal }) => aMSEmployeeGetAllEmployee(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetAllEmployeeHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSEmployeeGetAllEmployeeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetAllEmployeeHook>>>>
export type AMSEmployeeGetAllEmployeeQueryError = unknown

export const useAMSEmployeeGetAllEmployee = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetAllEmployeeHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetAllEmployeeHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSEmployeeGetAllEmployeeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSEmployeeGetEmployeeRenewlistHook = () => {
        const aMSEmployeeGetEmployeeRenewlist = useCustomInstance<DomainModelAMSModelAMSEmployeeRenewList[]>();

        return (
    employeeHasCode: string,
 signal?: AbortSignal
) => {
        return aMSEmployeeGetEmployeeRenewlist(
          {url: `/api/AMSEmployee/EmployeeRenewalList/${employeeHasCode}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSEmployeeGetEmployeeRenewlistQueryKey = (employeeHasCode: string,) => {
    return [`/api/AMSEmployee/EmployeeRenewalList/${employeeHasCode}`] as const;
    }

    
export const useAMSEmployeeGetEmployeeRenewlistQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeRenewlistHook>>>, TError = unknown>(employeeHasCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeRenewlistHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSEmployeeGetEmployeeRenewlistQueryKey(employeeHasCode);

  const aMSEmployeeGetEmployeeRenewlist =  useAMSEmployeeGetEmployeeRenewlistHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeRenewlistHook>>>> = ({ signal }) => aMSEmployeeGetEmployeeRenewlist(employeeHasCode, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(employeeHasCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeRenewlistHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSEmployeeGetEmployeeRenewlistQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeRenewlistHook>>>>
export type AMSEmployeeGetEmployeeRenewlistQueryError = unknown

export const useAMSEmployeeGetEmployeeRenewlist = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeRenewlistHook>>>, TError = unknown>(
 employeeHasCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeRenewlistHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSEmployeeGetEmployeeRenewlistQueryOptions(employeeHasCode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSEmployeeGetEmployeeRenewalHook = () => {
        const aMSEmployeeGetEmployeeRenewal = useCustomInstance<DomainModelAMSModelAMSEmployeeRenewal[]>();

        return (
    employeeHasCode: string,
 signal?: AbortSignal
) => {
        return aMSEmployeeGetEmployeeRenewal(
          {url: `/api/AMSEmployee/EmployeeRenewal/${employeeHasCode}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSEmployeeGetEmployeeRenewalQueryKey = (employeeHasCode: string,) => {
    return [`/api/AMSEmployee/EmployeeRenewal/${employeeHasCode}`] as const;
    }

    
export const useAMSEmployeeGetEmployeeRenewalQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeRenewalHook>>>, TError = unknown>(employeeHasCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeRenewalHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSEmployeeGetEmployeeRenewalQueryKey(employeeHasCode);

  const aMSEmployeeGetEmployeeRenewal =  useAMSEmployeeGetEmployeeRenewalHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeRenewalHook>>>> = ({ signal }) => aMSEmployeeGetEmployeeRenewal(employeeHasCode, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(employeeHasCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeRenewalHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSEmployeeGetEmployeeRenewalQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeRenewalHook>>>>
export type AMSEmployeeGetEmployeeRenewalQueryError = unknown

export const useAMSEmployeeGetEmployeeRenewal = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeRenewalHook>>>, TError = unknown>(
 employeeHasCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeRenewalHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSEmployeeGetEmployeeRenewalQueryOptions(employeeHasCode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSEmployeeGetEmployeeSuspenseHook = () => {
        const aMSEmployeeGetEmployeeSuspense = useCustomInstance<DomainModelAMSModelAMSSuspenses[]>();

        return (
    employeeHasCode: string,
 signal?: AbortSignal
) => {
        return aMSEmployeeGetEmployeeSuspense(
          {url: `/api/AMSEmployee/EmployeeSuspense/${employeeHasCode}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSEmployeeGetEmployeeSuspenseQueryKey = (employeeHasCode: string,) => {
    return [`/api/AMSEmployee/EmployeeSuspense/${employeeHasCode}`] as const;
    }

    
export const useAMSEmployeeGetEmployeeSuspenseQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeSuspenseHook>>>, TError = unknown>(employeeHasCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeSuspenseHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSEmployeeGetEmployeeSuspenseQueryKey(employeeHasCode);

  const aMSEmployeeGetEmployeeSuspense =  useAMSEmployeeGetEmployeeSuspenseHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeSuspenseHook>>>> = ({ signal }) => aMSEmployeeGetEmployeeSuspense(employeeHasCode, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(employeeHasCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeSuspenseHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSEmployeeGetEmployeeSuspenseQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeSuspenseHook>>>>
export type AMSEmployeeGetEmployeeSuspenseQueryError = unknown

export const useAMSEmployeeGetEmployeeSuspense = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeSuspenseHook>>>, TError = unknown>(
 employeeHasCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeGetEmployeeSuspenseHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSEmployeeGetEmployeeSuspenseQueryOptions(employeeHasCode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSEmployeeAddReassignDocumentHook = () => {
        const aMSEmployeeAddReassignDocument = useCustomInstance<DomainModelAMSModelAMSEmployeeReassignDocument>();

        return (
    domainModelAMSModelAMSEmployeeReassignDocument: DomainModelAMSModelAMSEmployeeReassignDocument,
 ) => {
        return aMSEmployeeAddReassignDocument(
          {url: `/api/AMSEmployee/AddReassignDoc`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelAMSModelAMSEmployeeReassignDocument
    },
          );
        }
      }
    


export const useAMSEmployeeAddReassignDocumentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeAddReassignDocumentHook>>>, TError,{data: DomainModelAMSModelAMSEmployeeReassignDocument}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeAddReassignDocumentHook>>>, TError,{data: DomainModelAMSModelAMSEmployeeReassignDocument}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const aMSEmployeeAddReassignDocument =  useAMSEmployeeAddReassignDocumentHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeAddReassignDocumentHook>>>, {data: DomainModelAMSModelAMSEmployeeReassignDocument}> = (props) => {
          const {data} = props ?? {};

          return  aMSEmployeeAddReassignDocument(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AMSEmployeeAddReassignDocumentMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeAddReassignDocumentHook>>>>
    export type AMSEmployeeAddReassignDocumentMutationBody = DomainModelAMSModelAMSEmployeeReassignDocument
    export type AMSEmployeeAddReassignDocumentMutationError = unknown

    export const useAMSEmployeeAddReassignDocument = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeAddReassignDocumentHook>>>, TError,{data: DomainModelAMSModelAMSEmployeeReassignDocument}, TContext>, }
) => {

      const mutationOptions = useAMSEmployeeAddReassignDocumentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAMSEmployeeAddEmployeeLoginTimeHook = () => {
        const aMSEmployeeAddEmployeeLoginTime = useCustomInstance<DomainModelAMSModelAMSEmployeeLoginTime>();

        return (
    domainModelAMSModelAMSEmployeeLoginTime: DomainModelAMSModelAMSEmployeeLoginTime,
 ) => {
        return aMSEmployeeAddEmployeeLoginTime(
          {url: `/api/AMSEmployee/AddEmployeeLoginTime`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelAMSModelAMSEmployeeLoginTime
    },
          );
        }
      }
    


export const useAMSEmployeeAddEmployeeLoginTimeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeAddEmployeeLoginTimeHook>>>, TError,{data: DomainModelAMSModelAMSEmployeeLoginTime}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeAddEmployeeLoginTimeHook>>>, TError,{data: DomainModelAMSModelAMSEmployeeLoginTime}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const aMSEmployeeAddEmployeeLoginTime =  useAMSEmployeeAddEmployeeLoginTimeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeAddEmployeeLoginTimeHook>>>, {data: DomainModelAMSModelAMSEmployeeLoginTime}> = (props) => {
          const {data} = props ?? {};

          return  aMSEmployeeAddEmployeeLoginTime(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type AMSEmployeeAddEmployeeLoginTimeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeAddEmployeeLoginTimeHook>>>>
    export type AMSEmployeeAddEmployeeLoginTimeMutationBody = DomainModelAMSModelAMSEmployeeLoginTime
    export type AMSEmployeeAddEmployeeLoginTimeMutationError = unknown

    export const useAMSEmployeeAddEmployeeLoginTime = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeAddEmployeeLoginTimeHook>>>, TError,{data: DomainModelAMSModelAMSEmployeeLoginTime}, TContext>, }
) => {

      const mutationOptions = useAMSEmployeeAddEmployeeLoginTimeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useAMSEmployeeDeleteEmployeeloginTimeHook = () => {
        const aMSEmployeeDeleteEmployeeloginTime = useCustomInstance<boolean>();

        return (
    authorizedLoginTimeId: string,
    employeeCode: string,
 signal?: AbortSignal
) => {
        return aMSEmployeeDeleteEmployeeloginTime(
          {url: `/api/AMSEmployee/DeleteEmployeeloginTime/${authorizedLoginTimeId}/${employeeCode}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSEmployeeDeleteEmployeeloginTimeQueryKey = (authorizedLoginTimeId: string,
    employeeCode: string,) => {
    return [`/api/AMSEmployee/DeleteEmployeeloginTime/${authorizedLoginTimeId}/${employeeCode}`] as const;
    }

    
export const useAMSEmployeeDeleteEmployeeloginTimeQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeDeleteEmployeeloginTimeHook>>>, TError = unknown>(authorizedLoginTimeId: string,
    employeeCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeDeleteEmployeeloginTimeHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSEmployeeDeleteEmployeeloginTimeQueryKey(authorizedLoginTimeId,employeeCode);

  const aMSEmployeeDeleteEmployeeloginTime =  useAMSEmployeeDeleteEmployeeloginTimeHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeDeleteEmployeeloginTimeHook>>>> = ({ signal }) => aMSEmployeeDeleteEmployeeloginTime(authorizedLoginTimeId,employeeCode, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(authorizedLoginTimeId && employeeCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeDeleteEmployeeloginTimeHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSEmployeeDeleteEmployeeloginTimeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeDeleteEmployeeloginTimeHook>>>>
export type AMSEmployeeDeleteEmployeeloginTimeQueryError = unknown

export const useAMSEmployeeDeleteEmployeeloginTime = <TData = Awaited<ReturnType<ReturnType<typeof useAMSEmployeeDeleteEmployeeloginTimeHook>>>, TError = unknown>(
 authorizedLoginTimeId: string,
    employeeCode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSEmployeeDeleteEmployeeloginTimeHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSEmployeeDeleteEmployeeloginTimeQueryOptions(authorizedLoginTimeId,employeeCode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSGarageAndDealerGetAllHook = () => {
        const aMSGarageAndDealerGetAll = useCustomInstance<DomainModelModelsAMSGarageAndDealerActionDropDown>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSGarageAndDealerGetAll(
          {url: `/api/AMSGarageAndDealer/GetAllGarageDealerAction`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSGarageAndDealerGetAllQueryKey = () => {
    return [`/api/AMSGarageAndDealer/GetAllGarageDealerAction`] as const;
    }

    
export const useAMSGarageAndDealerGetAllQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGetAllHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGetAllHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSGarageAndDealerGetAllQueryKey();

  const aMSGarageAndDealerGetAll =  useAMSGarageAndDealerGetAllHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGetAllHook>>>> = ({ signal }) => aMSGarageAndDealerGetAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGetAllHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSGarageAndDealerGetAllQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGetAllHook>>>>
export type AMSGarageAndDealerGetAllQueryError = unknown

export const useAMSGarageAndDealerGetAll = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGetAllHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGetAllHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSGarageAndDealerGetAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSGarageAndDealerGetGarageAndDealerDetailHook = () => {
        const aMSGarageAndDealerGetGarageAndDealerDetail = useCustomInstance<DomainModelAMSModelAMSCommercialproperty>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSGarageAndDealerGetGarageAndDealerDetail(
          {url: `/api/AMSGarageAndDealer/GarageAndDealerDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSGarageAndDealerGetGarageAndDealerDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSGarageAndDealer/GarageAndDealerDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSGarageAndDealerGetGarageAndDealerDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGetGarageAndDealerDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGetGarageAndDealerDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSGarageAndDealerGetGarageAndDealerDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSGarageAndDealerGetGarageAndDealerDetail =  useAMSGarageAndDealerGetGarageAndDealerDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGetGarageAndDealerDetailHook>>>> = ({ signal }) => aMSGarageAndDealerGetGarageAndDealerDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGetGarageAndDealerDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSGarageAndDealerGetGarageAndDealerDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGetGarageAndDealerDetailHook>>>>
export type AMSGarageAndDealerGetGarageAndDealerDetailQueryError = unknown

export const useAMSGarageAndDealerGetGarageAndDealerDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGetGarageAndDealerDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGetGarageAndDealerDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSGarageAndDealerGetGarageAndDealerDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSGarageAndDealerGarageAndDealerAdditionalIntrestDetailHook = () => {
        const aMSGarageAndDealerGarageAndDealerAdditionalIntrestDetail = useCustomInstance<DomainModelAMSModelAMSPoliciesAddIntrest[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSGarageAndDealerGarageAndDealerAdditionalIntrestDetail(
          {url: `/api/AMSGarageAndDealer/GarageAndDealerAdditionalIntrestDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSGarageAndDealerGarageAndDealerAdditionalIntrestDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSGarageAndDealer/GarageAndDealerAdditionalIntrestDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSGarageAndDealerGarageAndDealerAdditionalIntrestDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerAdditionalIntrestDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerAdditionalIntrestDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSGarageAndDealerGarageAndDealerAdditionalIntrestDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSGarageAndDealerGarageAndDealerAdditionalIntrestDetail =  useAMSGarageAndDealerGarageAndDealerAdditionalIntrestDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerAdditionalIntrestDetailHook>>>> = ({ signal }) => aMSGarageAndDealerGarageAndDealerAdditionalIntrestDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerAdditionalIntrestDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSGarageAndDealerGarageAndDealerAdditionalIntrestDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerAdditionalIntrestDetailHook>>>>
export type AMSGarageAndDealerGarageAndDealerAdditionalIntrestDetailQueryError = unknown

export const useAMSGarageAndDealerGarageAndDealerAdditionalIntrestDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerAdditionalIntrestDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerAdditionalIntrestDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSGarageAndDealerGarageAndDealerAdditionalIntrestDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSGarageAndDealerGarageAndDealeruniqueAnswerDetailHook = () => {
        const aMSGarageAndDealerGarageAndDealeruniqueAnswerDetail = useCustomInstance<DomainModelAMSModelAMSCommercialUniqueAnswer[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSGarageAndDealerGarageAndDealeruniqueAnswerDetail(
          {url: `/api/AMSGarageAndDealer/GarageAndDealeruniqueAnswerDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSGarageAndDealerGarageAndDealeruniqueAnswerDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSGarageAndDealer/GarageAndDealeruniqueAnswerDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSGarageAndDealerGarageAndDealeruniqueAnswerDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealeruniqueAnswerDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealeruniqueAnswerDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSGarageAndDealerGarageAndDealeruniqueAnswerDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSGarageAndDealerGarageAndDealeruniqueAnswerDetail =  useAMSGarageAndDealerGarageAndDealeruniqueAnswerDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealeruniqueAnswerDetailHook>>>> = ({ signal }) => aMSGarageAndDealerGarageAndDealeruniqueAnswerDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealeruniqueAnswerDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSGarageAndDealerGarageAndDealeruniqueAnswerDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealeruniqueAnswerDetailHook>>>>
export type AMSGarageAndDealerGarageAndDealeruniqueAnswerDetailQueryError = unknown

export const useAMSGarageAndDealerGarageAndDealeruniqueAnswerDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealeruniqueAnswerDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealeruniqueAnswerDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSGarageAndDealerGarageAndDealeruniqueAnswerDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSGarageAndDealerGarageAndDealerDriverDetailHook = () => {
        const aMSGarageAndDealerGarageAndDealerDriverDetail = useCustomInstance<DomainModelAMSModelAMSDrivers[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSGarageAndDealerGarageAndDealerDriverDetail(
          {url: `/api/AMSGarageAndDealer/GarageAndDealerDriverDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSGarageAndDealerGarageAndDealerDriverDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSGarageAndDealer/GarageAndDealerDriverDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSGarageAndDealerGarageAndDealerDriverDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerDriverDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerDriverDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSGarageAndDealerGarageAndDealerDriverDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSGarageAndDealerGarageAndDealerDriverDetail =  useAMSGarageAndDealerGarageAndDealerDriverDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerDriverDetailHook>>>> = ({ signal }) => aMSGarageAndDealerGarageAndDealerDriverDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerDriverDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSGarageAndDealerGarageAndDealerDriverDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerDriverDetailHook>>>>
export type AMSGarageAndDealerGarageAndDealerDriverDetailQueryError = unknown

export const useAMSGarageAndDealerGarageAndDealerDriverDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerDriverDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerDriverDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSGarageAndDealerGarageAndDealerDriverDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSGarageAndDealerGarageAndDealerCoverageDetailHook = () => {
        const aMSGarageAndDealerGarageAndDealerCoverageDetail = useCustomInstance<DomainModelAMSModelAMSCommercialLinesCoverages[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSGarageAndDealerGarageAndDealerCoverageDetail(
          {url: `/api/AMSGarageAndDealer/GarageAndDealerCoverageDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSGarageAndDealerGarageAndDealerCoverageDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSGarageAndDealer/GarageAndDealerCoverageDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSGarageAndDealerGarageAndDealerCoverageDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerCoverageDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerCoverageDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSGarageAndDealerGarageAndDealerCoverageDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSGarageAndDealerGarageAndDealerCoverageDetail =  useAMSGarageAndDealerGarageAndDealerCoverageDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerCoverageDetailHook>>>> = ({ signal }) => aMSGarageAndDealerGarageAndDealerCoverageDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerCoverageDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSGarageAndDealerGarageAndDealerCoverageDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerCoverageDetailHook>>>>
export type AMSGarageAndDealerGarageAndDealerCoverageDetailQueryError = unknown

export const useAMSGarageAndDealerGarageAndDealerCoverageDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerCoverageDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerCoverageDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSGarageAndDealerGarageAndDealerCoverageDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSGarageAndDealerGarageAndDealerPhysicalDamageDetailHook = () => {
        const aMSGarageAndDealerGarageAndDealerPhysicalDamageDetail = useCustomInstance<DomainModelAMSModelAMSDealerPhysicalDamage[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSGarageAndDealerGarageAndDealerPhysicalDamageDetail(
          {url: `/api/AMSGarageAndDealer/GarageAndDealerPhysicalDamageDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSGarageAndDealerGarageAndDealerPhysicalDamageDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSGarageAndDealer/GarageAndDealerPhysicalDamageDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSGarageAndDealerGarageAndDealerPhysicalDamageDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerPhysicalDamageDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerPhysicalDamageDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSGarageAndDealerGarageAndDealerPhysicalDamageDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSGarageAndDealerGarageAndDealerPhysicalDamageDetail =  useAMSGarageAndDealerGarageAndDealerPhysicalDamageDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerPhysicalDamageDetailHook>>>> = ({ signal }) => aMSGarageAndDealerGarageAndDealerPhysicalDamageDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerPhysicalDamageDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSGarageAndDealerGarageAndDealerPhysicalDamageDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerPhysicalDamageDetailHook>>>>
export type AMSGarageAndDealerGarageAndDealerPhysicalDamageDetailQueryError = unknown

export const useAMSGarageAndDealerGarageAndDealerPhysicalDamageDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerPhysicalDamageDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerPhysicalDamageDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSGarageAndDealerGarageAndDealerPhysicalDamageDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSGarageAndDealerGarageAndDealerlocationDetailHook = () => {
        const aMSGarageAndDealerGarageAndDealerlocationDetail = useCustomInstance<DomainModelAMSModelAMSGarageLocation[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSGarageAndDealerGarageAndDealerlocationDetail(
          {url: `/api/AMSGarageAndDealer/GarageAndDealerlocationDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSGarageAndDealerGarageAndDealerlocationDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSGarageAndDealer/GarageAndDealerlocationDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSGarageAndDealerGarageAndDealerlocationDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerlocationDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerlocationDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSGarageAndDealerGarageAndDealerlocationDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSGarageAndDealerGarageAndDealerlocationDetail =  useAMSGarageAndDealerGarageAndDealerlocationDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerlocationDetailHook>>>> = ({ signal }) => aMSGarageAndDealerGarageAndDealerlocationDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerlocationDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSGarageAndDealerGarageAndDealerlocationDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerlocationDetailHook>>>>
export type AMSGarageAndDealerGarageAndDealerlocationDetailQueryError = unknown

export const useAMSGarageAndDealerGarageAndDealerlocationDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerlocationDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerlocationDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSGarageAndDealerGarageAndDealerlocationDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSGarageAndDealerGarageAndDealeroperationDetailHook = () => {
        const aMSGarageAndDealerGarageAndDealeroperationDetail = useCustomInstance<DomainModelAMSModelAMSGarageOperation[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSGarageAndDealerGarageAndDealeroperationDetail(
          {url: `/api/AMSGarageAndDealer/GarageAndDealeroperationDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSGarageAndDealerGarageAndDealeroperationDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSGarageAndDealer/GarageAndDealeroperationDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSGarageAndDealerGarageAndDealeroperationDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealeroperationDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealeroperationDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSGarageAndDealerGarageAndDealeroperationDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSGarageAndDealerGarageAndDealeroperationDetail =  useAMSGarageAndDealerGarageAndDealeroperationDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealeroperationDetailHook>>>> = ({ signal }) => aMSGarageAndDealerGarageAndDealeroperationDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealeroperationDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSGarageAndDealerGarageAndDealeroperationDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealeroperationDetailHook>>>>
export type AMSGarageAndDealerGarageAndDealeroperationDetailQueryError = unknown

export const useAMSGarageAndDealerGarageAndDealeroperationDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealeroperationDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealeroperationDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSGarageAndDealerGarageAndDealeroperationDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSGarageAndDealerGarageAndDealerpolicyFormDetailHook = () => {
        const aMSGarageAndDealerGarageAndDealerpolicyFormDetail = useCustomInstance<DomainModelAMSModelAMSpoliciesForms[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSGarageAndDealerGarageAndDealerpolicyFormDetail(
          {url: `/api/AMSGarageAndDealer/GarageAndDealerpolicyFormDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSGarageAndDealerGarageAndDealerpolicyFormDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSGarageAndDealer/GarageAndDealerpolicyFormDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSGarageAndDealerGarageAndDealerpolicyFormDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerpolicyFormDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerpolicyFormDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSGarageAndDealerGarageAndDealerpolicyFormDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSGarageAndDealerGarageAndDealerpolicyFormDetail =  useAMSGarageAndDealerGarageAndDealerpolicyFormDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerpolicyFormDetailHook>>>> = ({ signal }) => aMSGarageAndDealerGarageAndDealerpolicyFormDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerpolicyFormDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSGarageAndDealerGarageAndDealerpolicyFormDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerpolicyFormDetailHook>>>>
export type AMSGarageAndDealerGarageAndDealerpolicyFormDetailQueryError = unknown

export const useAMSGarageAndDealerGarageAndDealerpolicyFormDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerpolicyFormDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerpolicyFormDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSGarageAndDealerGarageAndDealerpolicyFormDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSGarageAndDealerGarageAndDealerRemarkDetailHook = () => {
        const aMSGarageAndDealerGarageAndDealerRemarkDetail = useCustomInstance<DomainModelAMSModelAMSPoliciesRemark[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSGarageAndDealerGarageAndDealerRemarkDetail(
          {url: `/api/AMSGarageAndDealer/GarageAndDealerRemarkDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSGarageAndDealerGarageAndDealerRemarkDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSGarageAndDealer/GarageAndDealerRemarkDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSGarageAndDealerGarageAndDealerRemarkDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerRemarkDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerRemarkDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSGarageAndDealerGarageAndDealerRemarkDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSGarageAndDealerGarageAndDealerRemarkDetail =  useAMSGarageAndDealerGarageAndDealerRemarkDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerRemarkDetailHook>>>> = ({ signal }) => aMSGarageAndDealerGarageAndDealerRemarkDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerRemarkDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSGarageAndDealerGarageAndDealerRemarkDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerRemarkDetailHook>>>>
export type AMSGarageAndDealerGarageAndDealerRemarkDetailQueryError = unknown

export const useAMSGarageAndDealerGarageAndDealerRemarkDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerRemarkDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerRemarkDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSGarageAndDealerGarageAndDealerRemarkDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSGarageAndDealerGarageAndDealertotalPremiumDetailHook = () => {
        const aMSGarageAndDealerGarageAndDealertotalPremiumDetail = useCustomInstance<DomainModelAMSModelAMSCommercialTotalPremium[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSGarageAndDealerGarageAndDealertotalPremiumDetail(
          {url: `/api/AMSGarageAndDealer/GarageAndDealertotalPremiumDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSGarageAndDealerGarageAndDealertotalPremiumDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSGarageAndDealer/GarageAndDealertotalPremiumDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSGarageAndDealerGarageAndDealertotalPremiumDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealertotalPremiumDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealertotalPremiumDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSGarageAndDealerGarageAndDealertotalPremiumDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSGarageAndDealerGarageAndDealertotalPremiumDetail =  useAMSGarageAndDealerGarageAndDealertotalPremiumDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealertotalPremiumDetailHook>>>> = ({ signal }) => aMSGarageAndDealerGarageAndDealertotalPremiumDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealertotalPremiumDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSGarageAndDealerGarageAndDealertotalPremiumDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealertotalPremiumDetailHook>>>>
export type AMSGarageAndDealerGarageAndDealertotalPremiumDetailQueryError = unknown

export const useAMSGarageAndDealerGarageAndDealertotalPremiumDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealertotalPremiumDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealertotalPremiumDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSGarageAndDealerGarageAndDealertotalPremiumDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSGarageAndDealerGarageAndDealerVehicleInfoDetailHook = () => {
        const aMSGarageAndDealerGarageAndDealerVehicleInfoDetail = useCustomInstance<DomainModelAMSModelAMSvehicleInformation[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSGarageAndDealerGarageAndDealerVehicleInfoDetail(
          {url: `/api/AMSGarageAndDealer/GarageAndDealerVehicleInfoDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSGarageAndDealerGarageAndDealerVehicleInfoDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSGarageAndDealer/GarageAndDealerVehicleInfoDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSGarageAndDealerGarageAndDealerVehicleInfoDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerVehicleInfoDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerVehicleInfoDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSGarageAndDealerGarageAndDealerVehicleInfoDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSGarageAndDealerGarageAndDealerVehicleInfoDetail =  useAMSGarageAndDealerGarageAndDealerVehicleInfoDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerVehicleInfoDetailHook>>>> = ({ signal }) => aMSGarageAndDealerGarageAndDealerVehicleInfoDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerVehicleInfoDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSGarageAndDealerGarageAndDealerVehicleInfoDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerVehicleInfoDetailHook>>>>
export type AMSGarageAndDealerGarageAndDealerVehicleInfoDetailQueryError = unknown

export const useAMSGarageAndDealerGarageAndDealerVehicleInfoDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerVehicleInfoDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerVehicleInfoDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSGarageAndDealerGarageAndDealerVehicleInfoDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSGarageAndDealerGarageAndDealerVehicleStorageDetailHook = () => {
        const aMSGarageAndDealerGarageAndDealerVehicleStorageDetail = useCustomInstance<DomainModelAMSModelAMSVehicleStorage[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSGarageAndDealerGarageAndDealerVehicleStorageDetail(
          {url: `/api/AMSGarageAndDealer/GarageAndDealerVehicleStorageDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSGarageAndDealerGarageAndDealerVehicleStorageDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSGarageAndDealer/GarageAndDealerVehicleStorageDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSGarageAndDealerGarageAndDealerVehicleStorageDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerVehicleStorageDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerVehicleStorageDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSGarageAndDealerGarageAndDealerVehicleStorageDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSGarageAndDealerGarageAndDealerVehicleStorageDetail =  useAMSGarageAndDealerGarageAndDealerVehicleStorageDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerVehicleStorageDetailHook>>>> = ({ signal }) => aMSGarageAndDealerGarageAndDealerVehicleStorageDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerVehicleStorageDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSGarageAndDealerGarageAndDealerVehicleStorageDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerVehicleStorageDetailHook>>>>
export type AMSGarageAndDealerGarageAndDealerVehicleStorageDetailQueryError = unknown

export const useAMSGarageAndDealerGarageAndDealerVehicleStorageDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerVehicleStorageDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerVehicleStorageDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSGarageAndDealerGarageAndDealerVehicleStorageDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSGarageAndDealerGarageAndDealerBussinessInfoDetailHook = () => {
        const aMSGarageAndDealerGarageAndDealerBussinessInfoDetail = useCustomInstance<DomainModelAMSModelAMSBussinessinformation[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSGarageAndDealerGarageAndDealerBussinessInfoDetail(
          {url: `/api/AMSGarageAndDealer/GarageAndDealerBussinessInfoDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSGarageAndDealerGarageAndDealerBussinessInfoDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSGarageAndDealer/GarageAndDealerBussinessInfoDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSGarageAndDealerGarageAndDealerBussinessInfoDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerBussinessInfoDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerBussinessInfoDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSGarageAndDealerGarageAndDealerBussinessInfoDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSGarageAndDealerGarageAndDealerBussinessInfoDetail =  useAMSGarageAndDealerGarageAndDealerBussinessInfoDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerBussinessInfoDetailHook>>>> = ({ signal }) => aMSGarageAndDealerGarageAndDealerBussinessInfoDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerBussinessInfoDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSGarageAndDealerGarageAndDealerBussinessInfoDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerBussinessInfoDetailHook>>>>
export type AMSGarageAndDealerGarageAndDealerBussinessInfoDetailQueryError = unknown

export const useAMSGarageAndDealerGarageAndDealerBussinessInfoDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerBussinessInfoDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerBussinessInfoDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSGarageAndDealerGarageAndDealerBussinessInfoDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSGarageAndDealerGarageAndDealerAutoSymbolsDetailHook = () => {
        const aMSGarageAndDealerGarageAndDealerAutoSymbolsDetail = useCustomInstance<DomainModelAMSModelAMSCoverdAutoSymbols[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSGarageAndDealerGarageAndDealerAutoSymbolsDetail(
          {url: `/api/AMSGarageAndDealer/GarageAndDealerAutoSymbolsDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSGarageAndDealerGarageAndDealerAutoSymbolsDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSGarageAndDealer/GarageAndDealerAutoSymbolsDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSGarageAndDealerGarageAndDealerAutoSymbolsDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerAutoSymbolsDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerAutoSymbolsDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSGarageAndDealerGarageAndDealerAutoSymbolsDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSGarageAndDealerGarageAndDealerAutoSymbolsDetail =  useAMSGarageAndDealerGarageAndDealerAutoSymbolsDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerAutoSymbolsDetailHook>>>> = ({ signal }) => aMSGarageAndDealerGarageAndDealerAutoSymbolsDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerAutoSymbolsDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSGarageAndDealerGarageAndDealerAutoSymbolsDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerAutoSymbolsDetailHook>>>>
export type AMSGarageAndDealerGarageAndDealerAutoSymbolsDetailQueryError = unknown

export const useAMSGarageAndDealerGarageAndDealerAutoSymbolsDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerAutoSymbolsDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerAutoSymbolsDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSGarageAndDealerGarageAndDealerAutoSymbolsDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSGarageAndDealerGarageAndDealerGeneralInfoDetailHook = () => {
        const aMSGarageAndDealerGarageAndDealerGeneralInfoDetail = useCustomInstance<DomainModelAMSModelAMSPoliciesGeneralInformation[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSGarageAndDealerGarageAndDealerGeneralInfoDetail(
          {url: `/api/AMSGarageAndDealer/GarageAndDealerGeneralInfoDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSGarageAndDealerGarageAndDealerGeneralInfoDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSGarageAndDealer/GarageAndDealerGeneralInfoDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSGarageAndDealerGarageAndDealerGeneralInfoDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerGeneralInfoDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerGeneralInfoDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSGarageAndDealerGarageAndDealerGeneralInfoDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSGarageAndDealerGarageAndDealerGeneralInfoDetail =  useAMSGarageAndDealerGarageAndDealerGeneralInfoDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerGeneralInfoDetailHook>>>> = ({ signal }) => aMSGarageAndDealerGarageAndDealerGeneralInfoDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerGeneralInfoDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSGarageAndDealerGarageAndDealerGeneralInfoDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerGeneralInfoDetailHook>>>>
export type AMSGarageAndDealerGarageAndDealerGeneralInfoDetailQueryError = unknown

export const useAMSGarageAndDealerGarageAndDealerGeneralInfoDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerGeneralInfoDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSGarageAndDealerGarageAndDealerGeneralInfoDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSGarageAndDealerGarageAndDealerGeneralInfoDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSHomeOwnersHomeOwnerDetailHook = () => {
        const aMSHomeOwnersHomeOwnerDetail = useCustomInstance<DomainModelAMSModelAMSCommercialproperty>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSHomeOwnersHomeOwnerDetail(
          {url: `/api/AMSHomeOwner/HomeOwnerDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSHomeOwnersHomeOwnerDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSHomeOwner/HomeOwnerDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSHomeOwnersHomeOwnerDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSHomeOwnersHomeOwnerDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSHomeOwnersHomeOwnerDetail =  useAMSHomeOwnersHomeOwnerDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerDetailHook>>>> = ({ signal }) => aMSHomeOwnersHomeOwnerDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSHomeOwnersHomeOwnerDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerDetailHook>>>>
export type AMSHomeOwnersHomeOwnerDetailQueryError = unknown

export const useAMSHomeOwnersHomeOwnerDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSHomeOwnersHomeOwnerDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSHomeOwnersHomeOwnerUniqueAnswerDetailHook = () => {
        const aMSHomeOwnersHomeOwnerUniqueAnswerDetail = useCustomInstance<DomainModelAMSModelAMSCommercialUniqueAnswer[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSHomeOwnersHomeOwnerUniqueAnswerDetail(
          {url: `/api/AMSHomeOwner/HomeOwnerUniqueAnswerDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSHomeOwnersHomeOwnerUniqueAnswerDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSHomeOwner/HomeOwnerUniqueAnswerDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSHomeOwnersHomeOwnerUniqueAnswerDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerUniqueAnswerDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerUniqueAnswerDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSHomeOwnersHomeOwnerUniqueAnswerDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSHomeOwnersHomeOwnerUniqueAnswerDetail =  useAMSHomeOwnersHomeOwnerUniqueAnswerDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerUniqueAnswerDetailHook>>>> = ({ signal }) => aMSHomeOwnersHomeOwnerUniqueAnswerDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerUniqueAnswerDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSHomeOwnersHomeOwnerUniqueAnswerDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerUniqueAnswerDetailHook>>>>
export type AMSHomeOwnersHomeOwnerUniqueAnswerDetailQueryError = unknown

export const useAMSHomeOwnersHomeOwnerUniqueAnswerDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerUniqueAnswerDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerUniqueAnswerDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSHomeOwnersHomeOwnerUniqueAnswerDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSHomeOwnersHomeOwnerlocationDetailHook = () => {
        const aMSHomeOwnersHomeOwnerlocationDetail = useCustomInstance<DomainModelAMSModelAMSGarageLocation[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSHomeOwnersHomeOwnerlocationDetail(
          {url: `/api/AMSHomeOwner/HomeOwnerlocationDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSHomeOwnersHomeOwnerlocationDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSHomeOwner/HomeOwnerlocationDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSHomeOwnersHomeOwnerlocationDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerlocationDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerlocationDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSHomeOwnersHomeOwnerlocationDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSHomeOwnersHomeOwnerlocationDetail =  useAMSHomeOwnersHomeOwnerlocationDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerlocationDetailHook>>>> = ({ signal }) => aMSHomeOwnersHomeOwnerlocationDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerlocationDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSHomeOwnersHomeOwnerlocationDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerlocationDetailHook>>>>
export type AMSHomeOwnersHomeOwnerlocationDetailQueryError = unknown

export const useAMSHomeOwnersHomeOwnerlocationDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerlocationDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerlocationDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSHomeOwnersHomeOwnerlocationDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSHomeOwnersHomeOwnerOperatorsDetailHook = () => {
        const aMSHomeOwnersHomeOwnerOperatorsDetail = useCustomInstance<DomainModelAMSModelAMSHomeOwnerOperators[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSHomeOwnersHomeOwnerOperatorsDetail(
          {url: `/api/AMSHomeOwner/HomeOwnerOperatorsDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSHomeOwnersHomeOwnerOperatorsDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSHomeOwner/HomeOwnerOperatorsDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSHomeOwnersHomeOwnerOperatorsDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerOperatorsDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerOperatorsDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSHomeOwnersHomeOwnerOperatorsDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSHomeOwnersHomeOwnerOperatorsDetail =  useAMSHomeOwnersHomeOwnerOperatorsDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerOperatorsDetailHook>>>> = ({ signal }) => aMSHomeOwnersHomeOwnerOperatorsDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerOperatorsDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSHomeOwnersHomeOwnerOperatorsDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerOperatorsDetailHook>>>>
export type AMSHomeOwnersHomeOwnerOperatorsDetailQueryError = unknown

export const useAMSHomeOwnersHomeOwnerOperatorsDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerOperatorsDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerOperatorsDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSHomeOwnersHomeOwnerOperatorsDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSHomeOwnersHomeOwnerAdditionalIntrestDetailHook = () => {
        const aMSHomeOwnersHomeOwnerAdditionalIntrestDetail = useCustomInstance<DomainModelAMSModelAMSPoliciesAddIntrest[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSHomeOwnersHomeOwnerAdditionalIntrestDetail(
          {url: `/api/AMSHomeOwner/HomeOwnerAdditionalIntrestDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSHomeOwnersHomeOwnerAdditionalIntrestDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSHomeOwner/HomeOwnerAdditionalIntrestDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSHomeOwnersHomeOwnerAdditionalIntrestDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerAdditionalIntrestDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerAdditionalIntrestDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSHomeOwnersHomeOwnerAdditionalIntrestDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSHomeOwnersHomeOwnerAdditionalIntrestDetail =  useAMSHomeOwnersHomeOwnerAdditionalIntrestDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerAdditionalIntrestDetailHook>>>> = ({ signal }) => aMSHomeOwnersHomeOwnerAdditionalIntrestDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerAdditionalIntrestDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSHomeOwnersHomeOwnerAdditionalIntrestDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerAdditionalIntrestDetailHook>>>>
export type AMSHomeOwnersHomeOwnerAdditionalIntrestDetailQueryError = unknown

export const useAMSHomeOwnersHomeOwnerAdditionalIntrestDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerAdditionalIntrestDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerAdditionalIntrestDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSHomeOwnersHomeOwnerAdditionalIntrestDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSHomeOwnersHomeOwnerPolicyHOSnowMobilesDetailHook = () => {
        const aMSHomeOwnersHomeOwnerPolicyHOSnowMobilesDetail = useCustomInstance<DomainModelAMSModelAMSHosNowMobiles[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSHomeOwnersHomeOwnerPolicyHOSnowMobilesDetail(
          {url: `/api/AMSHomeOwner/HomeOwnerPolicyHOSnowMobilesDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSHomeOwnersHomeOwnerPolicyHOSnowMobilesDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSHomeOwner/HomeOwnerPolicyHOSnowMobilesDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSHomeOwnersHomeOwnerPolicyHOSnowMobilesDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerPolicyHOSnowMobilesDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerPolicyHOSnowMobilesDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSHomeOwnersHomeOwnerPolicyHOSnowMobilesDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSHomeOwnersHomeOwnerPolicyHOSnowMobilesDetail =  useAMSHomeOwnersHomeOwnerPolicyHOSnowMobilesDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerPolicyHOSnowMobilesDetailHook>>>> = ({ signal }) => aMSHomeOwnersHomeOwnerPolicyHOSnowMobilesDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerPolicyHOSnowMobilesDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSHomeOwnersHomeOwnerPolicyHOSnowMobilesDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerPolicyHOSnowMobilesDetailHook>>>>
export type AMSHomeOwnersHomeOwnerPolicyHOSnowMobilesDetailQueryError = unknown

export const useAMSHomeOwnersHomeOwnerPolicyHOSnowMobilesDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerPolicyHOSnowMobilesDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerPolicyHOSnowMobilesDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSHomeOwnersHomeOwnerPolicyHOSnowMobilesDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSHomeOwnersHomeOwnerRemarkDetailHook = () => {
        const aMSHomeOwnersHomeOwnerRemarkDetail = useCustomInstance<DomainModelAMSModelAMSPoliciesRemark[]>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSHomeOwnersHomeOwnerRemarkDetail(
          {url: `/api/AMSHomeOwner/HomeOwnerRemarkDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSHomeOwnersHomeOwnerRemarkDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSHomeOwner/HomeOwnerRemarkDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSHomeOwnersHomeOwnerRemarkDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerRemarkDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerRemarkDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSHomeOwnersHomeOwnerRemarkDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSHomeOwnersHomeOwnerRemarkDetail =  useAMSHomeOwnersHomeOwnerRemarkDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerRemarkDetailHook>>>> = ({ signal }) => aMSHomeOwnersHomeOwnerRemarkDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerRemarkDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSHomeOwnersHomeOwnerRemarkDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerRemarkDetailHook>>>>
export type AMSHomeOwnersHomeOwnerRemarkDetailQueryError = unknown

export const useAMSHomeOwnersHomeOwnerRemarkDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerRemarkDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerRemarkDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSHomeOwnersHomeOwnerRemarkDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSHomeOwnersHomeOwnerBoatsMotorsTrailersDetailHook = () => {
        const aMSHomeOwnersHomeOwnerBoatsMotorsTrailersDetail = useCustomInstance<DomainModelAMSModelAMSCommercialproperty>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSHomeOwnersHomeOwnerBoatsMotorsTrailersDetail(
          {url: `/api/AMSHomeOwner/HomeOwnerBoatsMotorsTrailersDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSHomeOwnersHomeOwnerBoatsMotorsTrailersDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSHomeOwner/HomeOwnerBoatsMotorsTrailersDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSHomeOwnersHomeOwnerBoatsMotorsTrailersDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerBoatsMotorsTrailersDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerBoatsMotorsTrailersDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSHomeOwnersHomeOwnerBoatsMotorsTrailersDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSHomeOwnersHomeOwnerBoatsMotorsTrailersDetail =  useAMSHomeOwnersHomeOwnerBoatsMotorsTrailersDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerBoatsMotorsTrailersDetailHook>>>> = ({ signal }) => aMSHomeOwnersHomeOwnerBoatsMotorsTrailersDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerBoatsMotorsTrailersDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSHomeOwnersHomeOwnerBoatsMotorsTrailersDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerBoatsMotorsTrailersDetailHook>>>>
export type AMSHomeOwnersHomeOwnerBoatsMotorsTrailersDetailQueryError = unknown

export const useAMSHomeOwnersHomeOwnerBoatsMotorsTrailersDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerBoatsMotorsTrailersDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerBoatsMotorsTrailersDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSHomeOwnersHomeOwnerBoatsMotorsTrailersDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSHomeOwnersHomeOwnerPersonalUmbrellaDetailHook = () => {
        const aMSHomeOwnersHomeOwnerPersonalUmbrellaDetail = useCustomInstance<DomainModelAMSModelAMSCommercialproperty>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSHomeOwnersHomeOwnerPersonalUmbrellaDetail(
          {url: `/api/AMSHomeOwner/HomeOwnerPersonalUmbrellaDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSHomeOwnersHomeOwnerPersonalUmbrellaDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSHomeOwner/HomeOwnerPersonalUmbrellaDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSHomeOwnersHomeOwnerPersonalUmbrellaDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerPersonalUmbrellaDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerPersonalUmbrellaDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSHomeOwnersHomeOwnerPersonalUmbrellaDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSHomeOwnersHomeOwnerPersonalUmbrellaDetail =  useAMSHomeOwnersHomeOwnerPersonalUmbrellaDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerPersonalUmbrellaDetailHook>>>> = ({ signal }) => aMSHomeOwnersHomeOwnerPersonalUmbrellaDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerPersonalUmbrellaDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSHomeOwnersHomeOwnerPersonalUmbrellaDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerPersonalUmbrellaDetailHook>>>>
export type AMSHomeOwnersHomeOwnerPersonalUmbrellaDetailQueryError = unknown

export const useAMSHomeOwnersHomeOwnerPersonalUmbrellaDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerPersonalUmbrellaDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerPersonalUmbrellaDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSHomeOwnersHomeOwnerPersonalUmbrellaDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSHomeOwnersHomeOwnerSchPersonalPropDetailHook = () => {
        const aMSHomeOwnersHomeOwnerSchPersonalPropDetail = useCustomInstance<DomainModelAMSModelAMSCommercialproperty>();

        return (
    effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSHomeOwnersHomeOwnerSchPersonalPropDetail(
          {url: `/api/AMSHomeOwner/HomeOwnerSchPersonalPropDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSHomeOwnersHomeOwnerSchPersonalPropDetailQueryKey = (effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string,) => {
    return [`/api/AMSHomeOwner/HomeOwnerSchPersonalPropDetail/${effectiveDate}/${lineOfBusinessId}/${policyId}`] as const;
    }

    
export const useAMSHomeOwnersHomeOwnerSchPersonalPropDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerSchPersonalPropDetailHook>>>, TError = unknown>(effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerSchPersonalPropDetailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSHomeOwnersHomeOwnerSchPersonalPropDetailQueryKey(effectiveDate,lineOfBusinessId,policyId);

  const aMSHomeOwnersHomeOwnerSchPersonalPropDetail =  useAMSHomeOwnersHomeOwnerSchPersonalPropDetailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerSchPersonalPropDetailHook>>>> = ({ signal }) => aMSHomeOwnersHomeOwnerSchPersonalPropDetail(effectiveDate,lineOfBusinessId,policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(effectiveDate && lineOfBusinessId && policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerSchPersonalPropDetailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSHomeOwnersHomeOwnerSchPersonalPropDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerSchPersonalPropDetailHook>>>>
export type AMSHomeOwnersHomeOwnerSchPersonalPropDetailQueryError = unknown

export const useAMSHomeOwnersHomeOwnerSchPersonalPropDetail = <TData = Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerSchPersonalPropDetailHook>>>, TError = unknown>(
 effectiveDate: string,
    lineOfBusinessId: string,
    policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSHomeOwnersHomeOwnerSchPersonalPropDetailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSHomeOwnersHomeOwnerSchPersonalPropDetailQueryOptions(effectiveDate,lineOfBusinessId,policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSinvoicesGetAllAMSInvoiceHook = () => {
        const aMSinvoicesGetAllAMSInvoice = useCustomInstance<DomainModelAMSModelAMSInvoiceModel[]>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSinvoicesGetAllAMSInvoice(
          {url: `/api/AMsInvoice/GetAllAMSInvoice`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSinvoicesGetAllAMSInvoiceQueryKey = () => {
    return [`/api/AMsInvoice/GetAllAMSInvoice`] as const;
    }

    
export const useAMSinvoicesGetAllAMSInvoiceQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetAllAMSInvoiceHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetAllAMSInvoiceHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSinvoicesGetAllAMSInvoiceQueryKey();

  const aMSinvoicesGetAllAMSInvoice =  useAMSinvoicesGetAllAMSInvoiceHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetAllAMSInvoiceHook>>>> = ({ signal }) => aMSinvoicesGetAllAMSInvoice(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetAllAMSInvoiceHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSinvoicesGetAllAMSInvoiceQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetAllAMSInvoiceHook>>>>
export type AMSinvoicesGetAllAMSInvoiceQueryError = unknown

export const useAMSinvoicesGetAllAMSInvoice = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetAllAMSInvoiceHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetAllAMSInvoiceHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSinvoicesGetAllAMSInvoiceQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSinvoicesGetInvoiceByIDHook = () => {
        const aMSinvoicesGetInvoiceByID = useCustomInstance<DomainModelAMSModelAMSInvoiceModel>();

        return (
    invoiceID: string,
 signal?: AbortSignal
) => {
        return aMSinvoicesGetInvoiceByID(
          {url: `/api/AMsInvoice/GetInvoiceByID/${invoiceID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSinvoicesGetInvoiceByIDQueryKey = (invoiceID: string,) => {
    return [`/api/AMsInvoice/GetInvoiceByID/${invoiceID}`] as const;
    }

    
export const useAMSinvoicesGetInvoiceByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceByIDHook>>>, TError = unknown>(invoiceID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSinvoicesGetInvoiceByIDQueryKey(invoiceID);

  const aMSinvoicesGetInvoiceByID =  useAMSinvoicesGetInvoiceByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceByIDHook>>>> = ({ signal }) => aMSinvoicesGetInvoiceByID(invoiceID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(invoiceID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSinvoicesGetInvoiceByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceByIDHook>>>>
export type AMSinvoicesGetInvoiceByIDQueryError = unknown

export const useAMSinvoicesGetInvoiceByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceByIDHook>>>, TError = unknown>(
 invoiceID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSinvoicesGetInvoiceByIDQueryOptions(invoiceID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSinvoicesGetBillingInfoByIDHook = () => {
        const aMSinvoicesGetBillingInfoByID = useCustomInstance<DomainModelAMSModelAMSInvoiceBillToModel[]>();

        return (
    invoiceID: string,
 signal?: AbortSignal
) => {
        return aMSinvoicesGetBillingInfoByID(
          {url: `/api/AMsInvoice/GetBillingInfoByID/${invoiceID}/BillTo`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSinvoicesGetBillingInfoByIDQueryKey = (invoiceID: string,) => {
    return [`/api/AMsInvoice/GetBillingInfoByID/${invoiceID}/BillTo`] as const;
    }

    
export const useAMSinvoicesGetBillingInfoByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetBillingInfoByIDHook>>>, TError = unknown>(invoiceID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetBillingInfoByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSinvoicesGetBillingInfoByIDQueryKey(invoiceID);

  const aMSinvoicesGetBillingInfoByID =  useAMSinvoicesGetBillingInfoByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetBillingInfoByIDHook>>>> = ({ signal }) => aMSinvoicesGetBillingInfoByID(invoiceID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(invoiceID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetBillingInfoByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSinvoicesGetBillingInfoByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetBillingInfoByIDHook>>>>
export type AMSinvoicesGetBillingInfoByIDQueryError = unknown

export const useAMSinvoicesGetBillingInfoByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetBillingInfoByIDHook>>>, TError = unknown>(
 invoiceID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetBillingInfoByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSinvoicesGetBillingInfoByIDQueryOptions(invoiceID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSinvoicesGetInvoiceInstallmentsByIDHook = () => {
        const aMSinvoicesGetInvoiceInstallmentsByID = useCustomInstance<DomainModelAMSModelAMSInvoicedInstallmentsModel[]>();

        return (
    invoiceID: string,
 signal?: AbortSignal
) => {
        return aMSinvoicesGetInvoiceInstallmentsByID(
          {url: `/api/AMsInvoice/InvoiceInstallment/${invoiceID}/InvoiceInstallmentSummary`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSinvoicesGetInvoiceInstallmentsByIDQueryKey = (invoiceID: string,) => {
    return [`/api/AMsInvoice/InvoiceInstallment/${invoiceID}/InvoiceInstallmentSummary`] as const;
    }

    
export const useAMSinvoicesGetInvoiceInstallmentsByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceInstallmentsByIDHook>>>, TError = unknown>(invoiceID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceInstallmentsByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSinvoicesGetInvoiceInstallmentsByIDQueryKey(invoiceID);

  const aMSinvoicesGetInvoiceInstallmentsByID =  useAMSinvoicesGetInvoiceInstallmentsByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceInstallmentsByIDHook>>>> = ({ signal }) => aMSinvoicesGetInvoiceInstallmentsByID(invoiceID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(invoiceID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceInstallmentsByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSinvoicesGetInvoiceInstallmentsByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceInstallmentsByIDHook>>>>
export type AMSinvoicesGetInvoiceInstallmentsByIDQueryError = unknown

export const useAMSinvoicesGetInvoiceInstallmentsByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceInstallmentsByIDHook>>>, TError = unknown>(
 invoiceID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceInstallmentsByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSinvoicesGetInvoiceInstallmentsByIDQueryOptions(invoiceID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSinvoicesGetInvoicePolicyTransactionsByIDHook = () => {
        const aMSinvoicesGetInvoicePolicyTransactionsByID = useCustomInstance<DomainModelAMSModelAMSInvoicePolicyTransactionsModel[]>();

        return (
    invoiceID: string,
 signal?: AbortSignal
) => {
        return aMSinvoicesGetInvoicePolicyTransactionsByID(
          {url: `/api/AMsInvoice/InvoicePolicy/${invoiceID}/InvoicePolicyTransactions`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSinvoicesGetInvoicePolicyTransactionsByIDQueryKey = (invoiceID: string,) => {
    return [`/api/AMsInvoice/InvoicePolicy/${invoiceID}/InvoicePolicyTransactions`] as const;
    }

    
export const useAMSinvoicesGetInvoicePolicyTransactionsByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoicePolicyTransactionsByIDHook>>>, TError = unknown>(invoiceID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoicePolicyTransactionsByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSinvoicesGetInvoicePolicyTransactionsByIDQueryKey(invoiceID);

  const aMSinvoicesGetInvoicePolicyTransactionsByID =  useAMSinvoicesGetInvoicePolicyTransactionsByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoicePolicyTransactionsByIDHook>>>> = ({ signal }) => aMSinvoicesGetInvoicePolicyTransactionsByID(invoiceID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(invoiceID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoicePolicyTransactionsByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSinvoicesGetInvoicePolicyTransactionsByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoicePolicyTransactionsByIDHook>>>>
export type AMSinvoicesGetInvoicePolicyTransactionsByIDQueryError = unknown

export const useAMSinvoicesGetInvoicePolicyTransactionsByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoicePolicyTransactionsByIDHook>>>, TError = unknown>(
 invoiceID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoicePolicyTransactionsByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSinvoicesGetInvoicePolicyTransactionsByIDQueryOptions(invoiceID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSinvoicesGetInvoiceTransactionsByIDHook = () => {
        const aMSinvoicesGetInvoiceTransactionsByID = useCustomInstance<DomainModelAMSModelAMSInvoiceTransactionModel[]>();

        return (
    invoiceID: string,
 signal?: AbortSignal
) => {
        return aMSinvoicesGetInvoiceTransactionsByID(
          {url: `/api/AMsInvoice/InvoiceTransaction/${invoiceID}/InvoiceTransactions`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSinvoicesGetInvoiceTransactionsByIDQueryKey = (invoiceID: string,) => {
    return [`/api/AMsInvoice/InvoiceTransaction/${invoiceID}/InvoiceTransactions`] as const;
    }

    
export const useAMSinvoicesGetInvoiceTransactionsByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceTransactionsByIDHook>>>, TError = unknown>(invoiceID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceTransactionsByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSinvoicesGetInvoiceTransactionsByIDQueryKey(invoiceID);

  const aMSinvoicesGetInvoiceTransactionsByID =  useAMSinvoicesGetInvoiceTransactionsByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceTransactionsByIDHook>>>> = ({ signal }) => aMSinvoicesGetInvoiceTransactionsByID(invoiceID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(invoiceID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceTransactionsByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSinvoicesGetInvoiceTransactionsByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceTransactionsByIDHook>>>>
export type AMSinvoicesGetInvoiceTransactionsByIDQueryError = unknown

export const useAMSinvoicesGetInvoiceTransactionsByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceTransactionsByIDHook>>>, TError = unknown>(
 invoiceID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceTransactionsByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSinvoicesGetInvoiceTransactionsByIDQueryOptions(invoiceID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSinvoicesGetMessageByIDHook = () => {
        const aMSinvoicesGetMessageByID = useCustomInstance<DomainModelAMSModelAMSMessagesModel[]>();

        return (
    invoiceID: string,
 signal?: AbortSignal
) => {
        return aMSinvoicesGetMessageByID(
          {url: `/api/AMsInvoice/${invoiceID}/Messages`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSinvoicesGetMessageByIDQueryKey = (invoiceID: string,) => {
    return [`/api/AMsInvoice/${invoiceID}/Messages`] as const;
    }

    
export const useAMSinvoicesGetMessageByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetMessageByIDHook>>>, TError = unknown>(invoiceID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetMessageByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSinvoicesGetMessageByIDQueryKey(invoiceID);

  const aMSinvoicesGetMessageByID =  useAMSinvoicesGetMessageByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetMessageByIDHook>>>> = ({ signal }) => aMSinvoicesGetMessageByID(invoiceID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(invoiceID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetMessageByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSinvoicesGetMessageByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetMessageByIDHook>>>>
export type AMSinvoicesGetMessageByIDQueryError = unknown

export const useAMSinvoicesGetMessageByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetMessageByIDHook>>>, TError = unknown>(
 invoiceID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetMessageByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSinvoicesGetMessageByIDQueryOptions(invoiceID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSinvoicesGetInvoiceBillToByIDHook = () => {
        const aMSinvoicesGetInvoiceBillToByID = useCustomInstance<DomainModelAMSModelAMSInvoiceBillToModel>();

        return (
    invoiceID: string,
    params: AMSinvoicesGetInvoiceBillToByIDParams,
 signal?: AbortSignal
) => {
        return aMSinvoicesGetInvoiceBillToByID(
          {url: `/api/AMsInvoice/InvoiceBillTo/${invoiceID}`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getAMSinvoicesGetInvoiceBillToByIDQueryKey = (invoiceID: string,
    params: AMSinvoicesGetInvoiceBillToByIDParams,) => {
    return [`/api/AMsInvoice/InvoiceBillTo/${invoiceID}`, ...(params ? [params]: [])] as const;
    }

    
export const useAMSinvoicesGetInvoiceBillToByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceBillToByIDHook>>>, TError = unknown>(invoiceID: string,
    params: AMSinvoicesGetInvoiceBillToByIDParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceBillToByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSinvoicesGetInvoiceBillToByIDQueryKey(invoiceID,params);

  const aMSinvoicesGetInvoiceBillToByID =  useAMSinvoicesGetInvoiceBillToByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceBillToByIDHook>>>> = ({ signal }) => aMSinvoicesGetInvoiceBillToByID(invoiceID,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(invoiceID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceBillToByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSinvoicesGetInvoiceBillToByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceBillToByIDHook>>>>
export type AMSinvoicesGetInvoiceBillToByIDQueryError = unknown

export const useAMSinvoicesGetInvoiceBillToByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceBillToByIDHook>>>, TError = unknown>(
 invoiceID: string,
    params: AMSinvoicesGetInvoiceBillToByIDParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceBillToByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSinvoicesGetInvoiceBillToByIDQueryOptions(invoiceID,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSinvoicesGetinvoiceCommissionByIDHook = () => {
        const aMSinvoicesGetinvoiceCommissionByID = useCustomInstance<DomainModelAMSModelAMSInvoiceCommissionModel>();

        return (
    billingHeaderId: string,
    invoiceCommissionId: string,
    invoiceId: string,
 signal?: AbortSignal
) => {
        return aMSinvoicesGetinvoiceCommissionByID(
          {url: `/api/AMsInvoice/InvoiceCommission/${billingHeaderId}/${invoiceCommissionId}/${invoiceId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSinvoicesGetinvoiceCommissionByIDQueryKey = (billingHeaderId: string,
    invoiceCommissionId: string,
    invoiceId: string,) => {
    return [`/api/AMsInvoice/InvoiceCommission/${billingHeaderId}/${invoiceCommissionId}/${invoiceId}`] as const;
    }

    
export const useAMSinvoicesGetinvoiceCommissionByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetinvoiceCommissionByIDHook>>>, TError = unknown>(billingHeaderId: string,
    invoiceCommissionId: string,
    invoiceId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetinvoiceCommissionByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSinvoicesGetinvoiceCommissionByIDQueryKey(billingHeaderId,invoiceCommissionId,invoiceId);

  const aMSinvoicesGetinvoiceCommissionByID =  useAMSinvoicesGetinvoiceCommissionByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetinvoiceCommissionByIDHook>>>> = ({ signal }) => aMSinvoicesGetinvoiceCommissionByID(billingHeaderId,invoiceCommissionId,invoiceId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingHeaderId && invoiceCommissionId && invoiceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetinvoiceCommissionByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSinvoicesGetinvoiceCommissionByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetinvoiceCommissionByIDHook>>>>
export type AMSinvoicesGetinvoiceCommissionByIDQueryError = unknown

export const useAMSinvoicesGetinvoiceCommissionByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetinvoiceCommissionByIDHook>>>, TError = unknown>(
 billingHeaderId: string,
    invoiceCommissionId: string,
    invoiceId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetinvoiceCommissionByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSinvoicesGetinvoiceCommissionByIDQueryOptions(billingHeaderId,invoiceCommissionId,invoiceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSinvoicesGetInvoiceMessageByIDHook = () => {
        const aMSinvoicesGetInvoiceMessageByID = useCustomInstance<DomainModelAMSModelAMSMessagesModel>();

        return (
    billingHeaderId: string,
    invoiceId: string,
    invoiceMessageId: string,
 signal?: AbortSignal
) => {
        return aMSinvoicesGetInvoiceMessageByID(
          {url: `/api/AMsInvoice/InvoiceMessage/${billingHeaderId}/${invoiceId}/${invoiceMessageId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSinvoicesGetInvoiceMessageByIDQueryKey = (billingHeaderId: string,
    invoiceId: string,
    invoiceMessageId: string,) => {
    return [`/api/AMsInvoice/InvoiceMessage/${billingHeaderId}/${invoiceId}/${invoiceMessageId}`] as const;
    }

    
export const useAMSinvoicesGetInvoiceMessageByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceMessageByIDHook>>>, TError = unknown>(billingHeaderId: string,
    invoiceId: string,
    invoiceMessageId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceMessageByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSinvoicesGetInvoiceMessageByIDQueryKey(billingHeaderId,invoiceId,invoiceMessageId);

  const aMSinvoicesGetInvoiceMessageByID =  useAMSinvoicesGetInvoiceMessageByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceMessageByIDHook>>>> = ({ signal }) => aMSinvoicesGetInvoiceMessageByID(billingHeaderId,invoiceId,invoiceMessageId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingHeaderId && invoiceId && invoiceMessageId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceMessageByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSinvoicesGetInvoiceMessageByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceMessageByIDHook>>>>
export type AMSinvoicesGetInvoiceMessageByIDQueryError = unknown

export const useAMSinvoicesGetInvoiceMessageByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceMessageByIDHook>>>, TError = unknown>(
 billingHeaderId: string,
    invoiceId: string,
    invoiceMessageId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceMessageByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSinvoicesGetInvoiceMessageByIDQueryOptions(billingHeaderId,invoiceId,invoiceMessageId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSinvoicesGetinvoiceCustomerPremiumByIDHook = () => {
        const aMSinvoicesGetinvoiceCustomerPremiumByID = useCustomInstance<DomainModelAMSModelAMSInvoiceCustomerPremiumsModel>();

        return (
    invoicecustomerpremiumId: string,
 signal?: AbortSignal
) => {
        return aMSinvoicesGetinvoiceCustomerPremiumByID(
          {url: `/api/AMsInvoice/InvoiceCustomerPremiums/${invoicecustomerpremiumId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSinvoicesGetinvoiceCustomerPremiumByIDQueryKey = (invoicecustomerpremiumId: string,) => {
    return [`/api/AMsInvoice/InvoiceCustomerPremiums/${invoicecustomerpremiumId}`] as const;
    }

    
export const useAMSinvoicesGetinvoiceCustomerPremiumByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetinvoiceCustomerPremiumByIDHook>>>, TError = unknown>(invoicecustomerpremiumId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetinvoiceCustomerPremiumByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSinvoicesGetinvoiceCustomerPremiumByIDQueryKey(invoicecustomerpremiumId);

  const aMSinvoicesGetinvoiceCustomerPremiumByID =  useAMSinvoicesGetinvoiceCustomerPremiumByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetinvoiceCustomerPremiumByIDHook>>>> = ({ signal }) => aMSinvoicesGetinvoiceCustomerPremiumByID(invoicecustomerpremiumId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(invoicecustomerpremiumId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetinvoiceCustomerPremiumByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSinvoicesGetinvoiceCustomerPremiumByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetinvoiceCustomerPremiumByIDHook>>>>
export type AMSinvoicesGetinvoiceCustomerPremiumByIDQueryError = unknown

export const useAMSinvoicesGetinvoiceCustomerPremiumByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetinvoiceCustomerPremiumByIDHook>>>, TError = unknown>(
 invoicecustomerpremiumId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetinvoiceCustomerPremiumByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSinvoicesGetinvoiceCustomerPremiumByIDQueryOptions(invoicecustomerpremiumId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSinvoicesGetInvoiceTransactionUnitByIdHook = () => {
        const aMSinvoicesGetInvoiceTransactionUnitById = useCustomInstance<DomainModelAMSModelAMSInvoiceTransactionBussinessUnitsModel>();

        return (
    invoiceTransactionBusinessUnitSplitId: string,
 signal?: AbortSignal
) => {
        return aMSinvoicesGetInvoiceTransactionUnitById(
          {url: `/api/AMsInvoice/InvoiceTransactionUnit/${invoiceTransactionBusinessUnitSplitId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSinvoicesGetInvoiceTransactionUnitByIdQueryKey = (invoiceTransactionBusinessUnitSplitId: string,) => {
    return [`/api/AMsInvoice/InvoiceTransactionUnit/${invoiceTransactionBusinessUnitSplitId}`] as const;
    }

    
export const useAMSinvoicesGetInvoiceTransactionUnitByIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceTransactionUnitByIdHook>>>, TError = unknown>(invoiceTransactionBusinessUnitSplitId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceTransactionUnitByIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSinvoicesGetInvoiceTransactionUnitByIdQueryKey(invoiceTransactionBusinessUnitSplitId);

  const aMSinvoicesGetInvoiceTransactionUnitById =  useAMSinvoicesGetInvoiceTransactionUnitByIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceTransactionUnitByIdHook>>>> = ({ signal }) => aMSinvoicesGetInvoiceTransactionUnitById(invoiceTransactionBusinessUnitSplitId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(invoiceTransactionBusinessUnitSplitId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceTransactionUnitByIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSinvoicesGetInvoiceTransactionUnitByIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceTransactionUnitByIdHook>>>>
export type AMSinvoicesGetInvoiceTransactionUnitByIdQueryError = unknown

export const useAMSinvoicesGetInvoiceTransactionUnitById = <TData = Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceTransactionUnitByIdHook>>>, TError = unknown>(
 invoiceTransactionBusinessUnitSplitId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSinvoicesGetInvoiceTransactionUnitByIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSinvoicesGetInvoiceTransactionUnitByIdQueryOptions(invoiceTransactionBusinessUnitSplitId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSJournalEntryGetAllHook = () => {
        const aMSJournalEntryGetAll = useCustomInstance<DomainModelAMSModelAMSJournalEntryModel[]>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSJournalEntryGetAll(
          {url: `/api/AMSJournalEntry/GetAllJournalEntry`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSJournalEntryGetAllQueryKey = () => {
    return [`/api/AMSJournalEntry/GetAllJournalEntry`] as const;
    }

    
export const useAMSJournalEntryGetAllQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetAllHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetAllHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSJournalEntryGetAllQueryKey();

  const aMSJournalEntryGetAll =  useAMSJournalEntryGetAllHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetAllHook>>>> = ({ signal }) => aMSJournalEntryGetAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetAllHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSJournalEntryGetAllQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetAllHook>>>>
export type AMSJournalEntryGetAllQueryError = unknown

export const useAMSJournalEntryGetAll = <TData = Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetAllHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetAllHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSJournalEntryGetAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSJournalEntryGetJournalEntrByIDHook = () => {
        const aMSJournalEntryGetJournalEntrByID = useCustomInstance<DomainModelAMSModelAMSJournalEntryModel>();

        return (
    generalJournalId: string,
 signal?: AbortSignal
) => {
        return aMSJournalEntryGetJournalEntrByID(
          {url: `/api/AMSJournalEntry/GetJournalEntrByID/${generalJournalId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSJournalEntryGetJournalEntrByIDQueryKey = (generalJournalId: string,) => {
    return [`/api/AMSJournalEntry/GetJournalEntrByID/${generalJournalId}`] as const;
    }

    
export const useAMSJournalEntryGetJournalEntrByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetJournalEntrByIDHook>>>, TError = unknown>(generalJournalId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetJournalEntrByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSJournalEntryGetJournalEntrByIDQueryKey(generalJournalId);

  const aMSJournalEntryGetJournalEntrByID =  useAMSJournalEntryGetJournalEntrByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetJournalEntrByIDHook>>>> = ({ signal }) => aMSJournalEntryGetJournalEntrByID(generalJournalId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(generalJournalId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetJournalEntrByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSJournalEntryGetJournalEntrByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetJournalEntrByIDHook>>>>
export type AMSJournalEntryGetJournalEntrByIDQueryError = unknown

export const useAMSJournalEntryGetJournalEntrByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetJournalEntrByIDHook>>>, TError = unknown>(
 generalJournalId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetJournalEntrByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSJournalEntryGetJournalEntrByIDQueryOptions(generalJournalId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSJournalEntryGetJournalEntrVoucherByIDHook = () => {
        const aMSJournalEntryGetJournalEntrVoucherByID = useCustomInstance<DomainModelAMSModelAMSJournalVoucherModel[]>();

        return (
    generalJournalId: string,
 signal?: AbortSignal
) => {
        return aMSJournalEntryGetJournalEntrVoucherByID(
          {url: `/api/AMSJournalEntry/GetJournalEntrVoucherByID/${generalJournalId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSJournalEntryGetJournalEntrVoucherByIDQueryKey = (generalJournalId: string,) => {
    return [`/api/AMSJournalEntry/GetJournalEntrVoucherByID/${generalJournalId}`] as const;
    }

    
export const useAMSJournalEntryGetJournalEntrVoucherByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetJournalEntrVoucherByIDHook>>>, TError = unknown>(generalJournalId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetJournalEntrVoucherByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSJournalEntryGetJournalEntrVoucherByIDQueryKey(generalJournalId);

  const aMSJournalEntryGetJournalEntrVoucherByID =  useAMSJournalEntryGetJournalEntrVoucherByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetJournalEntrVoucherByIDHook>>>> = ({ signal }) => aMSJournalEntryGetJournalEntrVoucherByID(generalJournalId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(generalJournalId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetJournalEntrVoucherByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSJournalEntryGetJournalEntrVoucherByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetJournalEntrVoucherByIDHook>>>>
export type AMSJournalEntryGetJournalEntrVoucherByIDQueryError = unknown

export const useAMSJournalEntryGetJournalEntrVoucherByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetJournalEntrVoucherByIDHook>>>, TError = unknown>(
 generalJournalId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetJournalEntrVoucherByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSJournalEntryGetJournalEntrVoucherByIDQueryOptions(generalJournalId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSJournalEntryGetJournalEntryVoidInformationByIDHook = () => {
        const aMSJournalEntryGetJournalEntryVoidInformationByID = useCustomInstance<DomainModelAMSModelAMSVoidinformationModel[]>();

        return (
    generalJournalId: string,
 signal?: AbortSignal
) => {
        return aMSJournalEntryGetJournalEntryVoidInformationByID(
          {url: `/api/AMSJournalEntry/GetJournalEntryVoidInformationByID/${generalJournalId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSJournalEntryGetJournalEntryVoidInformationByIDQueryKey = (generalJournalId: string,) => {
    return [`/api/AMSJournalEntry/GetJournalEntryVoidInformationByID/${generalJournalId}`] as const;
    }

    
export const useAMSJournalEntryGetJournalEntryVoidInformationByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetJournalEntryVoidInformationByIDHook>>>, TError = unknown>(generalJournalId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetJournalEntryVoidInformationByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSJournalEntryGetJournalEntryVoidInformationByIDQueryKey(generalJournalId);

  const aMSJournalEntryGetJournalEntryVoidInformationByID =  useAMSJournalEntryGetJournalEntryVoidInformationByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetJournalEntryVoidInformationByIDHook>>>> = ({ signal }) => aMSJournalEntryGetJournalEntryVoidInformationByID(generalJournalId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(generalJournalId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetJournalEntryVoidInformationByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSJournalEntryGetJournalEntryVoidInformationByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetJournalEntryVoidInformationByIDHook>>>>
export type AMSJournalEntryGetJournalEntryVoidInformationByIDQueryError = unknown

export const useAMSJournalEntryGetJournalEntryVoidInformationByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetJournalEntryVoidInformationByIDHook>>>, TError = unknown>(
 generalJournalId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSJournalEntryGetJournalEntryVoidInformationByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSJournalEntryGetJournalEntryVoidInformationByIDQueryOptions(generalJournalId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetpoliciesByIdHook = () => {
        const aMSPoliciesGetpoliciesById = useCustomInstance<DomainModelAMSModelAMSPolicies>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetpoliciesById(
          {url: `/api/AMSPolicies/GetpoliciesById/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetpoliciesByIdQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetpoliciesById/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetpoliciesByIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetpoliciesByIdHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetpoliciesByIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetpoliciesByIdQueryKey(policyId);

  const aMSPoliciesGetpoliciesById =  useAMSPoliciesGetpoliciesByIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetpoliciesByIdHook>>>> = ({ signal }) => aMSPoliciesGetpoliciesById(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetpoliciesByIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetpoliciesByIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetpoliciesByIdHook>>>>
export type AMSPoliciesGetpoliciesByIdQueryError = unknown

export const useAMSPoliciesGetpoliciesById = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetpoliciesByIdHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetpoliciesByIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetpoliciesByIdQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetEmployeeByIDHook = () => {
        const aMSPoliciesGetEmployeeByID = useCustomInstance<DomainModelModelAMSAssignedEmployees[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetEmployeeByID(
          {url: `/api/AMSPolicies/GetEmployeeByID/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetEmployeeByIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetEmployeeByID/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetEmployeeByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetEmployeeByIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetEmployeeByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetEmployeeByIDQueryKey(policyId);

  const aMSPoliciesGetEmployeeByID =  useAMSPoliciesGetEmployeeByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetEmployeeByIDHook>>>> = ({ signal }) => aMSPoliciesGetEmployeeByID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetEmployeeByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetEmployeeByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetEmployeeByIDHook>>>>
export type AMSPoliciesGetEmployeeByIDQueryError = unknown

export const useAMSPoliciesGetEmployeeByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetEmployeeByIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetEmployeeByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetEmployeeByIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetCommercialLinesCoveragesHook = () => {
        const aMSPoliciesGetCommercialLinesCoverages = useCustomInstance<DomainModelAMSModelAMSCommercialLinesCoverages[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetCommercialLinesCoverages(
          {url: `/api/AMSPolicies/GetCommercialLine/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetCommercialLinesCoveragesQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetCommercialLine/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetCommercialLinesCoveragesQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetCommercialLinesCoveragesHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetCommercialLinesCoveragesHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetCommercialLinesCoveragesQueryKey(policyId);

  const aMSPoliciesGetCommercialLinesCoverages =  useAMSPoliciesGetCommercialLinesCoveragesHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetCommercialLinesCoveragesHook>>>> = ({ signal }) => aMSPoliciesGetCommercialLinesCoverages(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetCommercialLinesCoveragesHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetCommercialLinesCoveragesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetCommercialLinesCoveragesHook>>>>
export type AMSPoliciesGetCommercialLinesCoveragesQueryError = unknown

export const useAMSPoliciesGetCommercialLinesCoverages = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetCommercialLinesCoveragesHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetCommercialLinesCoveragesHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetCommercialLinesCoveragesQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetDriverByIDHook = () => {
        const aMSPoliciesGetDriverByID = useCustomInstance<DomainModelAMSModelAMSDrivers[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetDriverByID(
          {url: `/api/AMSPolicies/GetDriver/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetDriverByIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetDriver/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetDriverByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetDriverByIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetDriverByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetDriverByIDQueryKey(policyId);

  const aMSPoliciesGetDriverByID =  useAMSPoliciesGetDriverByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetDriverByIDHook>>>> = ({ signal }) => aMSPoliciesGetDriverByID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetDriverByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetDriverByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetDriverByIDHook>>>>
export type AMSPoliciesGetDriverByIDQueryError = unknown

export const useAMSPoliciesGetDriverByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetDriverByIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetDriverByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetDriverByIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetInsuredByIDHook = () => {
        const aMSPoliciesGetInsuredByID = useCustomInstance<DomainModelAMSModelAMSFirstNameinsured[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetInsuredByID(
          {url: `/api/AMSPolicies/GetInsured/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetInsuredByIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetInsured/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetInsuredByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetInsuredByIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetInsuredByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetInsuredByIDQueryKey(policyId);

  const aMSPoliciesGetInsuredByID =  useAMSPoliciesGetInsuredByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetInsuredByIDHook>>>> = ({ signal }) => aMSPoliciesGetInsuredByID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetInsuredByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetInsuredByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetInsuredByIDHook>>>>
export type AMSPoliciesGetInsuredByIDQueryError = unknown

export const useAMSPoliciesGetInsuredByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetInsuredByIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetInsuredByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetInsuredByIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetInvoiceCommissionByIDHook = () => {
        const aMSPoliciesGetInvoiceCommissionByID = useCustomInstance<DomainModelAMSModelAMSInvoiceCommissionModel[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetInvoiceCommissionByID(
          {url: `/api/AMSPolicies/GetInvoiceCommission/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetInvoiceCommissionByIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetInvoiceCommission/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetInvoiceCommissionByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetInvoiceCommissionByIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetInvoiceCommissionByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetInvoiceCommissionByIDQueryKey(policyId);

  const aMSPoliciesGetInvoiceCommissionByID =  useAMSPoliciesGetInvoiceCommissionByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetInvoiceCommissionByIDHook>>>> = ({ signal }) => aMSPoliciesGetInvoiceCommissionByID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetInvoiceCommissionByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetInvoiceCommissionByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetInvoiceCommissionByIDHook>>>>
export type AMSPoliciesGetInvoiceCommissionByIDQueryError = unknown

export const useAMSPoliciesGetInvoiceCommissionByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetInvoiceCommissionByIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetInvoiceCommissionByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetInvoiceCommissionByIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetLineBussinessByIDHook = () => {
        const aMSPoliciesGetLineBussinessByID = useCustomInstance<DomainModelAMSModelAMSLineofbussiness[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetLineBussinessByID(
          {url: `/api/AMSPolicies/GetlineOfBussiness/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetLineBussinessByIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetlineOfBussiness/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetLineBussinessByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetLineBussinessByIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetLineBussinessByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetLineBussinessByIDQueryKey(policyId);

  const aMSPoliciesGetLineBussinessByID =  useAMSPoliciesGetLineBussinessByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetLineBussinessByIDHook>>>> = ({ signal }) => aMSPoliciesGetLineBussinessByID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetLineBussinessByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetLineBussinessByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetLineBussinessByIDHook>>>>
export type AMSPoliciesGetLineBussinessByIDQueryError = unknown

export const useAMSPoliciesGetLineBussinessByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetLineBussinessByIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetLineBussinessByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetLineBussinessByIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetLossofHistoryByIDHook = () => {
        const aMSPoliciesGetLossofHistoryByID = useCustomInstance<DomainModelAMSModelAMSLossOfHistoryPolicies[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetLossofHistoryByID(
          {url: `/api/AMSPolicies/GetlossofHistory/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetLossofHistoryByIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetlossofHistory/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetLossofHistoryByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetLossofHistoryByIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetLossofHistoryByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetLossofHistoryByIDQueryKey(policyId);

  const aMSPoliciesGetLossofHistoryByID =  useAMSPoliciesGetLossofHistoryByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetLossofHistoryByIDHook>>>> = ({ signal }) => aMSPoliciesGetLossofHistoryByID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetLossofHistoryByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetLossofHistoryByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetLossofHistoryByIDHook>>>>
export type AMSPoliciesGetLossofHistoryByIDQueryError = unknown

export const useAMSPoliciesGetLossofHistoryByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetLossofHistoryByIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetLossofHistoryByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetLossofHistoryByIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetPolicyIntrestHook = () => {
        const aMSPoliciesGetPolicyIntrest = useCustomInstance<DomainModelAMSModelAMSPoliciesAddIntrest[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetPolicyIntrest(
          {url: `/api/AMSPolicies/GetpolicyIntrest/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetPolicyIntrestQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetpolicyIntrest/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetPolicyIntrestQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyIntrestHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyIntrestHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetPolicyIntrestQueryKey(policyId);

  const aMSPoliciesGetPolicyIntrest =  useAMSPoliciesGetPolicyIntrestHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyIntrestHook>>>> = ({ signal }) => aMSPoliciesGetPolicyIntrest(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyIntrestHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetPolicyIntrestQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyIntrestHook>>>>
export type AMSPoliciesGetPolicyIntrestQueryError = unknown

export const useAMSPoliciesGetPolicyIntrest = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyIntrestHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyIntrestHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetPolicyIntrestQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetPolicyinsuredByIDHook = () => {
        const aMSPoliciesGetPolicyinsuredByID = useCustomInstance<DomainModelAMSModelAMSPoliciesCoinsured[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetPolicyinsuredByID(
          {url: `/api/AMSPolicies/GetpolicyCoInsured/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetPolicyinsuredByIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetpolicyCoInsured/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetPolicyinsuredByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyinsuredByIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyinsuredByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetPolicyinsuredByIDQueryKey(policyId);

  const aMSPoliciesGetPolicyinsuredByID =  useAMSPoliciesGetPolicyinsuredByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyinsuredByIDHook>>>> = ({ signal }) => aMSPoliciesGetPolicyinsuredByID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyinsuredByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetPolicyinsuredByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyinsuredByIDHook>>>>
export type AMSPoliciesGetPolicyinsuredByIDQueryError = unknown

export const useAMSPoliciesGetPolicyinsuredByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyinsuredByIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyinsuredByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetPolicyinsuredByIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetPolicyCommercialLocationByIDHook = () => {
        const aMSPoliciesGetPolicyCommercialLocationByID = useCustomInstance<DomainModelAMSModelAMSPoliciesCommercialLocation[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetPolicyCommercialLocationByID(
          {url: `/api/AMSPolicies/GetPolicyCommercialLocation/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetPolicyCommercialLocationByIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetPolicyCommercialLocation/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetPolicyCommercialLocationByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyCommercialLocationByIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyCommercialLocationByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetPolicyCommercialLocationByIDQueryKey(policyId);

  const aMSPoliciesGetPolicyCommercialLocationByID =  useAMSPoliciesGetPolicyCommercialLocationByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyCommercialLocationByIDHook>>>> = ({ signal }) => aMSPoliciesGetPolicyCommercialLocationByID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyCommercialLocationByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetPolicyCommercialLocationByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyCommercialLocationByIDHook>>>>
export type AMSPoliciesGetPolicyCommercialLocationByIDQueryError = unknown

export const useAMSPoliciesGetPolicyCommercialLocationByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyCommercialLocationByIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyCommercialLocationByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetPolicyCommercialLocationByIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetPoliciesCommercialSupplementsByIDHook = () => {
        const aMSPoliciesGetPoliciesCommercialSupplementsByID = useCustomInstance<DomainModelAMSModelAMSPoliciesCommercialSepplementalNames[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetPoliciesCommercialSupplementsByID(
          {url: `/api/AMSPolicies/GetPolicyCommercialSupplements/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetPoliciesCommercialSupplementsByIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetPolicyCommercialSupplements/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetPoliciesCommercialSupplementsByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPoliciesCommercialSupplementsByIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPoliciesCommercialSupplementsByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetPoliciesCommercialSupplementsByIDQueryKey(policyId);

  const aMSPoliciesGetPoliciesCommercialSupplementsByID =  useAMSPoliciesGetPoliciesCommercialSupplementsByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPoliciesCommercialSupplementsByIDHook>>>> = ({ signal }) => aMSPoliciesGetPoliciesCommercialSupplementsByID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPoliciesCommercialSupplementsByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetPoliciesCommercialSupplementsByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPoliciesCommercialSupplementsByIDHook>>>>
export type AMSPoliciesGetPoliciesCommercialSupplementsByIDQueryError = unknown

export const useAMSPoliciesGetPoliciesCommercialSupplementsByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPoliciesCommercialSupplementsByIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPoliciesCommercialSupplementsByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetPoliciesCommercialSupplementsByIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetPolicyContactByIDHook = () => {
        const aMSPoliciesGetPolicyContactByID = useCustomInstance<DomainModelAMSModelAMSPoliciesContacts[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetPolicyContactByID(
          {url: `/api/AMSPolicies/GetPolicyContact/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetPolicyContactByIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetPolicyContact/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetPolicyContactByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyContactByIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyContactByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetPolicyContactByIDQueryKey(policyId);

  const aMSPoliciesGetPolicyContactByID =  useAMSPoliciesGetPolicyContactByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyContactByIDHook>>>> = ({ signal }) => aMSPoliciesGetPolicyContactByID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyContactByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetPolicyContactByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyContactByIDHook>>>>
export type AMSPoliciesGetPolicyContactByIDQueryError = unknown

export const useAMSPoliciesGetPolicyContactByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyContactByIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyContactByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetPolicyContactByIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetPolicyFormByIDHook = () => {
        const aMSPoliciesGetPolicyFormByID = useCustomInstance<DomainModelAMSModelAMSpoliciesForms[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetPolicyFormByID(
          {url: `/api/AMSPolicies/GetPolicyForm/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetPolicyFormByIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetPolicyForm/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetPolicyFormByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyFormByIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyFormByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetPolicyFormByIDQueryKey(policyId);

  const aMSPoliciesGetPolicyFormByID =  useAMSPoliciesGetPolicyFormByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyFormByIDHook>>>> = ({ signal }) => aMSPoliciesGetPolicyFormByID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyFormByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetPolicyFormByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyFormByIDHook>>>>
export type AMSPoliciesGetPolicyFormByIDQueryError = unknown

export const useAMSPoliciesGetPolicyFormByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyFormByIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyFormByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetPolicyFormByIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetPolicyNatureOfBussinessByIDHook = () => {
        const aMSPoliciesGetPolicyNatureOfBussinessByID = useCustomInstance<DomainModelAMSModelAMSPoliciesNatureOfBussiness[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetPolicyNatureOfBussinessByID(
          {url: `/api/AMSPolicies/GetPolicyNatureOfBussiness/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetPolicyNatureOfBussinessByIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetPolicyNatureOfBussiness/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetPolicyNatureOfBussinessByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyNatureOfBussinessByIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyNatureOfBussinessByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetPolicyNatureOfBussinessByIDQueryKey(policyId);

  const aMSPoliciesGetPolicyNatureOfBussinessByID =  useAMSPoliciesGetPolicyNatureOfBussinessByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyNatureOfBussinessByIDHook>>>> = ({ signal }) => aMSPoliciesGetPolicyNatureOfBussinessByID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyNatureOfBussinessByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetPolicyNatureOfBussinessByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyNatureOfBussinessByIDHook>>>>
export type AMSPoliciesGetPolicyNatureOfBussinessByIDQueryError = unknown

export const useAMSPoliciesGetPolicyNatureOfBussinessByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyNatureOfBussinessByIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyNatureOfBussinessByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetPolicyNatureOfBussinessByIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetOtherInformationbyIDHook = () => {
        const aMSPoliciesGetOtherInformationbyID = useCustomInstance<DomainModelAMSModelAMSPoliciesOtherInsurance[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetOtherInformationbyID(
          {url: `/api/AMSPolicies/GetPolicyOtherInsurance/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetOtherInformationbyIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetPolicyOtherInsurance/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetOtherInformationbyIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetOtherInformationbyIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetOtherInformationbyIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetOtherInformationbyIDQueryKey(policyId);

  const aMSPoliciesGetOtherInformationbyID =  useAMSPoliciesGetOtherInformationbyIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetOtherInformationbyIDHook>>>> = ({ signal }) => aMSPoliciesGetOtherInformationbyID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetOtherInformationbyIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetOtherInformationbyIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetOtherInformationbyIDHook>>>>
export type AMSPoliciesGetOtherInformationbyIDQueryError = unknown

export const useAMSPoliciesGetOtherInformationbyID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetOtherInformationbyIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetOtherInformationbyIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetOtherInformationbyIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetpersonalPoliciyByIDHook = () => {
        const aMSPoliciesGetpersonalPoliciyByID = useCustomInstance<DomainModelAMSModelAMSPoliciesPersonal[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetpersonalPoliciyByID(
          {url: `/api/AMSPolicies/GetPesonalPolicy/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetpersonalPoliciyByIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetPesonalPolicy/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetpersonalPoliciyByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetpersonalPoliciyByIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetpersonalPoliciyByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetpersonalPoliciyByIDQueryKey(policyId);

  const aMSPoliciesGetpersonalPoliciyByID =  useAMSPoliciesGetpersonalPoliciyByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetpersonalPoliciyByIDHook>>>> = ({ signal }) => aMSPoliciesGetpersonalPoliciyByID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetpersonalPoliciyByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetpersonalPoliciyByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetpersonalPoliciyByIDHook>>>>
export type AMSPoliciesGetpersonalPoliciyByIDQueryError = unknown

export const useAMSPoliciesGetpersonalPoliciyByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetpersonalPoliciyByIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetpersonalPoliciyByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetpersonalPoliciyByIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetPolicyPeriorcarrierByIDHook = () => {
        const aMSPoliciesGetPolicyPeriorcarrierByID = useCustomInstance<DomainModelAMSModelAMSPoliciesPeriorCarriers[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetPolicyPeriorcarrierByID(
          {url: `/api/AMSPolicies/GetPolicyPeriorCarriers/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetPolicyPeriorcarrierByIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetPolicyPeriorCarriers/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetPolicyPeriorcarrierByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyPeriorcarrierByIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyPeriorcarrierByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetPolicyPeriorcarrierByIDQueryKey(policyId);

  const aMSPoliciesGetPolicyPeriorcarrierByID =  useAMSPoliciesGetPolicyPeriorcarrierByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyPeriorcarrierByIDHook>>>> = ({ signal }) => aMSPoliciesGetPolicyPeriorcarrierByID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyPeriorcarrierByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetPolicyPeriorcarrierByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyPeriorcarrierByIDHook>>>>
export type AMSPoliciesGetPolicyPeriorcarrierByIDQueryError = unknown

export const useAMSPoliciesGetPolicyPeriorcarrierByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyPeriorcarrierByIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyPeriorcarrierByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetPolicyPeriorcarrierByIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetPolicyProducereByIDHook = () => {
        const aMSPoliciesGetPolicyProducereByID = useCustomInstance<DomainModelAMSModelAMSPoliciesProducer[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetPolicyProducereByID(
          {url: `/api/AMSPolicies/GetPolicyProducers/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetPolicyProducereByIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetPolicyProducers/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetPolicyProducereByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyProducereByIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyProducereByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetPolicyProducereByIDQueryKey(policyId);

  const aMSPoliciesGetPolicyProducereByID =  useAMSPoliciesGetPolicyProducereByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyProducereByIDHook>>>> = ({ signal }) => aMSPoliciesGetPolicyProducereByID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyProducereByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetPolicyProducereByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyProducereByIDHook>>>>
export type AMSPoliciesGetPolicyProducereByIDQueryError = unknown

export const useAMSPoliciesGetPolicyProducereByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyProducereByIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyProducereByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetPolicyProducereByIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetPolicyRatebyIDHook = () => {
        const aMSPoliciesGetPolicyRatebyID = useCustomInstance<DomainModelAMSModelAMSPoliciesRateDate[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetPolicyRatebyID(
          {url: `/api/AMSPolicies/GetPolicyRates/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetPolicyRatebyIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetPolicyRates/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetPolicyRatebyIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyRatebyIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyRatebyIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetPolicyRatebyIDQueryKey(policyId);

  const aMSPoliciesGetPolicyRatebyID =  useAMSPoliciesGetPolicyRatebyIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyRatebyIDHook>>>> = ({ signal }) => aMSPoliciesGetPolicyRatebyID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyRatebyIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetPolicyRatebyIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyRatebyIDHook>>>>
export type AMSPoliciesGetPolicyRatebyIDQueryError = unknown

export const useAMSPoliciesGetPolicyRatebyID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyRatebyIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyRatebyIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetPolicyRatebyIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetpolicySubCustomerByIDHook = () => {
        const aMSPoliciesGetpolicySubCustomerByID = useCustomInstance<DomainModelAMSModelAMSPoliciesSubCustomer[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetpolicySubCustomerByID(
          {url: `/api/AMSPolicies/GetPolicySubCustomer/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetpolicySubCustomerByIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetPolicySubCustomer/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetpolicySubCustomerByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetpolicySubCustomerByIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetpolicySubCustomerByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetpolicySubCustomerByIDQueryKey(policyId);

  const aMSPoliciesGetpolicySubCustomerByID =  useAMSPoliciesGetpolicySubCustomerByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetpolicySubCustomerByIDHook>>>> = ({ signal }) => aMSPoliciesGetpolicySubCustomerByID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetpolicySubCustomerByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetpolicySubCustomerByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetpolicySubCustomerByIDHook>>>>
export type AMSPoliciesGetpolicySubCustomerByIDQueryError = unknown

export const useAMSPoliciesGetpolicySubCustomerByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetpolicySubCustomerByIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetpolicySubCustomerByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetpolicySubCustomerByIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetPolicyTransactionPremiumChargeByIDHook = () => {
        const aMSPoliciesGetPolicyTransactionPremiumChargeByID = useCustomInstance<DomainModelAMSModelAMSPoliciesTransactionPremiumCharge[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetPolicyTransactionPremiumChargeByID(
          {url: `/api/AMSPolicies/GetPolicyTransactionPremiumCharge/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetPolicyTransactionPremiumChargeByIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetPolicyTransactionPremiumCharge/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetPolicyTransactionPremiumChargeByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyTransactionPremiumChargeByIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyTransactionPremiumChargeByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetPolicyTransactionPremiumChargeByIDQueryKey(policyId);

  const aMSPoliciesGetPolicyTransactionPremiumChargeByID =  useAMSPoliciesGetPolicyTransactionPremiumChargeByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyTransactionPremiumChargeByIDHook>>>> = ({ signal }) => aMSPoliciesGetPolicyTransactionPremiumChargeByID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyTransactionPremiumChargeByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetPolicyTransactionPremiumChargeByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyTransactionPremiumChargeByIDHook>>>>
export type AMSPoliciesGetPolicyTransactionPremiumChargeByIDQueryError = unknown

export const useAMSPoliciesGetPolicyTransactionPremiumChargeByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyTransactionPremiumChargeByIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyTransactionPremiumChargeByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetPolicyTransactionPremiumChargeByIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetPolicyTransactionPremiumByIDHook = () => {
        const aMSPoliciesGetPolicyTransactionPremiumByID = useCustomInstance<DomainModelAMSModelAMSPolicyTransactionPremium[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetPolicyTransactionPremiumByID(
          {url: `/api/AMSPolicies/GetPolicyTransactionPremium/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetPolicyTransactionPremiumByIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetPolicyTransactionPremium/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetPolicyTransactionPremiumByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyTransactionPremiumByIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyTransactionPremiumByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetPolicyTransactionPremiumByIDQueryKey(policyId);

  const aMSPoliciesGetPolicyTransactionPremiumByID =  useAMSPoliciesGetPolicyTransactionPremiumByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyTransactionPremiumByIDHook>>>> = ({ signal }) => aMSPoliciesGetPolicyTransactionPremiumByID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyTransactionPremiumByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetPolicyTransactionPremiumByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyTransactionPremiumByIDHook>>>>
export type AMSPoliciesGetPolicyTransactionPremiumByIDQueryError = unknown

export const useAMSPoliciesGetPolicyTransactionPremiumByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyTransactionPremiumByIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyTransactionPremiumByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetPolicyTransactionPremiumByIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetPolicyRemarkByIDHook = () => {
        const aMSPoliciesGetPolicyRemarkByID = useCustomInstance<DomainModelAMSModelAMSPoliciesRemark[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetPolicyRemarkByID(
          {url: `/api/AMSPolicies/GetPolicyRemark/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetPolicyRemarkByIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetPolicyRemark/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetPolicyRemarkByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyRemarkByIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyRemarkByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetPolicyRemarkByIDQueryKey(policyId);

  const aMSPoliciesGetPolicyRemarkByID =  useAMSPoliciesGetPolicyRemarkByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyRemarkByIDHook>>>> = ({ signal }) => aMSPoliciesGetPolicyRemarkByID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyRemarkByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetPolicyRemarkByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyRemarkByIDHook>>>>
export type AMSPoliciesGetPolicyRemarkByIDQueryError = unknown

export const useAMSPoliciesGetPolicyRemarkByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyRemarkByIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyRemarkByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetPolicyRemarkByIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetPolicyTransactionByIDHook = () => {
        const aMSPoliciesGetPolicyTransactionByID = useCustomInstance<DomainModelAMSModelAMSPoliciesTransaction[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetPolicyTransactionByID(
          {url: `/api/AMSPolicies/GetPolicyTransaction/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetPolicyTransactionByIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetPolicyTransaction/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetPolicyTransactionByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyTransactionByIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyTransactionByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetPolicyTransactionByIDQueryKey(policyId);

  const aMSPoliciesGetPolicyTransactionByID =  useAMSPoliciesGetPolicyTransactionByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyTransactionByIDHook>>>> = ({ signal }) => aMSPoliciesGetPolicyTransactionByID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyTransactionByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetPolicyTransactionByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyTransactionByIDHook>>>>
export type AMSPoliciesGetPolicyTransactionByIDQueryError = unknown

export const useAMSPoliciesGetPolicyTransactionByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyTransactionByIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyTransactionByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetPolicyTransactionByIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetPolicyEmployerInformationByIDHook = () => {
        const aMSPoliciesGetPolicyEmployerInformationByID = useCustomInstance<DomainModelAMSModelAMSPoliciesEmployerInformation[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetPolicyEmployerInformationByID(
          {url: `/api/AMSPolicies/GetPolicyEmployerinformation/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetPolicyEmployerInformationByIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetPolicyEmployerinformation/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetPolicyEmployerInformationByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyEmployerInformationByIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyEmployerInformationByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetPolicyEmployerInformationByIDQueryKey(policyId);

  const aMSPoliciesGetPolicyEmployerInformationByID =  useAMSPoliciesGetPolicyEmployerInformationByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyEmployerInformationByIDHook>>>> = ({ signal }) => aMSPoliciesGetPolicyEmployerInformationByID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyEmployerInformationByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetPolicyEmployerInformationByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyEmployerInformationByIDHook>>>>
export type AMSPoliciesGetPolicyEmployerInformationByIDQueryError = unknown

export const useAMSPoliciesGetPolicyEmployerInformationByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyEmployerInformationByIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPolicyEmployerInformationByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetPolicyEmployerInformationByIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetGeneralInformationByIDHook = () => {
        const aMSPoliciesGetGeneralInformationByID = useCustomInstance<DomainModelAMSModelAMSPoliciesGeneralInformation[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetGeneralInformationByID(
          {url: `/api/AMSPolicies/GetPolicyGeneralinformation/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetGeneralInformationByIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetPolicyGeneralinformation/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetGeneralInformationByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetGeneralInformationByIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetGeneralInformationByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetGeneralInformationByIDQueryKey(policyId);

  const aMSPoliciesGetGeneralInformationByID =  useAMSPoliciesGetGeneralInformationByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetGeneralInformationByIDHook>>>> = ({ signal }) => aMSPoliciesGetGeneralInformationByID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetGeneralInformationByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetGeneralInformationByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetGeneralInformationByIDHook>>>>
export type AMSPoliciesGetGeneralInformationByIDQueryError = unknown

export const useAMSPoliciesGetGeneralInformationByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetGeneralInformationByIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetGeneralInformationByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetGeneralInformationByIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetPreviouceAddressByIDHook = () => {
        const aMSPoliciesGetPreviouceAddressByID = useCustomInstance<DomainModelAMSModelAMSPoliciesPreviouceAddress[]>();

        return (
    policyId: string,
 signal?: AbortSignal
) => {
        return aMSPoliciesGetPreviouceAddressByID(
          {url: `/api/AMSPolicies/GetPolicyPreviouceAddress/${policyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetPreviouceAddressByIDQueryKey = (policyId: string,) => {
    return [`/api/AMSPolicies/GetPolicyPreviouceAddress/${policyId}`] as const;
    }

    
export const useAMSPoliciesGetPreviouceAddressByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPreviouceAddressByIDHook>>>, TError = unknown>(policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPreviouceAddressByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetPreviouceAddressByIDQueryKey(policyId);

  const aMSPoliciesGetPreviouceAddressByID =  useAMSPoliciesGetPreviouceAddressByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPreviouceAddressByIDHook>>>> = ({ signal }) => aMSPoliciesGetPreviouceAddressByID(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPreviouceAddressByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetPreviouceAddressByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPreviouceAddressByIDHook>>>>
export type AMSPoliciesGetPreviouceAddressByIDQueryError = unknown

export const useAMSPoliciesGetPreviouceAddressByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPreviouceAddressByIDHook>>>, TError = unknown>(
 policyId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetPreviouceAddressByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetPreviouceAddressByIDQueryOptions(policyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSPoliciesGetAllHook = () => {
        const aMSPoliciesGetAll = useCustomInstance<DomainModelModelAMSPoliciesActionDropDownEntry>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSPoliciesGetAll(
          {url: `/api/AMSPolicies/GetAllAction`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSPoliciesGetAllQueryKey = () => {
    return [`/api/AMSPolicies/GetAllAction`] as const;
    }

    
export const useAMSPoliciesGetAllQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetAllHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetAllHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSPoliciesGetAllQueryKey();

  const aMSPoliciesGetAll =  useAMSPoliciesGetAllHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetAllHook>>>> = ({ signal }) => aMSPoliciesGetAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetAllHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSPoliciesGetAllQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetAllHook>>>>
export type AMSPoliciesGetAllQueryError = unknown

export const useAMSPoliciesGetAll = <TData = Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetAllHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSPoliciesGetAllHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSPoliciesGetAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSReceiptGetAllReceiptsHook = () => {
        const aMSReceiptGetAllReceipts = useCustomInstance<DomainModelAMSModelAMSReceipt[]>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSReceiptGetAllReceipts(
          {url: `/api/AMSReceipts/GetAllReceipts`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSReceiptGetAllReceiptsQueryKey = () => {
    return [`/api/AMSReceipts/GetAllReceipts`] as const;
    }

    
export const useAMSReceiptGetAllReceiptsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetAllReceiptsHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetAllReceiptsHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSReceiptGetAllReceiptsQueryKey();

  const aMSReceiptGetAllReceipts =  useAMSReceiptGetAllReceiptsHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetAllReceiptsHook>>>> = ({ signal }) => aMSReceiptGetAllReceipts(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetAllReceiptsHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSReceiptGetAllReceiptsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetAllReceiptsHook>>>>
export type AMSReceiptGetAllReceiptsQueryError = unknown

export const useAMSReceiptGetAllReceipts = <TData = Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetAllReceiptsHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetAllReceiptsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSReceiptGetAllReceiptsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSReceiptGetReceiptByIDHook = () => {
        const aMSReceiptGetReceiptByID = useCustomInstance<DomainModelAMSModelAMSReceipt>();

        return (
    cashReceiptDetailId: string,
 signal?: AbortSignal
) => {
        return aMSReceiptGetReceiptByID(
          {url: `/api/AMSReceipts/GetReceiptByID/${cashReceiptDetailId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSReceiptGetReceiptByIDQueryKey = (cashReceiptDetailId: string,) => {
    return [`/api/AMSReceipts/GetReceiptByID/${cashReceiptDetailId}`] as const;
    }

    
export const useAMSReceiptGetReceiptByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetReceiptByIDHook>>>, TError = unknown>(cashReceiptDetailId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetReceiptByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSReceiptGetReceiptByIDQueryKey(cashReceiptDetailId);

  const aMSReceiptGetReceiptByID =  useAMSReceiptGetReceiptByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetReceiptByIDHook>>>> = ({ signal }) => aMSReceiptGetReceiptByID(cashReceiptDetailId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cashReceiptDetailId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetReceiptByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSReceiptGetReceiptByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetReceiptByIDHook>>>>
export type AMSReceiptGetReceiptByIDQueryError = unknown

export const useAMSReceiptGetReceiptByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetReceiptByIDHook>>>, TError = unknown>(
 cashReceiptDetailId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetReceiptByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSReceiptGetReceiptByIDQueryOptions(cashReceiptDetailId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSReceiptGetSystemgeneratedwaiverByIDHook = () => {
        const aMSReceiptGetSystemgeneratedwaiverByID = useCustomInstance<DomainModelAMSModelAMSSystemGeneratedWaivers[]>();

        return (
    cashReceiptDetailId: string,
 signal?: AbortSignal
) => {
        return aMSReceiptGetSystemgeneratedwaiverByID(
          {url: `/api/AMSReceipts/SYStemGeneratedwaiver/${cashReceiptDetailId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSReceiptGetSystemgeneratedwaiverByIDQueryKey = (cashReceiptDetailId: string,) => {
    return [`/api/AMSReceipts/SYStemGeneratedwaiver/${cashReceiptDetailId}`] as const;
    }

    
export const useAMSReceiptGetSystemgeneratedwaiverByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetSystemgeneratedwaiverByIDHook>>>, TError = unknown>(cashReceiptDetailId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetSystemgeneratedwaiverByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSReceiptGetSystemgeneratedwaiverByIDQueryKey(cashReceiptDetailId);

  const aMSReceiptGetSystemgeneratedwaiverByID =  useAMSReceiptGetSystemgeneratedwaiverByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetSystemgeneratedwaiverByIDHook>>>> = ({ signal }) => aMSReceiptGetSystemgeneratedwaiverByID(cashReceiptDetailId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cashReceiptDetailId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetSystemgeneratedwaiverByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSReceiptGetSystemgeneratedwaiverByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetSystemgeneratedwaiverByIDHook>>>>
export type AMSReceiptGetSystemgeneratedwaiverByIDQueryError = unknown

export const useAMSReceiptGetSystemgeneratedwaiverByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetSystemgeneratedwaiverByIDHook>>>, TError = unknown>(
 cashReceiptDetailId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetSystemgeneratedwaiverByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSReceiptGetSystemgeneratedwaiverByIDQueryOptions(cashReceiptDetailId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSReceiptGetreceiptVoucherByIDHook = () => {
        const aMSReceiptGetreceiptVoucherByID = useCustomInstance<DomainModelAMSModelAMSJournalVoucherModel[]>();

        return (
    cashReceiptDetailId: string,
 signal?: AbortSignal
) => {
        return aMSReceiptGetreceiptVoucherByID(
          {url: `/api/AMSReceipts/ReceiptVoucher/${cashReceiptDetailId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSReceiptGetreceiptVoucherByIDQueryKey = (cashReceiptDetailId: string,) => {
    return [`/api/AMSReceipts/ReceiptVoucher/${cashReceiptDetailId}`] as const;
    }

    
export const useAMSReceiptGetreceiptVoucherByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetreceiptVoucherByIDHook>>>, TError = unknown>(cashReceiptDetailId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetreceiptVoucherByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSReceiptGetreceiptVoucherByIDQueryKey(cashReceiptDetailId);

  const aMSReceiptGetreceiptVoucherByID =  useAMSReceiptGetreceiptVoucherByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetreceiptVoucherByIDHook>>>> = ({ signal }) => aMSReceiptGetreceiptVoucherByID(cashReceiptDetailId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cashReceiptDetailId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetreceiptVoucherByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSReceiptGetreceiptVoucherByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetreceiptVoucherByIDHook>>>>
export type AMSReceiptGetreceiptVoucherByIDQueryError = unknown

export const useAMSReceiptGetreceiptVoucherByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetreceiptVoucherByIDHook>>>, TError = unknown>(
 cashReceiptDetailId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetreceiptVoucherByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSReceiptGetreceiptVoucherByIDQueryOptions(cashReceiptDetailId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSReceiptGetReceiptInformationByIDHook = () => {
        const aMSReceiptGetReceiptInformationByID = useCustomInstance<DomainModelAMSModelAMSReceiptGeneralInformation>();

        return (
    cashReceiptDetailId: string,
 signal?: AbortSignal
) => {
        return aMSReceiptGetReceiptInformationByID(
          {url: `/api/AMSReceipts/Receiptinformation/${cashReceiptDetailId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSReceiptGetReceiptInformationByIDQueryKey = (cashReceiptDetailId: string,) => {
    return [`/api/AMSReceipts/Receiptinformation/${cashReceiptDetailId}`] as const;
    }

    
export const useAMSReceiptGetReceiptInformationByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetReceiptInformationByIDHook>>>, TError = unknown>(cashReceiptDetailId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetReceiptInformationByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSReceiptGetReceiptInformationByIDQueryKey(cashReceiptDetailId);

  const aMSReceiptGetReceiptInformationByID =  useAMSReceiptGetReceiptInformationByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetReceiptInformationByIDHook>>>> = ({ signal }) => aMSReceiptGetReceiptInformationByID(cashReceiptDetailId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cashReceiptDetailId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetReceiptInformationByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSReceiptGetReceiptInformationByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetReceiptInformationByIDHook>>>>
export type AMSReceiptGetReceiptInformationByIDQueryError = unknown

export const useAMSReceiptGetReceiptInformationByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetReceiptInformationByIDHook>>>, TError = unknown>(
 cashReceiptDetailId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetReceiptInformationByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSReceiptGetReceiptInformationByIDQueryOptions(cashReceiptDetailId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSReceiptGetReceiptVoidInformationByIDHook = () => {
        const aMSReceiptGetReceiptVoidInformationByID = useCustomInstance<DomainModelAMSModelAMSReceiptVoidInformation[]>();

        return (
    cashReceiptDetailId: string,
 signal?: AbortSignal
) => {
        return aMSReceiptGetReceiptVoidInformationByID(
          {url: `/api/AMSReceipts/ReceiptVoid/${cashReceiptDetailId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSReceiptGetReceiptVoidInformationByIDQueryKey = (cashReceiptDetailId: string,) => {
    return [`/api/AMSReceipts/ReceiptVoid/${cashReceiptDetailId}`] as const;
    }

    
export const useAMSReceiptGetReceiptVoidInformationByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetReceiptVoidInformationByIDHook>>>, TError = unknown>(cashReceiptDetailId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetReceiptVoidInformationByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSReceiptGetReceiptVoidInformationByIDQueryKey(cashReceiptDetailId);

  const aMSReceiptGetReceiptVoidInformationByID =  useAMSReceiptGetReceiptVoidInformationByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetReceiptVoidInformationByIDHook>>>> = ({ signal }) => aMSReceiptGetReceiptVoidInformationByID(cashReceiptDetailId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cashReceiptDetailId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetReceiptVoidInformationByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSReceiptGetReceiptVoidInformationByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetReceiptVoidInformationByIDHook>>>>
export type AMSReceiptGetReceiptVoidInformationByIDQueryError = unknown

export const useAMSReceiptGetReceiptVoidInformationByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetReceiptVoidInformationByIDHook>>>, TError = unknown>(
 cashReceiptDetailId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSReceiptGetReceiptVoidInformationByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSReceiptGetReceiptVoidInformationByIDQueryOptions(cashReceiptDetailId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSRecentCustomerGetAllRecentCustomerHook = () => {
        const aMSRecentCustomerGetAllRecentCustomer = useCustomInstance<DomainModelAMSModelAMSRecentCustomer[]>();

        return (
    
 signal?: AbortSignal
) => {
        return aMSRecentCustomerGetAllRecentCustomer(
          {url: `/api/AMSRecentcustomer/AllRecentCustomer`, method: 'GET', signal
    },
          );
        }
      }
    

export const getAMSRecentCustomerGetAllRecentCustomerQueryKey = () => {
    return [`/api/AMSRecentcustomer/AllRecentCustomer`] as const;
    }

    
export const useAMSRecentCustomerGetAllRecentCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSRecentCustomerGetAllRecentCustomerHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSRecentCustomerGetAllRecentCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSRecentCustomerGetAllRecentCustomerQueryKey();

  const aMSRecentCustomerGetAllRecentCustomer =  useAMSRecentCustomerGetAllRecentCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSRecentCustomerGetAllRecentCustomerHook>>>> = ({ signal }) => aMSRecentCustomerGetAllRecentCustomer(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSRecentCustomerGetAllRecentCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSRecentCustomerGetAllRecentCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSRecentCustomerGetAllRecentCustomerHook>>>>
export type AMSRecentCustomerGetAllRecentCustomerQueryError = unknown

export const useAMSRecentCustomerGetAllRecentCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useAMSRecentCustomerGetAllRecentCustomerHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSRecentCustomerGetAllRecentCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSRecentCustomerGetAllRecentCustomerQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useAMSRecentCustomerGetCUstomerByIDHook = () => {
        const aMSRecentCustomerGetCUstomerByID = useCustomInstance<DomainModelAMSModelAMSRecentCustomer>();

        return (
    params?: AMSRecentCustomerGetCUstomerByIDParams,
 signal?: AbortSignal
) => {
        return aMSRecentCustomerGetCUstomerByID(
          {url: `/api/AMSRecentcustomer/ADDAMSRecentcustomer`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getAMSRecentCustomerGetCUstomerByIDQueryKey = (params?: AMSRecentCustomerGetCUstomerByIDParams,) => {
    return [`/api/AMSRecentcustomer/ADDAMSRecentcustomer`, ...(params ? [params]: [])] as const;
    }

    
export const useAMSRecentCustomerGetCUstomerByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAMSRecentCustomerGetCUstomerByIDHook>>>, TError = unknown>(params?: AMSRecentCustomerGetCUstomerByIDParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSRecentCustomerGetCUstomerByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAMSRecentCustomerGetCUstomerByIDQueryKey(params);

  const aMSRecentCustomerGetCUstomerByID =  useAMSRecentCustomerGetCUstomerByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAMSRecentCustomerGetCUstomerByIDHook>>>> = ({ signal }) => aMSRecentCustomerGetCUstomerByID(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSRecentCustomerGetCUstomerByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type AMSRecentCustomerGetCUstomerByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAMSRecentCustomerGetCUstomerByIDHook>>>>
export type AMSRecentCustomerGetCUstomerByIDQueryError = unknown

export const useAMSRecentCustomerGetCUstomerByID = <TData = Awaited<ReturnType<ReturnType<typeof useAMSRecentCustomerGetCUstomerByIDHook>>>, TError = unknown>(
 params?: AMSRecentCustomerGetCUstomerByIDParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAMSRecentCustomerGetCUstomerByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useAMSRecentCustomerGetCUstomerByIDQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useBillingMethodGetAllBillingMethodHook = () => {
        const billingMethodGetAllBillingMethod = useCustomInstance<DomainModelBenchmarkBillingMethod[]>();

        return (
    
 signal?: AbortSignal
) => {
        return billingMethodGetAllBillingMethod(
          {url: `/api/BillingMethod/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getBillingMethodGetAllBillingMethodQueryKey = () => {
    return [`/api/BillingMethod/getAll`] as const;
    }

    
export const useBillingMethodGetAllBillingMethodQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useBillingMethodGetAllBillingMethodHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingMethodGetAllBillingMethodHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBillingMethodGetAllBillingMethodQueryKey();

  const billingMethodGetAllBillingMethod =  useBillingMethodGetAllBillingMethodHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useBillingMethodGetAllBillingMethodHook>>>> = ({ signal }) => billingMethodGetAllBillingMethod(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingMethodGetAllBillingMethodHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type BillingMethodGetAllBillingMethodQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBillingMethodGetAllBillingMethodHook>>>>
export type BillingMethodGetAllBillingMethodQueryError = unknown

export const useBillingMethodGetAllBillingMethod = <TData = Awaited<ReturnType<ReturnType<typeof useBillingMethodGetAllBillingMethodHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingMethodGetAllBillingMethodHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useBillingMethodGetAllBillingMethodQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useBillingMethodGetHook = () => {
        const billingMethodGet = useCustomInstance<DomainModelBenchmarkBillingMethod>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return billingMethodGet(
          {url: `/api/BillingMethod/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getBillingMethodGetQueryKey = (id: number,) => {
    return [`/api/BillingMethod/get/${id}`] as const;
    }

    
export const useBillingMethodGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useBillingMethodGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingMethodGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBillingMethodGetQueryKey(id);

  const billingMethodGet =  useBillingMethodGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useBillingMethodGetHook>>>> = ({ signal }) => billingMethodGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingMethodGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type BillingMethodGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBillingMethodGetHook>>>>
export type BillingMethodGetQueryError = unknown

export const useBillingMethodGet = <TData = Awaited<ReturnType<ReturnType<typeof useBillingMethodGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingMethodGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useBillingMethodGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useBillingMethodPostBillingMethodHook = () => {
        const billingMethodPostBillingMethod = useCustomInstance<DomainModelBenchmarkBillingMethod>();

        return (
    domainModelBenchmarkBillingMethodBody: DomainModelBenchmarkBillingMethodBody,
 ) => {
        return billingMethodPostBillingMethod(
          {url: `/api/BillingMethod/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkBillingMethodBody
    },
          );
        }
      }
    


export const useBillingMethodPostBillingMethodMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBillingMethodPostBillingMethodHook>>>, TError,{data: DomainModelBenchmarkBillingMethodBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBillingMethodPostBillingMethodHook>>>, TError,{data: DomainModelBenchmarkBillingMethodBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const billingMethodPostBillingMethod =  useBillingMethodPostBillingMethodHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useBillingMethodPostBillingMethodHook>>>, {data: DomainModelBenchmarkBillingMethodBody}> = (props) => {
          const {data} = props ?? {};

          return  billingMethodPostBillingMethod(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type BillingMethodPostBillingMethodMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBillingMethodPostBillingMethodHook>>>>
    export type BillingMethodPostBillingMethodMutationBody = DomainModelBenchmarkBillingMethodBody
    export type BillingMethodPostBillingMethodMutationError = unknown

    export const useBillingMethodPostBillingMethod = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBillingMethodPostBillingMethodHook>>>, TError,{data: DomainModelBenchmarkBillingMethodBody}, TContext>, }
) => {

      const mutationOptions = useBillingMethodPostBillingMethodMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useBillingMethodPutBillingMethodHook = () => {
        const billingMethodPutBillingMethod = useCustomInstance<DomainModelBenchmarkBillingMethod>();

        return (
    domainModelBenchmarkBillingMethodBody: DomainModelBenchmarkBillingMethodBody,
 ) => {
        return billingMethodPutBillingMethod(
          {url: `/api/BillingMethod/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkBillingMethodBody
    },
          );
        }
      }
    


export const useBillingMethodPutBillingMethodMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBillingMethodPutBillingMethodHook>>>, TError,{data: DomainModelBenchmarkBillingMethodBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBillingMethodPutBillingMethodHook>>>, TError,{data: DomainModelBenchmarkBillingMethodBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const billingMethodPutBillingMethod =  useBillingMethodPutBillingMethodHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useBillingMethodPutBillingMethodHook>>>, {data: DomainModelBenchmarkBillingMethodBody}> = (props) => {
          const {data} = props ?? {};

          return  billingMethodPutBillingMethod(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type BillingMethodPutBillingMethodMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBillingMethodPutBillingMethodHook>>>>
    export type BillingMethodPutBillingMethodMutationBody = DomainModelBenchmarkBillingMethodBody
    export type BillingMethodPutBillingMethodMutationError = unknown

    export const useBillingMethodPutBillingMethod = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBillingMethodPutBillingMethodHook>>>, TError,{data: DomainModelBenchmarkBillingMethodBody}, TContext>, }
) => {

      const mutationOptions = useBillingMethodPutBillingMethodMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useBillingMethodDeleteBillingMethodHook = () => {
        const billingMethodDeleteBillingMethod = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return billingMethodDeleteBillingMethod(
          {url: `/api/BillingMethod/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getBillingMethodDeleteBillingMethodQueryKey = (id: number,) => {
    return [`/api/BillingMethod/delete/${id}`] as const;
    }

    
export const useBillingMethodDeleteBillingMethodQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useBillingMethodDeleteBillingMethodHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingMethodDeleteBillingMethodHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBillingMethodDeleteBillingMethodQueryKey(id);

  const billingMethodDeleteBillingMethod =  useBillingMethodDeleteBillingMethodHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useBillingMethodDeleteBillingMethodHook>>>> = ({ signal }) => billingMethodDeleteBillingMethod(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingMethodDeleteBillingMethodHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type BillingMethodDeleteBillingMethodQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBillingMethodDeleteBillingMethodHook>>>>
export type BillingMethodDeleteBillingMethodQueryError = unknown

export const useBillingMethodDeleteBillingMethod = <TData = Awaited<ReturnType<ReturnType<typeof useBillingMethodDeleteBillingMethodHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingMethodDeleteBillingMethodHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useBillingMethodDeleteBillingMethodQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useBillingMethodGetAllBillingMethodWithFiltersHook = () => {
        const billingMethodGetAllBillingMethodWithFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkBillingMethod>();

        return (
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return billingMethodGetAllBillingMethodWithFilters(
          {url: `/api/BillingMethod/GetAllBillingMethodWithFilters/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getBillingMethodGetAllBillingMethodWithFiltersQueryKey = (startIndex: number,
    endIndex: number,) => {
    return [`/api/BillingMethod/GetAllBillingMethodWithFilters/${startIndex}/${endIndex}`] as const;
    }

    
export const useBillingMethodGetAllBillingMethodWithFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useBillingMethodGetAllBillingMethodWithFiltersHook>>>, TError = unknown>(startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingMethodGetAllBillingMethodWithFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBillingMethodGetAllBillingMethodWithFiltersQueryKey(startIndex,endIndex);

  const billingMethodGetAllBillingMethodWithFilters =  useBillingMethodGetAllBillingMethodWithFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useBillingMethodGetAllBillingMethodWithFiltersHook>>>> = ({ signal }) => billingMethodGetAllBillingMethodWithFilters(startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingMethodGetAllBillingMethodWithFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type BillingMethodGetAllBillingMethodWithFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBillingMethodGetAllBillingMethodWithFiltersHook>>>>
export type BillingMethodGetAllBillingMethodWithFiltersQueryError = unknown

export const useBillingMethodGetAllBillingMethodWithFilters = <TData = Awaited<ReturnType<ReturnType<typeof useBillingMethodGetAllBillingMethodWithFiltersHook>>>, TError = unknown>(
 startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingMethodGetAllBillingMethodWithFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useBillingMethodGetAllBillingMethodWithFiltersQueryOptions(startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useBillingOptionGetAllBillingOptionHook = () => {
        const billingOptionGetAllBillingOption = useCustomInstance<DomainModelBenchmarkBillingOption[]>();

        return (
    
 signal?: AbortSignal
) => {
        return billingOptionGetAllBillingOption(
          {url: `/api/BillingOption/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getBillingOptionGetAllBillingOptionQueryKey = () => {
    return [`/api/BillingOption/getAll`] as const;
    }

    
export const useBillingOptionGetAllBillingOptionQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useBillingOptionGetAllBillingOptionHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetAllBillingOptionHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBillingOptionGetAllBillingOptionQueryKey();

  const billingOptionGetAllBillingOption =  useBillingOptionGetAllBillingOptionHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetAllBillingOptionHook>>>> = ({ signal }) => billingOptionGetAllBillingOption(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetAllBillingOptionHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type BillingOptionGetAllBillingOptionQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetAllBillingOptionHook>>>>
export type BillingOptionGetAllBillingOptionQueryError = unknown

export const useBillingOptionGetAllBillingOption = <TData = Awaited<ReturnType<ReturnType<typeof useBillingOptionGetAllBillingOptionHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetAllBillingOptionHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useBillingOptionGetAllBillingOptionQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useBillingOptionGetHook = () => {
        const billingOptionGet = useCustomInstance<DomainModelBenchmarkBillingOption>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return billingOptionGet(
          {url: `/api/BillingOption/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getBillingOptionGetQueryKey = (id: number,) => {
    return [`/api/BillingOption/get/${id}`] as const;
    }

    
export const useBillingOptionGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useBillingOptionGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBillingOptionGetQueryKey(id);

  const billingOptionGet =  useBillingOptionGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetHook>>>> = ({ signal }) => billingOptionGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type BillingOptionGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetHook>>>>
export type BillingOptionGetQueryError = unknown

export const useBillingOptionGet = <TData = Awaited<ReturnType<ReturnType<typeof useBillingOptionGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useBillingOptionGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useBillingOptionGetAllBillingOptionByStatusHook = () => {
        const billingOptionGetAllBillingOptionByStatus = useCustomInstance<DomainModelBenchmarkBillingOption[]>();

        return (
    statusId: number,
 signal?: AbortSignal
) => {
        return billingOptionGetAllBillingOptionByStatus(
          {url: `/api/statuses/${statusId}/BillingOption`, method: 'GET', signal
    },
          );
        }
      }
    

export const getBillingOptionGetAllBillingOptionByStatusQueryKey = (statusId: number,) => {
    return [`/api/statuses/${statusId}/BillingOption`] as const;
    }

    
export const useBillingOptionGetAllBillingOptionByStatusQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useBillingOptionGetAllBillingOptionByStatusHook>>>, TError = unknown>(statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetAllBillingOptionByStatusHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBillingOptionGetAllBillingOptionByStatusQueryKey(statusId);

  const billingOptionGetAllBillingOptionByStatus =  useBillingOptionGetAllBillingOptionByStatusHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetAllBillingOptionByStatusHook>>>> = ({ signal }) => billingOptionGetAllBillingOptionByStatus(statusId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(statusId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetAllBillingOptionByStatusHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type BillingOptionGetAllBillingOptionByStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetAllBillingOptionByStatusHook>>>>
export type BillingOptionGetAllBillingOptionByStatusQueryError = unknown

export const useBillingOptionGetAllBillingOptionByStatus = <TData = Awaited<ReturnType<ReturnType<typeof useBillingOptionGetAllBillingOptionByStatusHook>>>, TError = unknown>(
 statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetAllBillingOptionByStatusHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useBillingOptionGetAllBillingOptionByStatusQueryOptions(statusId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useBillingOptionGetBillingOptionByCustomerIdHook = () => {
        const billingOptionGetBillingOptionByCustomerId = useCustomInstance<DomainModelBenchmarkBillingOption[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return billingOptionGetBillingOptionByCustomerId(
          {url: `/api/customers/${customerId}/BillingOption`, method: 'GET', signal
    },
          );
        }
      }
    

export const getBillingOptionGetBillingOptionByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/BillingOption`] as const;
    }

    
export const useBillingOptionGetBillingOptionByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useBillingOptionGetBillingOptionByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetBillingOptionByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBillingOptionGetBillingOptionByCustomerIdQueryKey(customerId);

  const billingOptionGetBillingOptionByCustomerId =  useBillingOptionGetBillingOptionByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetBillingOptionByCustomerIdHook>>>> = ({ signal }) => billingOptionGetBillingOptionByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetBillingOptionByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type BillingOptionGetBillingOptionByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetBillingOptionByCustomerIdHook>>>>
export type BillingOptionGetBillingOptionByCustomerIdQueryError = unknown

export const useBillingOptionGetBillingOptionByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof useBillingOptionGetBillingOptionByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetBillingOptionByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useBillingOptionGetBillingOptionByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useBillingOptionPostBillingOptionHook = () => {
        const billingOptionPostBillingOption = useCustomInstance<DomainModelBenchmarkBillingOption>();

        return (
    domainModelBenchmarkBillingOptionBody: DomainModelBenchmarkBillingOptionBody,
 ) => {
        return billingOptionPostBillingOption(
          {url: `/api/BillingOption/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkBillingOptionBody
    },
          );
        }
      }
    


export const useBillingOptionPostBillingOptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionPostBillingOptionHook>>>, TError,{data: DomainModelBenchmarkBillingOptionBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionPostBillingOptionHook>>>, TError,{data: DomainModelBenchmarkBillingOptionBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const billingOptionPostBillingOption =  useBillingOptionPostBillingOptionHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useBillingOptionPostBillingOptionHook>>>, {data: DomainModelBenchmarkBillingOptionBody}> = (props) => {
          const {data} = props ?? {};

          return  billingOptionPostBillingOption(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type BillingOptionPostBillingOptionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBillingOptionPostBillingOptionHook>>>>
    export type BillingOptionPostBillingOptionMutationBody = DomainModelBenchmarkBillingOptionBody
    export type BillingOptionPostBillingOptionMutationError = unknown

    export const useBillingOptionPostBillingOption = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionPostBillingOptionHook>>>, TError,{data: DomainModelBenchmarkBillingOptionBody}, TContext>, }
) => {

      const mutationOptions = useBillingOptionPostBillingOptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useBillingOptionRateBillingOptionHook = () => {
        const billingOptionRateBillingOption = useCustomInstance<DomainModelBenchmarkBillingOption>();

        return (
    domainModelBenchmarkBillingOptionBody: DomainModelBenchmarkBillingOptionBody,
 ) => {
        return billingOptionRateBillingOption(
          {url: `/api/BillingOption/rate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkBillingOptionBody
    },
          );
        }
      }
    


export const useBillingOptionRateBillingOptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionRateBillingOptionHook>>>, TError,{data: DomainModelBenchmarkBillingOptionBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionRateBillingOptionHook>>>, TError,{data: DomainModelBenchmarkBillingOptionBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const billingOptionRateBillingOption =  useBillingOptionRateBillingOptionHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useBillingOptionRateBillingOptionHook>>>, {data: DomainModelBenchmarkBillingOptionBody}> = (props) => {
          const {data} = props ?? {};

          return  billingOptionRateBillingOption(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type BillingOptionRateBillingOptionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBillingOptionRateBillingOptionHook>>>>
    export type BillingOptionRateBillingOptionMutationBody = DomainModelBenchmarkBillingOptionBody
    export type BillingOptionRateBillingOptionMutationError = unknown

    export const useBillingOptionRateBillingOption = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionRateBillingOptionHook>>>, TError,{data: DomainModelBenchmarkBillingOptionBody}, TContext>, }
) => {

      const mutationOptions = useBillingOptionRateBillingOptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useBillingOptionPutBillingOptionHook = () => {
        const billingOptionPutBillingOption = useCustomInstance<DomainModelBenchmarkBillingOption>();

        return (
    domainModelBenchmarkBillingOptionBody: DomainModelBenchmarkBillingOptionBody,
 ) => {
        return billingOptionPutBillingOption(
          {url: `/api/BillingOption/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkBillingOptionBody
    },
          );
        }
      }
    


export const useBillingOptionPutBillingOptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionPutBillingOptionHook>>>, TError,{data: DomainModelBenchmarkBillingOptionBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionPutBillingOptionHook>>>, TError,{data: DomainModelBenchmarkBillingOptionBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const billingOptionPutBillingOption =  useBillingOptionPutBillingOptionHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useBillingOptionPutBillingOptionHook>>>, {data: DomainModelBenchmarkBillingOptionBody}> = (props) => {
          const {data} = props ?? {};

          return  billingOptionPutBillingOption(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type BillingOptionPutBillingOptionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBillingOptionPutBillingOptionHook>>>>
    export type BillingOptionPutBillingOptionMutationBody = DomainModelBenchmarkBillingOptionBody
    export type BillingOptionPutBillingOptionMutationError = unknown

    export const useBillingOptionPutBillingOption = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionPutBillingOptionHook>>>, TError,{data: DomainModelBenchmarkBillingOptionBody}, TContext>, }
) => {

      const mutationOptions = useBillingOptionPutBillingOptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useBillingOptionDeleteBillingOptionHook = () => {
        const billingOptionDeleteBillingOption = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return billingOptionDeleteBillingOption(
          {url: `/api/BillingOption/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getBillingOptionDeleteBillingOptionQueryKey = (id: number,) => {
    return [`/api/BillingOption/delete/${id}`] as const;
    }

    
export const useBillingOptionDeleteBillingOptionQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useBillingOptionDeleteBillingOptionHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionDeleteBillingOptionHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBillingOptionDeleteBillingOptionQueryKey(id);

  const billingOptionDeleteBillingOption =  useBillingOptionDeleteBillingOptionHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useBillingOptionDeleteBillingOptionHook>>>> = ({ signal }) => billingOptionDeleteBillingOption(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionDeleteBillingOptionHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type BillingOptionDeleteBillingOptionQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBillingOptionDeleteBillingOptionHook>>>>
export type BillingOptionDeleteBillingOptionQueryError = unknown

export const useBillingOptionDeleteBillingOption = <TData = Awaited<ReturnType<ReturnType<typeof useBillingOptionDeleteBillingOptionHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionDeleteBillingOptionHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useBillingOptionDeleteBillingOptionQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useBillingOptionUpdateBillingOptionHook = () => {
        const billingOptionUpdateBillingOption = useCustomInstance<DomainModelBenchmarkBillingOption[]>();

        return (
    domainModelBenchmarkBillingOption: DomainModelBenchmarkBillingOption[],
 ) => {
        return billingOptionUpdateBillingOption(
          {url: `/api/BillingOption/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkBillingOption
    },
          );
        }
      }
    


export const useBillingOptionUpdateBillingOptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionUpdateBillingOptionHook>>>, TError,{data: DomainModelBenchmarkBillingOption[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionUpdateBillingOptionHook>>>, TError,{data: DomainModelBenchmarkBillingOption[]}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const billingOptionUpdateBillingOption =  useBillingOptionUpdateBillingOptionHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useBillingOptionUpdateBillingOptionHook>>>, {data: DomainModelBenchmarkBillingOption[]}> = (props) => {
          const {data} = props ?? {};

          return  billingOptionUpdateBillingOption(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type BillingOptionUpdateBillingOptionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBillingOptionUpdateBillingOptionHook>>>>
    export type BillingOptionUpdateBillingOptionMutationBody = DomainModelBenchmarkBillingOption[]
    export type BillingOptionUpdateBillingOptionMutationError = unknown

    export const useBillingOptionUpdateBillingOption = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionUpdateBillingOptionHook>>>, TError,{data: DomainModelBenchmarkBillingOption[]}, TContext>, }
) => {

      const mutationOptions = useBillingOptionUpdateBillingOptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useBillingOptionChangeBillingOptionHook = () => {
        const billingOptionChangeBillingOption = useCustomInstance<BillingOptionChangeBillingOption200OneItem[] | BillingOptionChangeBillingOption200TwoItem[] | BillingOptionChangeBillingOption200ThreeItem[] | BillingOptionChangeBillingOption200FourItem[]>();

        return (
    domainModelBenchmarkCustomerBody: DomainModelBenchmarkCustomerBody,
 ) => {
        return billingOptionChangeBillingOption(
          {url: `/api/BillingOption/ChangeBillingOption`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkCustomerBody
    },
          );
        }
      }
    


export const useBillingOptionChangeBillingOptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionChangeBillingOptionHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionChangeBillingOptionHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const billingOptionChangeBillingOption =  useBillingOptionChangeBillingOptionHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useBillingOptionChangeBillingOptionHook>>>, {data: DomainModelBenchmarkCustomerBody}> = (props) => {
          const {data} = props ?? {};

          return  billingOptionChangeBillingOption(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type BillingOptionChangeBillingOptionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBillingOptionChangeBillingOptionHook>>>>
    export type BillingOptionChangeBillingOptionMutationBody = DomainModelBenchmarkCustomerBody
    export type BillingOptionChangeBillingOptionMutationError = unknown

    export const useBillingOptionChangeBillingOption = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionChangeBillingOptionHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext>, }
) => {

      const mutationOptions = useBillingOptionChangeBillingOptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useBillingOptionGetAllBillingOptionWithFiltersHook = () => {
        const billingOptionGetAllBillingOptionWithFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkBillingOption>();

        return (
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return billingOptionGetAllBillingOptionWithFilters(
          {url: `/api/BillingOption/GetAllBillingOptionWithFilters/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getBillingOptionGetAllBillingOptionWithFiltersQueryKey = (startIndex: number,
    endIndex: number,) => {
    return [`/api/BillingOption/GetAllBillingOptionWithFilters/${startIndex}/${endIndex}`] as const;
    }

    
export const useBillingOptionGetAllBillingOptionWithFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useBillingOptionGetAllBillingOptionWithFiltersHook>>>, TError = unknown>(startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetAllBillingOptionWithFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBillingOptionGetAllBillingOptionWithFiltersQueryKey(startIndex,endIndex);

  const billingOptionGetAllBillingOptionWithFilters =  useBillingOptionGetAllBillingOptionWithFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetAllBillingOptionWithFiltersHook>>>> = ({ signal }) => billingOptionGetAllBillingOptionWithFilters(startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetAllBillingOptionWithFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type BillingOptionGetAllBillingOptionWithFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetAllBillingOptionWithFiltersHook>>>>
export type BillingOptionGetAllBillingOptionWithFiltersQueryError = unknown

export const useBillingOptionGetAllBillingOptionWithFilters = <TData = Awaited<ReturnType<ReturnType<typeof useBillingOptionGetAllBillingOptionWithFiltersHook>>>, TError = unknown>(
 startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBillingOptionGetAllBillingOptionWithFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useBillingOptionGetAllBillingOptionWithFiltersQueryOptions(startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useBrokerContactsGetAllBrokerContactsHook = () => {
        const brokerContactsGetAllBrokerContacts = useCustomInstance<DomainModelBenchmarkBrokerContacts[]>();

        return (
    
 signal?: AbortSignal
) => {
        return brokerContactsGetAllBrokerContacts(
          {url: `/api/BrokerContacts/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getBrokerContactsGetAllBrokerContactsQueryKey = () => {
    return [`/api/BrokerContacts/getAll`] as const;
    }

    
export const useBrokerContactsGetAllBrokerContactsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useBrokerContactsGetAllBrokerContactsHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBrokerContactsGetAllBrokerContactsHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBrokerContactsGetAllBrokerContactsQueryKey();

  const brokerContactsGetAllBrokerContacts =  useBrokerContactsGetAllBrokerContactsHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useBrokerContactsGetAllBrokerContactsHook>>>> = ({ signal }) => brokerContactsGetAllBrokerContacts(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBrokerContactsGetAllBrokerContactsHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type BrokerContactsGetAllBrokerContactsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBrokerContactsGetAllBrokerContactsHook>>>>
export type BrokerContactsGetAllBrokerContactsQueryError = unknown

export const useBrokerContactsGetAllBrokerContacts = <TData = Awaited<ReturnType<ReturnType<typeof useBrokerContactsGetAllBrokerContactsHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBrokerContactsGetAllBrokerContactsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useBrokerContactsGetAllBrokerContactsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useBrokerContactsGetHook = () => {
        const brokerContactsGet = useCustomInstance<DomainModelBenchmarkBrokerContacts>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return brokerContactsGet(
          {url: `/api/BrokerContacts/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getBrokerContactsGetQueryKey = (id: number,) => {
    return [`/api/BrokerContacts/get/${id}`] as const;
    }

    
export const useBrokerContactsGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useBrokerContactsGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBrokerContactsGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBrokerContactsGetQueryKey(id);

  const brokerContactsGet =  useBrokerContactsGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useBrokerContactsGetHook>>>> = ({ signal }) => brokerContactsGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBrokerContactsGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type BrokerContactsGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBrokerContactsGetHook>>>>
export type BrokerContactsGetQueryError = unknown

export const useBrokerContactsGet = <TData = Awaited<ReturnType<ReturnType<typeof useBrokerContactsGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBrokerContactsGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useBrokerContactsGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useBrokerContactsPostGetAllBrokerContactsHook = () => {
        const brokerContactsPostGetAllBrokerContacts = useCustomInstance<DomainModelBenchmarkBrokerContacts>();

        return (
    domainModelBenchmarkBrokerContactsBody: DomainModelBenchmarkBrokerContactsBody,
 ) => {
        return brokerContactsPostGetAllBrokerContacts(
          {url: `/api/BrokerContacts/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkBrokerContactsBody
    },
          );
        }
      }
    


export const useBrokerContactsPostGetAllBrokerContactsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBrokerContactsPostGetAllBrokerContactsHook>>>, TError,{data: DomainModelBenchmarkBrokerContactsBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBrokerContactsPostGetAllBrokerContactsHook>>>, TError,{data: DomainModelBenchmarkBrokerContactsBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const brokerContactsPostGetAllBrokerContacts =  useBrokerContactsPostGetAllBrokerContactsHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useBrokerContactsPostGetAllBrokerContactsHook>>>, {data: DomainModelBenchmarkBrokerContactsBody}> = (props) => {
          const {data} = props ?? {};

          return  brokerContactsPostGetAllBrokerContacts(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type BrokerContactsPostGetAllBrokerContactsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBrokerContactsPostGetAllBrokerContactsHook>>>>
    export type BrokerContactsPostGetAllBrokerContactsMutationBody = DomainModelBenchmarkBrokerContactsBody
    export type BrokerContactsPostGetAllBrokerContactsMutationError = unknown

    export const useBrokerContactsPostGetAllBrokerContacts = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBrokerContactsPostGetAllBrokerContactsHook>>>, TError,{data: DomainModelBenchmarkBrokerContactsBody}, TContext>, }
) => {

      const mutationOptions = useBrokerContactsPostGetAllBrokerContactsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useBrokerContactsPutGetAllBrokerContactsHook = () => {
        const brokerContactsPutGetAllBrokerContacts = useCustomInstance<DomainModelBenchmarkBrokerContacts>();

        return (
    domainModelBenchmarkBrokerContactsBody: DomainModelBenchmarkBrokerContactsBody,
 ) => {
        return brokerContactsPutGetAllBrokerContacts(
          {url: `/api/BrokerContacts/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkBrokerContactsBody
    },
          );
        }
      }
    


export const useBrokerContactsPutGetAllBrokerContactsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBrokerContactsPutGetAllBrokerContactsHook>>>, TError,{data: DomainModelBenchmarkBrokerContactsBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBrokerContactsPutGetAllBrokerContactsHook>>>, TError,{data: DomainModelBenchmarkBrokerContactsBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const brokerContactsPutGetAllBrokerContacts =  useBrokerContactsPutGetAllBrokerContactsHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useBrokerContactsPutGetAllBrokerContactsHook>>>, {data: DomainModelBenchmarkBrokerContactsBody}> = (props) => {
          const {data} = props ?? {};

          return  brokerContactsPutGetAllBrokerContacts(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type BrokerContactsPutGetAllBrokerContactsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBrokerContactsPutGetAllBrokerContactsHook>>>>
    export type BrokerContactsPutGetAllBrokerContactsMutationBody = DomainModelBenchmarkBrokerContactsBody
    export type BrokerContactsPutGetAllBrokerContactsMutationError = unknown

    export const useBrokerContactsPutGetAllBrokerContacts = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBrokerContactsPutGetAllBrokerContactsHook>>>, TError,{data: DomainModelBenchmarkBrokerContactsBody}, TContext>, }
) => {

      const mutationOptions = useBrokerContactsPutGetAllBrokerContactsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useBrokerContactsDeleteGetAllBrokerContactsHook = () => {
        const brokerContactsDeleteGetAllBrokerContacts = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return brokerContactsDeleteGetAllBrokerContacts(
          {url: `/api/BrokerContacts/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getBrokerContactsDeleteGetAllBrokerContactsQueryKey = (id: number,) => {
    return [`/api/BrokerContacts/delete/${id}`] as const;
    }

    
export const useBrokerContactsDeleteGetAllBrokerContactsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useBrokerContactsDeleteGetAllBrokerContactsHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBrokerContactsDeleteGetAllBrokerContactsHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBrokerContactsDeleteGetAllBrokerContactsQueryKey(id);

  const brokerContactsDeleteGetAllBrokerContacts =  useBrokerContactsDeleteGetAllBrokerContactsHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useBrokerContactsDeleteGetAllBrokerContactsHook>>>> = ({ signal }) => brokerContactsDeleteGetAllBrokerContacts(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBrokerContactsDeleteGetAllBrokerContactsHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type BrokerContactsDeleteGetAllBrokerContactsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBrokerContactsDeleteGetAllBrokerContactsHook>>>>
export type BrokerContactsDeleteGetAllBrokerContactsQueryError = unknown

export const useBrokerContactsDeleteGetAllBrokerContacts = <TData = Awaited<ReturnType<ReturnType<typeof useBrokerContactsDeleteGetAllBrokerContactsHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBrokerContactsDeleteGetAllBrokerContactsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useBrokerContactsDeleteGetAllBrokerContactsQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useBrokersGetAllBrokerHook = () => {
        const brokersGetAllBroker = useCustomInstance<DomainModelBenchmarkBroker[]>();

        return (
    
 signal?: AbortSignal
) => {
        return brokersGetAllBroker(
          {url: `/api/Brokers/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getBrokersGetAllBrokerQueryKey = () => {
    return [`/api/Brokers/getAll`] as const;
    }

    
export const useBrokersGetAllBrokerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useBrokersGetAllBrokerHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBrokersGetAllBrokerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBrokersGetAllBrokerQueryKey();

  const brokersGetAllBroker =  useBrokersGetAllBrokerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useBrokersGetAllBrokerHook>>>> = ({ signal }) => brokersGetAllBroker(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBrokersGetAllBrokerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type BrokersGetAllBrokerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBrokersGetAllBrokerHook>>>>
export type BrokersGetAllBrokerQueryError = unknown

export const useBrokersGetAllBroker = <TData = Awaited<ReturnType<ReturnType<typeof useBrokersGetAllBrokerHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBrokersGetAllBrokerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useBrokersGetAllBrokerQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useBrokersGetHook = () => {
        const brokersGet = useCustomInstance<DomainModelBenchmarkBroker>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return brokersGet(
          {url: `/api/Brokers/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getBrokersGetQueryKey = (id: number,) => {
    return [`/api/Brokers/get/${id}`] as const;
    }

    
export const useBrokersGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useBrokersGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBrokersGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBrokersGetQueryKey(id);

  const brokersGet =  useBrokersGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useBrokersGetHook>>>> = ({ signal }) => brokersGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBrokersGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type BrokersGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBrokersGetHook>>>>
export type BrokersGetQueryError = unknown

export const useBrokersGet = <TData = Awaited<ReturnType<ReturnType<typeof useBrokersGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBrokersGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useBrokersGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useBrokersPostBrokerHook = () => {
        const brokersPostBroker = useCustomInstance<DomainModelBenchmarkBroker>();

        return (
    domainModelBenchmarkBrokerBody: DomainModelBenchmarkBrokerBody,
 ) => {
        return brokersPostBroker(
          {url: `/api/Brokers/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkBrokerBody
    },
          );
        }
      }
    


export const useBrokersPostBrokerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBrokersPostBrokerHook>>>, TError,{data: DomainModelBenchmarkBrokerBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBrokersPostBrokerHook>>>, TError,{data: DomainModelBenchmarkBrokerBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const brokersPostBroker =  useBrokersPostBrokerHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useBrokersPostBrokerHook>>>, {data: DomainModelBenchmarkBrokerBody}> = (props) => {
          const {data} = props ?? {};

          return  brokersPostBroker(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type BrokersPostBrokerMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBrokersPostBrokerHook>>>>
    export type BrokersPostBrokerMutationBody = DomainModelBenchmarkBrokerBody
    export type BrokersPostBrokerMutationError = unknown

    export const useBrokersPostBroker = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBrokersPostBrokerHook>>>, TError,{data: DomainModelBenchmarkBrokerBody}, TContext>, }
) => {

      const mutationOptions = useBrokersPostBrokerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useBrokersPutBrokerHook = () => {
        const brokersPutBroker = useCustomInstance<DomainModelBenchmarkBroker>();

        return (
    domainModelBenchmarkBrokerBody: DomainModelBenchmarkBrokerBody,
 ) => {
        return brokersPutBroker(
          {url: `/api/Brokers/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkBrokerBody
    },
          );
        }
      }
    


export const useBrokersPutBrokerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBrokersPutBrokerHook>>>, TError,{data: DomainModelBenchmarkBrokerBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBrokersPutBrokerHook>>>, TError,{data: DomainModelBenchmarkBrokerBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const brokersPutBroker =  useBrokersPutBrokerHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useBrokersPutBrokerHook>>>, {data: DomainModelBenchmarkBrokerBody}> = (props) => {
          const {data} = props ?? {};

          return  brokersPutBroker(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type BrokersPutBrokerMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBrokersPutBrokerHook>>>>
    export type BrokersPutBrokerMutationBody = DomainModelBenchmarkBrokerBody
    export type BrokersPutBrokerMutationError = unknown

    export const useBrokersPutBroker = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBrokersPutBrokerHook>>>, TError,{data: DomainModelBenchmarkBrokerBody}, TContext>, }
) => {

      const mutationOptions = useBrokersPutBrokerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useBrokersDeleteBrokersHook = () => {
        const brokersDeleteBrokers = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return brokersDeleteBrokers(
          {url: `/api/Brokers/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getBrokersDeleteBrokersQueryKey = (id: number,) => {
    return [`/api/Brokers/delete/${id}`] as const;
    }

    
export const useBrokersDeleteBrokersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useBrokersDeleteBrokersHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBrokersDeleteBrokersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBrokersDeleteBrokersQueryKey(id);

  const brokersDeleteBrokers =  useBrokersDeleteBrokersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useBrokersDeleteBrokersHook>>>> = ({ signal }) => brokersDeleteBrokers(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBrokersDeleteBrokersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type BrokersDeleteBrokersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBrokersDeleteBrokersHook>>>>
export type BrokersDeleteBrokersQueryError = unknown

export const useBrokersDeleteBrokers = <TData = Awaited<ReturnType<ReturnType<typeof useBrokersDeleteBrokersHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBrokersDeleteBrokersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useBrokersDeleteBrokersQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useBrokersGetAllBrokerDetailsHook = () => {
        const brokersGetAllBrokerDetails = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkBroker>();

        return (
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return brokersGetAllBrokerDetails(
          {url: `/api/BrokersDetails/GetAllBrokersDetails/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getBrokersGetAllBrokerDetailsQueryKey = (startIndex: number,
    endIndex: number,) => {
    return [`/api/BrokersDetails/GetAllBrokersDetails/${startIndex}/${endIndex}`] as const;
    }

    
export const useBrokersGetAllBrokerDetailsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useBrokersGetAllBrokerDetailsHook>>>, TError = unknown>(startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBrokersGetAllBrokerDetailsHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBrokersGetAllBrokerDetailsQueryKey(startIndex,endIndex);

  const brokersGetAllBrokerDetails =  useBrokersGetAllBrokerDetailsHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useBrokersGetAllBrokerDetailsHook>>>> = ({ signal }) => brokersGetAllBrokerDetails(startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBrokersGetAllBrokerDetailsHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type BrokersGetAllBrokerDetailsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBrokersGetAllBrokerDetailsHook>>>>
export type BrokersGetAllBrokerDetailsQueryError = unknown

export const useBrokersGetAllBrokerDetails = <TData = Awaited<ReturnType<ReturnType<typeof useBrokersGetAllBrokerDetailsHook>>>, TError = unknown>(
 startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBrokersGetAllBrokerDetailsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useBrokersGetAllBrokerDetailsQueryOptions(startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useBuildersRiskPropertyBeingBuiltGetAllHook = () => {
        const buildersRiskPropertyBeingBuiltGetAll = useCustomInstance<DomainModelBenchmarkBuildersRiskPropertyBeingBuilt[]>();

        return (
    
 signal?: AbortSignal
) => {
        return buildersRiskPropertyBeingBuiltGetAll(
          {url: `/api/BenchmarkBuildersRiskPropertyBeingBuilt/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getBuildersRiskPropertyBeingBuiltGetAllQueryKey = () => {
    return [`/api/BenchmarkBuildersRiskPropertyBeingBuilt/getAll`] as const;
    }

    
export const useBuildersRiskPropertyBeingBuiltGetAllQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltGetAllHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltGetAllHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBuildersRiskPropertyBeingBuiltGetAllQueryKey();

  const buildersRiskPropertyBeingBuiltGetAll =  useBuildersRiskPropertyBeingBuiltGetAllHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltGetAllHook>>>> = ({ signal }) => buildersRiskPropertyBeingBuiltGetAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltGetAllHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type BuildersRiskPropertyBeingBuiltGetAllQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltGetAllHook>>>>
export type BuildersRiskPropertyBeingBuiltGetAllQueryError = unknown

export const useBuildersRiskPropertyBeingBuiltGetAll = <TData = Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltGetAllHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltGetAllHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useBuildersRiskPropertyBeingBuiltGetAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useBuildersRiskPropertyBeingBuiltPutBuildersRiskQuoteHook = () => {
        const buildersRiskPropertyBeingBuiltPutBuildersRiskQuote = useCustomInstance<DomainModelBenchmarkBuildersRiskPropertyBeingBuilt>();

        return (
    domainModelBenchmarkBuildersRiskPropertyBeingBuiltBody: DomainModelBenchmarkBuildersRiskPropertyBeingBuiltBody,
 ) => {
        return buildersRiskPropertyBeingBuiltPutBuildersRiskQuote(
          {url: `/api/BenchmarkBuildersRiskPropertyBeingBuilt/edit`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkBuildersRiskPropertyBeingBuiltBody
    },
          );
        }
      }
    


export const useBuildersRiskPropertyBeingBuiltPutBuildersRiskQuoteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltPutBuildersRiskQuoteHook>>>, TError,{data: DomainModelBenchmarkBuildersRiskPropertyBeingBuiltBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltPutBuildersRiskQuoteHook>>>, TError,{data: DomainModelBenchmarkBuildersRiskPropertyBeingBuiltBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const buildersRiskPropertyBeingBuiltPutBuildersRiskQuote =  useBuildersRiskPropertyBeingBuiltPutBuildersRiskQuoteHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltPutBuildersRiskQuoteHook>>>, {data: DomainModelBenchmarkBuildersRiskPropertyBeingBuiltBody}> = (props) => {
          const {data} = props ?? {};

          return  buildersRiskPropertyBeingBuiltPutBuildersRiskQuote(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type BuildersRiskPropertyBeingBuiltPutBuildersRiskQuoteMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltPutBuildersRiskQuoteHook>>>>
    export type BuildersRiskPropertyBeingBuiltPutBuildersRiskQuoteMutationBody = DomainModelBenchmarkBuildersRiskPropertyBeingBuiltBody
    export type BuildersRiskPropertyBeingBuiltPutBuildersRiskQuoteMutationError = unknown

    export const useBuildersRiskPropertyBeingBuiltPutBuildersRiskQuote = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltPutBuildersRiskQuoteHook>>>, TError,{data: DomainModelBenchmarkBuildersRiskPropertyBeingBuiltBody}, TContext>, }
) => {

      const mutationOptions = useBuildersRiskPropertyBeingBuiltPutBuildersRiskQuoteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useBuildersRiskPropertyBeingBuiltDeleteUserHook = () => {
        const buildersRiskPropertyBeingBuiltDeleteUser = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return buildersRiskPropertyBeingBuiltDeleteUser(
          {url: `/api/BenchmarkBuildersRiskPropertyBeingBuilt/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getBuildersRiskPropertyBeingBuiltDeleteUserQueryKey = (id: number,) => {
    return [`/api/BenchmarkBuildersRiskPropertyBeingBuilt/delete/${id}`] as const;
    }

    
export const useBuildersRiskPropertyBeingBuiltDeleteUserQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltDeleteUserHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltDeleteUserHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBuildersRiskPropertyBeingBuiltDeleteUserQueryKey(id);

  const buildersRiskPropertyBeingBuiltDeleteUser =  useBuildersRiskPropertyBeingBuiltDeleteUserHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltDeleteUserHook>>>> = ({ signal }) => buildersRiskPropertyBeingBuiltDeleteUser(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltDeleteUserHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type BuildersRiskPropertyBeingBuiltDeleteUserQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltDeleteUserHook>>>>
export type BuildersRiskPropertyBeingBuiltDeleteUserQueryError = unknown

export const useBuildersRiskPropertyBeingBuiltDeleteUser = <TData = Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltDeleteUserHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltDeleteUserHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useBuildersRiskPropertyBeingBuiltDeleteUserQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useBuildersRiskPropertyBeingBuiltPostBuildersRiskPropertyBeingBuiltHook = () => {
        const buildersRiskPropertyBeingBuiltPostBuildersRiskPropertyBeingBuilt = useCustomInstance<DomainModelBenchmarkBuildersRiskPropertyBeingBuilt>();

        return (
    domainModelBenchmarkBuildersRiskPropertyBeingBuiltBody: DomainModelBenchmarkBuildersRiskPropertyBeingBuiltBody,
 ) => {
        return buildersRiskPropertyBeingBuiltPostBuildersRiskPropertyBeingBuilt(
          {url: `/api/BenchmarkBuildersRiskPropertyBeingBuilt/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkBuildersRiskPropertyBeingBuiltBody
    },
          );
        }
      }
    


export const useBuildersRiskPropertyBeingBuiltPostBuildersRiskPropertyBeingBuiltMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltPostBuildersRiskPropertyBeingBuiltHook>>>, TError,{data: DomainModelBenchmarkBuildersRiskPropertyBeingBuiltBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltPostBuildersRiskPropertyBeingBuiltHook>>>, TError,{data: DomainModelBenchmarkBuildersRiskPropertyBeingBuiltBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const buildersRiskPropertyBeingBuiltPostBuildersRiskPropertyBeingBuilt =  useBuildersRiskPropertyBeingBuiltPostBuildersRiskPropertyBeingBuiltHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltPostBuildersRiskPropertyBeingBuiltHook>>>, {data: DomainModelBenchmarkBuildersRiskPropertyBeingBuiltBody}> = (props) => {
          const {data} = props ?? {};

          return  buildersRiskPropertyBeingBuiltPostBuildersRiskPropertyBeingBuilt(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type BuildersRiskPropertyBeingBuiltPostBuildersRiskPropertyBeingBuiltMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltPostBuildersRiskPropertyBeingBuiltHook>>>>
    export type BuildersRiskPropertyBeingBuiltPostBuildersRiskPropertyBeingBuiltMutationBody = DomainModelBenchmarkBuildersRiskPropertyBeingBuiltBody
    export type BuildersRiskPropertyBeingBuiltPostBuildersRiskPropertyBeingBuiltMutationError = unknown

    export const useBuildersRiskPropertyBeingBuiltPostBuildersRiskPropertyBeingBuilt = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskPropertyBeingBuiltPostBuildersRiskPropertyBeingBuiltHook>>>, TError,{data: DomainModelBenchmarkBuildersRiskPropertyBeingBuiltBody}, TContext>, }
) => {

      const mutationOptions = useBuildersRiskPropertyBeingBuiltPostBuildersRiskPropertyBeingBuiltMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useBuildersRiskQuoteGetAllPropertyHook = () => {
        const buildersRiskQuoteGetAllProperty = useCustomInstance<DomainModelBenchmarkBuildersRiskQuote[]>();

        return (
    
 signal?: AbortSignal
) => {
        return buildersRiskQuoteGetAllProperty(
          {url: `/api/BenchmarkBuildersRiskQuote/GetAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getBuildersRiskQuoteGetAllPropertyQueryKey = () => {
    return [`/api/BenchmarkBuildersRiskQuote/GetAll`] as const;
    }

    
export const useBuildersRiskQuoteGetAllPropertyQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuoteGetAllPropertyHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuoteGetAllPropertyHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBuildersRiskQuoteGetAllPropertyQueryKey();

  const buildersRiskQuoteGetAllProperty =  useBuildersRiskQuoteGetAllPropertyHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuoteGetAllPropertyHook>>>> = ({ signal }) => buildersRiskQuoteGetAllProperty(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuoteGetAllPropertyHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type BuildersRiskQuoteGetAllPropertyQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuoteGetAllPropertyHook>>>>
export type BuildersRiskQuoteGetAllPropertyQueryError = unknown

export const useBuildersRiskQuoteGetAllProperty = <TData = Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuoteGetAllPropertyHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuoteGetAllPropertyHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useBuildersRiskQuoteGetAllPropertyQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useBuildersRiskQuoteGetHook = () => {
        const buildersRiskQuoteGet = useCustomInstance<DomainModelBenchmarkBuildersRiskQuote>();

        return (
    params: BuildersRiskQuoteGetParams,
 signal?: AbortSignal
) => {
        return buildersRiskQuoteGet(
          {url: `/api/BenchmarkBuildersRiskQuote/GetById`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getBuildersRiskQuoteGetQueryKey = (params: BuildersRiskQuoteGetParams,) => {
    return [`/api/BenchmarkBuildersRiskQuote/GetById`, ...(params ? [params]: [])] as const;
    }

    
export const useBuildersRiskQuoteGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuoteGetHook>>>, TError = unknown>(params: BuildersRiskQuoteGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuoteGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBuildersRiskQuoteGetQueryKey(params);

  const buildersRiskQuoteGet =  useBuildersRiskQuoteGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuoteGetHook>>>> = ({ signal }) => buildersRiskQuoteGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuoteGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type BuildersRiskQuoteGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuoteGetHook>>>>
export type BuildersRiskQuoteGetQueryError = unknown

export const useBuildersRiskQuoteGet = <TData = Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuoteGetHook>>>, TError = unknown>(
 params: BuildersRiskQuoteGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuoteGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useBuildersRiskQuoteGetQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useBuildersRiskQuotePostkBuildersRiskQuoteHook = () => {
        const buildersRiskQuotePostkBuildersRiskQuote = useCustomInstance<DomainModelBenchmarkBuildersRiskQuote>();

        return (
    domainModelBenchmarkBuildersRiskQuoteBody: DomainModelBenchmarkBuildersRiskQuoteBody,
 ) => {
        return buildersRiskQuotePostkBuildersRiskQuote(
          {url: `/api/BenchmarkBuildersRiskQuote/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkBuildersRiskQuoteBody
    },
          );
        }
      }
    


export const useBuildersRiskQuotePostkBuildersRiskQuoteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuotePostkBuildersRiskQuoteHook>>>, TError,{data: DomainModelBenchmarkBuildersRiskQuoteBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuotePostkBuildersRiskQuoteHook>>>, TError,{data: DomainModelBenchmarkBuildersRiskQuoteBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const buildersRiskQuotePostkBuildersRiskQuote =  useBuildersRiskQuotePostkBuildersRiskQuoteHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuotePostkBuildersRiskQuoteHook>>>, {data: DomainModelBenchmarkBuildersRiskQuoteBody}> = (props) => {
          const {data} = props ?? {};

          return  buildersRiskQuotePostkBuildersRiskQuote(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type BuildersRiskQuotePostkBuildersRiskQuoteMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuotePostkBuildersRiskQuoteHook>>>>
    export type BuildersRiskQuotePostkBuildersRiskQuoteMutationBody = DomainModelBenchmarkBuildersRiskQuoteBody
    export type BuildersRiskQuotePostkBuildersRiskQuoteMutationError = unknown

    export const useBuildersRiskQuotePostkBuildersRiskQuote = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuotePostkBuildersRiskQuoteHook>>>, TError,{data: DomainModelBenchmarkBuildersRiskQuoteBody}, TContext>, }
) => {

      const mutationOptions = useBuildersRiskQuotePostkBuildersRiskQuoteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useBuildersRiskQuotePutkBuildersRiskQuoteHook = () => {
        const buildersRiskQuotePutkBuildersRiskQuote = useCustomInstance<DomainModelBenchmarkBuildersRiskQuote>();

        return (
    domainModelBenchmarkBuildersRiskQuoteBody: DomainModelBenchmarkBuildersRiskQuoteBody,
 ) => {
        return buildersRiskQuotePutkBuildersRiskQuote(
          {url: `/api/BenchmarkBuildersRiskQuote/edit`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkBuildersRiskQuoteBody
    },
          );
        }
      }
    


export const useBuildersRiskQuotePutkBuildersRiskQuoteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuotePutkBuildersRiskQuoteHook>>>, TError,{data: DomainModelBenchmarkBuildersRiskQuoteBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuotePutkBuildersRiskQuoteHook>>>, TError,{data: DomainModelBenchmarkBuildersRiskQuoteBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const buildersRiskQuotePutkBuildersRiskQuote =  useBuildersRiskQuotePutkBuildersRiskQuoteHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuotePutkBuildersRiskQuoteHook>>>, {data: DomainModelBenchmarkBuildersRiskQuoteBody}> = (props) => {
          const {data} = props ?? {};

          return  buildersRiskQuotePutkBuildersRiskQuote(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type BuildersRiskQuotePutkBuildersRiskQuoteMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuotePutkBuildersRiskQuoteHook>>>>
    export type BuildersRiskQuotePutkBuildersRiskQuoteMutationBody = DomainModelBenchmarkBuildersRiskQuoteBody
    export type BuildersRiskQuotePutkBuildersRiskQuoteMutationError = unknown

    export const useBuildersRiskQuotePutkBuildersRiskQuote = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuotePutkBuildersRiskQuoteHook>>>, TError,{data: DomainModelBenchmarkBuildersRiskQuoteBody}, TContext>, }
) => {

      const mutationOptions = useBuildersRiskQuotePutkBuildersRiskQuoteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useBuildersRiskQuoteDeleteBenchmarkBuildersRiskQuoteHook = () => {
        const buildersRiskQuoteDeleteBenchmarkBuildersRiskQuote = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return buildersRiskQuoteDeleteBenchmarkBuildersRiskQuote(
          {url: `/api/BenchmarkBuildersRiskQuote/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getBuildersRiskQuoteDeleteBenchmarkBuildersRiskQuoteQueryKey = (id: number,) => {
    return [`/api/BenchmarkBuildersRiskQuote/delete/${id}`] as const;
    }

    
export const useBuildersRiskQuoteDeleteBenchmarkBuildersRiskQuoteQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuoteDeleteBenchmarkBuildersRiskQuoteHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuoteDeleteBenchmarkBuildersRiskQuoteHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBuildersRiskQuoteDeleteBenchmarkBuildersRiskQuoteQueryKey(id);

  const buildersRiskQuoteDeleteBenchmarkBuildersRiskQuote =  useBuildersRiskQuoteDeleteBenchmarkBuildersRiskQuoteHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuoteDeleteBenchmarkBuildersRiskQuoteHook>>>> = ({ signal }) => buildersRiskQuoteDeleteBenchmarkBuildersRiskQuote(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuoteDeleteBenchmarkBuildersRiskQuoteHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type BuildersRiskQuoteDeleteBenchmarkBuildersRiskQuoteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuoteDeleteBenchmarkBuildersRiskQuoteHook>>>>
export type BuildersRiskQuoteDeleteBenchmarkBuildersRiskQuoteQueryError = unknown

export const useBuildersRiskQuoteDeleteBenchmarkBuildersRiskQuote = <TData = Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuoteDeleteBenchmarkBuildersRiskQuoteHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useBuildersRiskQuoteDeleteBenchmarkBuildersRiskQuoteHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useBuildersRiskQuoteDeleteBenchmarkBuildersRiskQuoteQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useChargeBeeGenerateChargebeeInvoiceHook = () => {
        const chargeBeeGenerateChargebeeInvoice = useCustomInstance<DomainModelBenchmarkInvoice[]>();

        return (
    customerID: number,
 signal?: AbortSignal
) => {
        return chargeBeeGenerateChargebeeInvoice(
          {url: `/api/Chargebee/Invoice/generateAll/${customerID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getChargeBeeGenerateChargebeeInvoiceQueryKey = (customerID: number,) => {
    return [`/api/Chargebee/Invoice/generateAll/${customerID}`] as const;
    }

    
export const useChargeBeeGenerateChargebeeInvoiceQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useChargeBeeGenerateChargebeeInvoiceHook>>>, TError = unknown>(customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useChargeBeeGenerateChargebeeInvoiceHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getChargeBeeGenerateChargebeeInvoiceQueryKey(customerID);

  const chargeBeeGenerateChargebeeInvoice =  useChargeBeeGenerateChargebeeInvoiceHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useChargeBeeGenerateChargebeeInvoiceHook>>>> = ({ signal }) => chargeBeeGenerateChargebeeInvoice(customerID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useChargeBeeGenerateChargebeeInvoiceHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ChargeBeeGenerateChargebeeInvoiceQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useChargeBeeGenerateChargebeeInvoiceHook>>>>
export type ChargeBeeGenerateChargebeeInvoiceQueryError = unknown

export const useChargeBeeGenerateChargebeeInvoice = <TData = Awaited<ReturnType<ReturnType<typeof useChargeBeeGenerateChargebeeInvoiceHook>>>, TError = unknown>(
 customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useChargeBeeGenerateChargebeeInvoiceHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useChargeBeeGenerateChargebeeInvoiceQueryOptions(customerID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useChargeBeeGetHook = () => {
        const chargeBeeGet = useCustomInstance<void>();

        return (
    
 signal?: AbortSignal
) => {
        return chargeBeeGet(
          {url: `/api/ChargeBee`, method: 'GET', signal
    },
          );
        }
      }
    

export const getChargeBeeGetQueryKey = () => {
    return [`/api/ChargeBee`] as const;
    }

    
export const useChargeBeeGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useChargeBeeGetHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useChargeBeeGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getChargeBeeGetQueryKey();

  const chargeBeeGet =  useChargeBeeGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useChargeBeeGetHook>>>> = ({ signal }) => chargeBeeGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useChargeBeeGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ChargeBeeGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useChargeBeeGetHook>>>>
export type ChargeBeeGetQueryError = unknown

export const useChargeBeeGet = <TData = Awaited<ReturnType<ReturnType<typeof useChargeBeeGetHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useChargeBeeGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useChargeBeeGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useConstructionTypeGetHook = () => {
        const constructionTypeGet = useCustomInstance<DomainModelBenchmarkConstructionType>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return constructionTypeGet(
          {url: `/api/ConstructionType/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getConstructionTypeGetQueryKey = (id: number,) => {
    return [`/api/ConstructionType/get/${id}`] as const;
    }

    
export const useConstructionTypeGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getConstructionTypeGetQueryKey(id);

  const constructionTypeGet =  useConstructionTypeGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetHook>>>> = ({ signal }) => constructionTypeGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ConstructionTypeGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetHook>>>>
export type ConstructionTypeGetQueryError = unknown

export const useConstructionTypeGet = <TData = Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useConstructionTypeGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useConstructionTypeGetAllConstructionTypeHook = () => {
        const constructionTypeGetAllConstructionType = useCustomInstance<DomainModelBenchmarkConstructionType[]>();

        return (
    
 signal?: AbortSignal
) => {
        return constructionTypeGetAllConstructionType(
          {url: `/api/ConstructionType/GetAllConstructionType`, method: 'GET', signal
    },
          );
        }
      }
    

export const getConstructionTypeGetAllConstructionTypeQueryKey = () => {
    return [`/api/ConstructionType/GetAllConstructionType`] as const;
    }

    
export const useConstructionTypeGetAllConstructionTypeQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetAllConstructionTypeHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetAllConstructionTypeHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getConstructionTypeGetAllConstructionTypeQueryKey();

  const constructionTypeGetAllConstructionType =  useConstructionTypeGetAllConstructionTypeHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetAllConstructionTypeHook>>>> = ({ signal }) => constructionTypeGetAllConstructionType(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetAllConstructionTypeHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ConstructionTypeGetAllConstructionTypeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetAllConstructionTypeHook>>>>
export type ConstructionTypeGetAllConstructionTypeQueryError = unknown

export const useConstructionTypeGetAllConstructionType = <TData = Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetAllConstructionTypeHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetAllConstructionTypeHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useConstructionTypeGetAllConstructionTypeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useConstructionTypeGetConstructionTypeByNameHook = () => {
        const constructionTypeGetConstructionTypeByName = useCustomInstance<DomainModelBenchmarkConstructionType>();

        return (
    name: string,
 signal?: AbortSignal
) => {
        return constructionTypeGetConstructionTypeByName(
          {url: `/api/ConstructionType/GetConstructionTypeByName/${name}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getConstructionTypeGetConstructionTypeByNameQueryKey = (name: string,) => {
    return [`/api/ConstructionType/GetConstructionTypeByName/${name}`] as const;
    }

    
export const useConstructionTypeGetConstructionTypeByNameQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetConstructionTypeByNameHook>>>, TError = unknown>(name: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetConstructionTypeByNameHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getConstructionTypeGetConstructionTypeByNameQueryKey(name);

  const constructionTypeGetConstructionTypeByName =  useConstructionTypeGetConstructionTypeByNameHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetConstructionTypeByNameHook>>>> = ({ signal }) => constructionTypeGetConstructionTypeByName(name, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetConstructionTypeByNameHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ConstructionTypeGetConstructionTypeByNameQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetConstructionTypeByNameHook>>>>
export type ConstructionTypeGetConstructionTypeByNameQueryError = unknown

export const useConstructionTypeGetConstructionTypeByName = <TData = Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetConstructionTypeByNameHook>>>, TError = unknown>(
 name: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetConstructionTypeByNameHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useConstructionTypeGetConstructionTypeByNameQueryOptions(name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useConstructionTypePostConstructionTypeHook = () => {
        const constructionTypePostConstructionType = useCustomInstance<DomainModelBenchmarkConstructionType>();

        return (
    domainModelBenchmarkConstructionTypeBody: DomainModelBenchmarkConstructionTypeBody,
 ) => {
        return constructionTypePostConstructionType(
          {url: `/api/ConstructionType/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkConstructionTypeBody
    },
          );
        }
      }
    


export const useConstructionTypePostConstructionTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypePostConstructionTypeHook>>>, TError,{data: DomainModelBenchmarkConstructionTypeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypePostConstructionTypeHook>>>, TError,{data: DomainModelBenchmarkConstructionTypeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const constructionTypePostConstructionType =  useConstructionTypePostConstructionTypeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useConstructionTypePostConstructionTypeHook>>>, {data: DomainModelBenchmarkConstructionTypeBody}> = (props) => {
          const {data} = props ?? {};

          return  constructionTypePostConstructionType(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ConstructionTypePostConstructionTypeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useConstructionTypePostConstructionTypeHook>>>>
    export type ConstructionTypePostConstructionTypeMutationBody = DomainModelBenchmarkConstructionTypeBody
    export type ConstructionTypePostConstructionTypeMutationError = unknown

    export const useConstructionTypePostConstructionType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypePostConstructionTypeHook>>>, TError,{data: DomainModelBenchmarkConstructionTypeBody}, TContext>, }
) => {

      const mutationOptions = useConstructionTypePostConstructionTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useConstructionTypeRateConstructionTypeHook = () => {
        const constructionTypeRateConstructionType = useCustomInstance<ConstructionTypeRateConstructionType200OneItem[] | ConstructionTypeRateConstructionType200TwoItem[] | ConstructionTypeRateConstructionType200ThreeItem[] | ConstructionTypeRateConstructionType200FourItem[]>();

        return (
    domainModelBenchmarkConstructionTypeBody: DomainModelBenchmarkConstructionTypeBody,
 ) => {
        return constructionTypeRateConstructionType(
          {url: `/api/ConstructionType/rate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkConstructionTypeBody
    },
          );
        }
      }
    


export const useConstructionTypeRateConstructionTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypeRateConstructionTypeHook>>>, TError,{data: DomainModelBenchmarkConstructionTypeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypeRateConstructionTypeHook>>>, TError,{data: DomainModelBenchmarkConstructionTypeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const constructionTypeRateConstructionType =  useConstructionTypeRateConstructionTypeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useConstructionTypeRateConstructionTypeHook>>>, {data: DomainModelBenchmarkConstructionTypeBody}> = (props) => {
          const {data} = props ?? {};

          return  constructionTypeRateConstructionType(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ConstructionTypeRateConstructionTypeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useConstructionTypeRateConstructionTypeHook>>>>
    export type ConstructionTypeRateConstructionTypeMutationBody = DomainModelBenchmarkConstructionTypeBody
    export type ConstructionTypeRateConstructionTypeMutationError = unknown

    export const useConstructionTypeRateConstructionType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypeRateConstructionTypeHook>>>, TError,{data: DomainModelBenchmarkConstructionTypeBody}, TContext>, }
) => {

      const mutationOptions = useConstructionTypeRateConstructionTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useConstructionTypePutConstructionTypeHook = () => {
        const constructionTypePutConstructionType = useCustomInstance<ConstructionTypePutConstructionType200OneItem[] | ConstructionTypePutConstructionType200TwoItem[] | ConstructionTypePutConstructionType200ThreeItem[] | ConstructionTypePutConstructionType200FourItem[]>();

        return (
    domainModelBenchmarkConstructionTypeBody: DomainModelBenchmarkConstructionTypeBody,
 ) => {
        return constructionTypePutConstructionType(
          {url: `/api/ConstructionType/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkConstructionTypeBody
    },
          );
        }
      }
    


export const useConstructionTypePutConstructionTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypePutConstructionTypeHook>>>, TError,{data: DomainModelBenchmarkConstructionTypeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypePutConstructionTypeHook>>>, TError,{data: DomainModelBenchmarkConstructionTypeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const constructionTypePutConstructionType =  useConstructionTypePutConstructionTypeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useConstructionTypePutConstructionTypeHook>>>, {data: DomainModelBenchmarkConstructionTypeBody}> = (props) => {
          const {data} = props ?? {};

          return  constructionTypePutConstructionType(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ConstructionTypePutConstructionTypeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useConstructionTypePutConstructionTypeHook>>>>
    export type ConstructionTypePutConstructionTypeMutationBody = DomainModelBenchmarkConstructionTypeBody
    export type ConstructionTypePutConstructionTypeMutationError = unknown

    export const useConstructionTypePutConstructionType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypePutConstructionTypeHook>>>, TError,{data: DomainModelBenchmarkConstructionTypeBody}, TContext>, }
) => {

      const mutationOptions = useConstructionTypePutConstructionTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useConstructionTypeDeleteConstructionTypeHook = () => {
        const constructionTypeDeleteConstructionType = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return constructionTypeDeleteConstructionType(
          {url: `/api/ConstructionType/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getConstructionTypeDeleteConstructionTypeQueryKey = (id: number,) => {
    return [`/api/ConstructionType/delete/${id}`] as const;
    }

    
export const useConstructionTypeDeleteConstructionTypeQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useConstructionTypeDeleteConstructionTypeHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypeDeleteConstructionTypeHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getConstructionTypeDeleteConstructionTypeQueryKey(id);

  const constructionTypeDeleteConstructionType =  useConstructionTypeDeleteConstructionTypeHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useConstructionTypeDeleteConstructionTypeHook>>>> = ({ signal }) => constructionTypeDeleteConstructionType(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypeDeleteConstructionTypeHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ConstructionTypeDeleteConstructionTypeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useConstructionTypeDeleteConstructionTypeHook>>>>
export type ConstructionTypeDeleteConstructionTypeQueryError = unknown

export const useConstructionTypeDeleteConstructionType = <TData = Awaited<ReturnType<ReturnType<typeof useConstructionTypeDeleteConstructionTypeHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypeDeleteConstructionTypeHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useConstructionTypeDeleteConstructionTypeQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useConstructionTypeGetAllConstructionTypeWithFiltersHook = () => {
        const constructionTypeGetAllConstructionTypeWithFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkConstructionType>();

        return (
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return constructionTypeGetAllConstructionTypeWithFilters(
          {url: `/api/ConstructionType/GetAllConstructionTypeWithFilters/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getConstructionTypeGetAllConstructionTypeWithFiltersQueryKey = (startIndex: number,
    endIndex: number,) => {
    return [`/api/ConstructionType/GetAllConstructionTypeWithFilters/${startIndex}/${endIndex}`] as const;
    }

    
export const useConstructionTypeGetAllConstructionTypeWithFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetAllConstructionTypeWithFiltersHook>>>, TError = unknown>(startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetAllConstructionTypeWithFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getConstructionTypeGetAllConstructionTypeWithFiltersQueryKey(startIndex,endIndex);

  const constructionTypeGetAllConstructionTypeWithFilters =  useConstructionTypeGetAllConstructionTypeWithFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetAllConstructionTypeWithFiltersHook>>>> = ({ signal }) => constructionTypeGetAllConstructionTypeWithFilters(startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetAllConstructionTypeWithFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ConstructionTypeGetAllConstructionTypeWithFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetAllConstructionTypeWithFiltersHook>>>>
export type ConstructionTypeGetAllConstructionTypeWithFiltersQueryError = unknown

export const useConstructionTypeGetAllConstructionTypeWithFilters = <TData = Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetAllConstructionTypeWithFiltersHook>>>, TError = unknown>(
 startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useConstructionTypeGetAllConstructionTypeWithFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useConstructionTypeGetAllConstructionTypeWithFiltersQueryOptions(startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useContactsGetAllContactHook = () => {
        const contactsGetAllContact = useCustomInstance<DomainModelBenchmarkContact[]>();

        return (
    
 signal?: AbortSignal
) => {
        return contactsGetAllContact(
          {url: `/api/Contact/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getContactsGetAllContactQueryKey = () => {
    return [`/api/Contact/getAll`] as const;
    }

    
export const useContactsGetAllContactQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useContactsGetAllContactHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsGetAllContactHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getContactsGetAllContactQueryKey();

  const contactsGetAllContact =  useContactsGetAllContactHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useContactsGetAllContactHook>>>> = ({ signal }) => contactsGetAllContact(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsGetAllContactHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ContactsGetAllContactQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useContactsGetAllContactHook>>>>
export type ContactsGetAllContactQueryError = unknown

export const useContactsGetAllContact = <TData = Awaited<ReturnType<ReturnType<typeof useContactsGetAllContactHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsGetAllContactHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useContactsGetAllContactQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useContactsGetHook = () => {
        const contactsGet = useCustomInstance<DomainModelBenchmarkContact>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return contactsGet(
          {url: `/api/Contact/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getContactsGetQueryKey = (id: number,) => {
    return [`/api/Contact/get/${id}`] as const;
    }

    
export const useContactsGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useContactsGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getContactsGetQueryKey(id);

  const contactsGet =  useContactsGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useContactsGetHook>>>> = ({ signal }) => contactsGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ContactsGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useContactsGetHook>>>>
export type ContactsGetQueryError = unknown

export const useContactsGet = <TData = Awaited<ReturnType<ReturnType<typeof useContactsGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useContactsGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useContactsPostContactHook = () => {
        const contactsPostContact = useCustomInstance<DomainModelBenchmarkContact>();

        return (
    domainModelBenchmarkContactBody: DomainModelBenchmarkContactBody,
 ) => {
        return contactsPostContact(
          {url: `/api/Contact/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkContactBody
    },
          );
        }
      }
    


export const useContactsPostContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useContactsPostContactHook>>>, TError,{data: DomainModelBenchmarkContactBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useContactsPostContactHook>>>, TError,{data: DomainModelBenchmarkContactBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const contactsPostContact =  useContactsPostContactHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useContactsPostContactHook>>>, {data: DomainModelBenchmarkContactBody}> = (props) => {
          const {data} = props ?? {};

          return  contactsPostContact(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ContactsPostContactMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useContactsPostContactHook>>>>
    export type ContactsPostContactMutationBody = DomainModelBenchmarkContactBody
    export type ContactsPostContactMutationError = unknown

    export const useContactsPostContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useContactsPostContactHook>>>, TError,{data: DomainModelBenchmarkContactBody}, TContext>, }
) => {

      const mutationOptions = useContactsPostContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useContactsPutContactHook = () => {
        const contactsPutContact = useCustomInstance<DomainModelBenchmarkContact>();

        return (
    domainModelBenchmarkContactBody: DomainModelBenchmarkContactBody,
 ) => {
        return contactsPutContact(
          {url: `/api/Contact/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkContactBody
    },
          );
        }
      }
    


export const useContactsPutContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useContactsPutContactHook>>>, TError,{data: DomainModelBenchmarkContactBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useContactsPutContactHook>>>, TError,{data: DomainModelBenchmarkContactBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const contactsPutContact =  useContactsPutContactHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useContactsPutContactHook>>>, {data: DomainModelBenchmarkContactBody}> = (props) => {
          const {data} = props ?? {};

          return  contactsPutContact(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ContactsPutContactMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useContactsPutContactHook>>>>
    export type ContactsPutContactMutationBody = DomainModelBenchmarkContactBody
    export type ContactsPutContactMutationError = unknown

    export const useContactsPutContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useContactsPutContactHook>>>, TError,{data: DomainModelBenchmarkContactBody}, TContext>, }
) => {

      const mutationOptions = useContactsPutContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useContactsDeleteContactHook = () => {
        const contactsDeleteContact = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return contactsDeleteContact(
          {url: `/api/Contact/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getContactsDeleteContactQueryKey = (id: number,) => {
    return [`/api/Contact/delete/${id}`] as const;
    }

    
export const useContactsDeleteContactQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useContactsDeleteContactHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsDeleteContactHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getContactsDeleteContactQueryKey(id);

  const contactsDeleteContact =  useContactsDeleteContactHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useContactsDeleteContactHook>>>> = ({ signal }) => contactsDeleteContact(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsDeleteContactHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ContactsDeleteContactQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useContactsDeleteContactHook>>>>
export type ContactsDeleteContactQueryError = unknown

export const useContactsDeleteContact = <TData = Awaited<ReturnType<ReturnType<typeof useContactsDeleteContactHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsDeleteContactHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useContactsDeleteContactQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useContactsGetAllContactByFiltersHook = () => {
        const contactsGetAllContactByFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkContact>();

        return (
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return contactsGetAllContactByFilters(
          {url: `/api/Contact/GetAllContactDetails/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getContactsGetAllContactByFiltersQueryKey = (startIndex: number,
    endIndex: number,) => {
    return [`/api/Contact/GetAllContactDetails/${startIndex}/${endIndex}`] as const;
    }

    
export const useContactsGetAllContactByFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useContactsGetAllContactByFiltersHook>>>, TError = unknown>(startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsGetAllContactByFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getContactsGetAllContactByFiltersQueryKey(startIndex,endIndex);

  const contactsGetAllContactByFilters =  useContactsGetAllContactByFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useContactsGetAllContactByFiltersHook>>>> = ({ signal }) => contactsGetAllContactByFilters(startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsGetAllContactByFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ContactsGetAllContactByFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useContactsGetAllContactByFiltersHook>>>>
export type ContactsGetAllContactByFiltersQueryError = unknown

export const useContactsGetAllContactByFilters = <TData = Awaited<ReturnType<ReturnType<typeof useContactsGetAllContactByFiltersHook>>>, TError = unknown>(
 startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsGetAllContactByFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useContactsGetAllContactByFiltersQueryOptions(startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useContactsGetContactListByBrokerIDHook = () => {
        const contactsGetContactListByBrokerID = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkContact>();

        return (
    brokerID: number,
    searchFilter: string,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return contactsGetContactListByBrokerID(
          {url: `/api/Contact/GetContactListByBrokerID/${brokerID}/${searchFilter}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getContactsGetContactListByBrokerIDQueryKey = (brokerID: number,
    searchFilter: string,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/Contact/GetContactListByBrokerID/${brokerID}/${searchFilter}/${startIndex}/${endIndex}`] as const;
    }

    
export const useContactsGetContactListByBrokerIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useContactsGetContactListByBrokerIDHook>>>, TError = unknown>(brokerID: number,
    searchFilter: string,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsGetContactListByBrokerIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getContactsGetContactListByBrokerIDQueryKey(brokerID,searchFilter,startIndex,endIndex);

  const contactsGetContactListByBrokerID =  useContactsGetContactListByBrokerIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useContactsGetContactListByBrokerIDHook>>>> = ({ signal }) => contactsGetContactListByBrokerID(brokerID,searchFilter,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(brokerID && searchFilter && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsGetContactListByBrokerIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ContactsGetContactListByBrokerIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useContactsGetContactListByBrokerIDHook>>>>
export type ContactsGetContactListByBrokerIDQueryError = unknown

export const useContactsGetContactListByBrokerID = <TData = Awaited<ReturnType<ReturnType<typeof useContactsGetContactListByBrokerIDHook>>>, TError = unknown>(
 brokerID: number,
    searchFilter: string,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsGetContactListByBrokerIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useContactsGetContactListByBrokerIDQueryOptions(brokerID,searchFilter,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useContactsGetContactByWritingCompanyIDHook = () => {
        const contactsGetContactByWritingCompanyID = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkContact>();

        return (
    writingCompanyID: number,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return contactsGetContactByWritingCompanyID(
          {url: `/api/Contact/GetContactByWritingCompanyID/${writingCompanyID}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getContactsGetContactByWritingCompanyIDQueryKey = (writingCompanyID: number,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/Contact/GetContactByWritingCompanyID/${writingCompanyID}/${startIndex}/${endIndex}`] as const;
    }

    
export const useContactsGetContactByWritingCompanyIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useContactsGetContactByWritingCompanyIDHook>>>, TError = unknown>(writingCompanyID: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsGetContactByWritingCompanyIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getContactsGetContactByWritingCompanyIDQueryKey(writingCompanyID,startIndex,endIndex);

  const contactsGetContactByWritingCompanyID =  useContactsGetContactByWritingCompanyIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useContactsGetContactByWritingCompanyIDHook>>>> = ({ signal }) => contactsGetContactByWritingCompanyID(writingCompanyID,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(writingCompanyID && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsGetContactByWritingCompanyIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ContactsGetContactByWritingCompanyIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useContactsGetContactByWritingCompanyIDHook>>>>
export type ContactsGetContactByWritingCompanyIDQueryError = unknown

export const useContactsGetContactByWritingCompanyID = <TData = Awaited<ReturnType<ReturnType<typeof useContactsGetContactByWritingCompanyIDHook>>>, TError = unknown>(
 writingCompanyID: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsGetContactByWritingCompanyIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useContactsGetContactByWritingCompanyIDQueryOptions(writingCompanyID,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useContactsGetContactListByBrokerIDContactTypeIDHook = () => {
        const contactsGetContactListByBrokerIDContactTypeID = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkContact>();

        return (
    brokerID: number,
    contactTypeID: number,
    searchFilter: string,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return contactsGetContactListByBrokerIDContactTypeID(
          {url: `/api/Contact/GetContactListByBrokerID_ContactTypeID/${brokerID}/${contactTypeID}/${searchFilter}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getContactsGetContactListByBrokerIDContactTypeIDQueryKey = (brokerID: number,
    contactTypeID: number,
    searchFilter: string,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/Contact/GetContactListByBrokerID_ContactTypeID/${brokerID}/${contactTypeID}/${searchFilter}/${startIndex}/${endIndex}`] as const;
    }

    
export const useContactsGetContactListByBrokerIDContactTypeIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useContactsGetContactListByBrokerIDContactTypeIDHook>>>, TError = unknown>(brokerID: number,
    contactTypeID: number,
    searchFilter: string,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsGetContactListByBrokerIDContactTypeIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getContactsGetContactListByBrokerIDContactTypeIDQueryKey(brokerID,contactTypeID,searchFilter,startIndex,endIndex);

  const contactsGetContactListByBrokerIDContactTypeID =  useContactsGetContactListByBrokerIDContactTypeIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useContactsGetContactListByBrokerIDContactTypeIDHook>>>> = ({ signal }) => contactsGetContactListByBrokerIDContactTypeID(brokerID,contactTypeID,searchFilter,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(brokerID && contactTypeID && searchFilter && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsGetContactListByBrokerIDContactTypeIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ContactsGetContactListByBrokerIDContactTypeIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useContactsGetContactListByBrokerIDContactTypeIDHook>>>>
export type ContactsGetContactListByBrokerIDContactTypeIDQueryError = unknown

export const useContactsGetContactListByBrokerIDContactTypeID = <TData = Awaited<ReturnType<ReturnType<typeof useContactsGetContactListByBrokerIDContactTypeIDHook>>>, TError = unknown>(
 brokerID: number,
    contactTypeID: number,
    searchFilter: string,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsGetContactListByBrokerIDContactTypeIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useContactsGetContactListByBrokerIDContactTypeIDQueryOptions(brokerID,contactTypeID,searchFilter,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useContactsGetMainContactByBrokerIDHook = () => {
        const contactsGetMainContactByBrokerID = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkContact>();

        return (
    brokerID: number,
    searchFilter: string,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return contactsGetMainContactByBrokerID(
          {url: `/api/Contact/GetMainContactByBrokerID/${brokerID}/${searchFilter}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getContactsGetMainContactByBrokerIDQueryKey = (brokerID: number,
    searchFilter: string,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/Contact/GetMainContactByBrokerID/${brokerID}/${searchFilter}/${startIndex}/${endIndex}`] as const;
    }

    
export const useContactsGetMainContactByBrokerIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useContactsGetMainContactByBrokerIDHook>>>, TError = unknown>(brokerID: number,
    searchFilter: string,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsGetMainContactByBrokerIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getContactsGetMainContactByBrokerIDQueryKey(brokerID,searchFilter,startIndex,endIndex);

  const contactsGetMainContactByBrokerID =  useContactsGetMainContactByBrokerIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useContactsGetMainContactByBrokerIDHook>>>> = ({ signal }) => contactsGetMainContactByBrokerID(brokerID,searchFilter,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(brokerID && searchFilter && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsGetMainContactByBrokerIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ContactsGetMainContactByBrokerIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useContactsGetMainContactByBrokerIDHook>>>>
export type ContactsGetMainContactByBrokerIDQueryError = unknown

export const useContactsGetMainContactByBrokerID = <TData = Awaited<ReturnType<ReturnType<typeof useContactsGetMainContactByBrokerIDHook>>>, TError = unknown>(
 brokerID: number,
    searchFilter: string,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useContactsGetMainContactByBrokerIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useContactsGetMainContactByBrokerIDQueryOptions(brokerID,searchFilter,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerGenerateCustomerTokenHook = () => {
        const customerGenerateCustomerToken = useCustomInstance<string>();

        return (
    agentId: number,
 signal?: AbortSignal
) => {
        return customerGenerateCustomerToken(
          {url: `/api/Customer/GenerateCustomerToken/${agentId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerGenerateCustomerTokenQueryKey = (agentId: number,) => {
    return [`/api/Customer/GenerateCustomerToken/${agentId}`] as const;
    }

    
export const useCustomerGenerateCustomerTokenQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGenerateCustomerTokenHook>>>, TError = unknown>(agentId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGenerateCustomerTokenHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerGenerateCustomerTokenQueryKey(agentId);

  const customerGenerateCustomerToken =  useCustomerGenerateCustomerTokenHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerGenerateCustomerTokenHook>>>> = ({ signal }) => customerGenerateCustomerToken(agentId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(agentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGenerateCustomerTokenHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerGenerateCustomerTokenQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerGenerateCustomerTokenHook>>>>
export type CustomerGenerateCustomerTokenQueryError = unknown

export const useCustomerGenerateCustomerToken = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGenerateCustomerTokenHook>>>, TError = unknown>(
 agentId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGenerateCustomerTokenHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerGenerateCustomerTokenQueryOptions(agentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerGetHook = () => {
        const customerGet = useCustomInstance<DomainModelBenchmarkCustomer>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return customerGet(
          {url: `/api/Customer/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerGetQueryKey = (id: number,) => {
    return [`/api/Customer/get/${id}`] as const;
    }

    
export const useCustomerGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerGetQueryKey(id);

  const customerGet =  useCustomerGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerGetHook>>>> = ({ signal }) => customerGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerGetHook>>>>
export type CustomerGetQueryError = unknown

export const useCustomerGet = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerGetAllCustomerHook = () => {
        const customerGetAllCustomer = useCustomInstance<DomainModelBenchmarkCustomer[]>();

        return (
    
 signal?: AbortSignal
) => {
        return customerGetAllCustomer(
          {url: `/api/Customer/GetAllCustomer`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerGetAllCustomerQueryKey = () => {
    return [`/api/Customer/GetAllCustomer`] as const;
    }

    
export const useCustomerGetAllCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetAllCustomerHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetAllCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerGetAllCustomerQueryKey();

  const customerGetAllCustomer =  useCustomerGetAllCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerGetAllCustomerHook>>>> = ({ signal }) => customerGetAllCustomer(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetAllCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerGetAllCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerGetAllCustomerHook>>>>
export type CustomerGetAllCustomerQueryError = unknown

export const useCustomerGetAllCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetAllCustomerHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetAllCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerGetAllCustomerQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerGetAllCustomerByAgentIdHook = () => {
        const customerGetAllCustomerByAgentId = useCustomInstance<DomainModelBenchmarkCustomer[]>();

        return (
    agentId: number,
 signal?: AbortSignal
) => {
        return customerGetAllCustomerByAgentId(
          {url: `/api/Customer/agent/${agentId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerGetAllCustomerByAgentIdQueryKey = (agentId: number,) => {
    return [`/api/Customer/agent/${agentId}`] as const;
    }

    
export const useCustomerGetAllCustomerByAgentIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetAllCustomerByAgentIdHook>>>, TError = unknown>(agentId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetAllCustomerByAgentIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerGetAllCustomerByAgentIdQueryKey(agentId);

  const customerGetAllCustomerByAgentId =  useCustomerGetAllCustomerByAgentIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerGetAllCustomerByAgentIdHook>>>> = ({ signal }) => customerGetAllCustomerByAgentId(agentId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(agentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetAllCustomerByAgentIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerGetAllCustomerByAgentIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerGetAllCustomerByAgentIdHook>>>>
export type CustomerGetAllCustomerByAgentIdQueryError = unknown

export const useCustomerGetAllCustomerByAgentId = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetAllCustomerByAgentIdHook>>>, TError = unknown>(
 agentId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetAllCustomerByAgentIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerGetAllCustomerByAgentIdQueryOptions(agentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerGetCustomerByAgentHook = () => {
        const customerGetCustomerByAgent = useCustomInstance<DomainModelBenchmarkCustomer[]>();

        return (
    agentId: number,
 signal?: AbortSignal
) => {
        return customerGetCustomerByAgent(
          {url: `/api/GetActiveCustomerByAgent/${agentId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerGetCustomerByAgentQueryKey = (agentId: number,) => {
    return [`/api/GetActiveCustomerByAgent/${agentId}`] as const;
    }

    
export const useCustomerGetCustomerByAgentQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomerByAgentHook>>>, TError = unknown>(agentId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomerByAgentHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerGetCustomerByAgentQueryKey(agentId);

  const customerGetCustomerByAgent =  useCustomerGetCustomerByAgentHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomerByAgentHook>>>> = ({ signal }) => customerGetCustomerByAgent(agentId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(agentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomerByAgentHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerGetCustomerByAgentQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomerByAgentHook>>>>
export type CustomerGetCustomerByAgentQueryError = unknown

export const useCustomerGetCustomerByAgent = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomerByAgentHook>>>, TError = unknown>(
 agentId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomerByAgentHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerGetCustomerByAgentQueryOptions(agentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerGetActiveCustomersByAgentIdHook = () => {
        const customerGetActiveCustomersByAgentId = useCustomInstance<DomainModelBenchmarkCustomer[]>();

        return (
    agentId: number,
 signal?: AbortSignal
) => {
        return customerGetActiveCustomersByAgentId(
          {url: `/api/Customer/Active/agent/${agentId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerGetActiveCustomersByAgentIdQueryKey = (agentId: number,) => {
    return [`/api/Customer/Active/agent/${agentId}`] as const;
    }

    
export const useCustomerGetActiveCustomersByAgentIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetActiveCustomersByAgentIdHook>>>, TError = unknown>(agentId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetActiveCustomersByAgentIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerGetActiveCustomersByAgentIdQueryKey(agentId);

  const customerGetActiveCustomersByAgentId =  useCustomerGetActiveCustomersByAgentIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerGetActiveCustomersByAgentIdHook>>>> = ({ signal }) => customerGetActiveCustomersByAgentId(agentId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(agentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetActiveCustomersByAgentIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerGetActiveCustomersByAgentIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerGetActiveCustomersByAgentIdHook>>>>
export type CustomerGetActiveCustomersByAgentIdQueryError = unknown

export const useCustomerGetActiveCustomersByAgentId = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetActiveCustomersByAgentIdHook>>>, TError = unknown>(
 agentId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetActiveCustomersByAgentIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerGetActiveCustomersByAgentIdQueryOptions(agentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerGetActiveCustomersByAgentIdWithFiltersHook = () => {
        const customerGetActiveCustomersByAgentIdWithFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkCustomer>();

        return (
    agentId: number,
    startIndex: number,
    endIndex: number,
    searchFilter: string,
    sortingFilter: string,
 signal?: AbortSignal
) => {
        return customerGetActiveCustomersByAgentIdWithFilters(
          {url: `/api/Customer/Active/agent/filters/${agentId}/${startIndex}/${endIndex}/${searchFilter}/${sortingFilter}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerGetActiveCustomersByAgentIdWithFiltersQueryKey = (agentId: number,
    startIndex: number,
    endIndex: number,
    searchFilter: string,
    sortingFilter: string,) => {
    return [`/api/Customer/Active/agent/filters/${agentId}/${startIndex}/${endIndex}/${searchFilter}/${sortingFilter}`] as const;
    }

    
export const useCustomerGetActiveCustomersByAgentIdWithFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetActiveCustomersByAgentIdWithFiltersHook>>>, TError = unknown>(agentId: number,
    startIndex: number,
    endIndex: number,
    searchFilter: string,
    sortingFilter: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetActiveCustomersByAgentIdWithFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerGetActiveCustomersByAgentIdWithFiltersQueryKey(agentId,startIndex,endIndex,searchFilter,sortingFilter);

  const customerGetActiveCustomersByAgentIdWithFilters =  useCustomerGetActiveCustomersByAgentIdWithFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerGetActiveCustomersByAgentIdWithFiltersHook>>>> = ({ signal }) => customerGetActiveCustomersByAgentIdWithFilters(agentId,startIndex,endIndex,searchFilter,sortingFilter, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(agentId && startIndex && endIndex && searchFilter && sortingFilter), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetActiveCustomersByAgentIdWithFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerGetActiveCustomersByAgentIdWithFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerGetActiveCustomersByAgentIdWithFiltersHook>>>>
export type CustomerGetActiveCustomersByAgentIdWithFiltersQueryError = unknown

export const useCustomerGetActiveCustomersByAgentIdWithFilters = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetActiveCustomersByAgentIdWithFiltersHook>>>, TError = unknown>(
 agentId: number,
    startIndex: number,
    endIndex: number,
    searchFilter: string,
    sortingFilter: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetActiveCustomersByAgentIdWithFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerGetActiveCustomersByAgentIdWithFiltersQueryOptions(agentId,startIndex,endIndex,searchFilter,sortingFilter,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerGetPendingCustomersByAgentIdHook = () => {
        const customerGetPendingCustomersByAgentId = useCustomInstance<DomainModelBenchmarkCustomer[]>();

        return (
    agentId: number,
 signal?: AbortSignal
) => {
        return customerGetPendingCustomersByAgentId(
          {url: `/api/Customer/Pending/agent/${agentId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerGetPendingCustomersByAgentIdQueryKey = (agentId: number,) => {
    return [`/api/Customer/Pending/agent/${agentId}`] as const;
    }

    
export const useCustomerGetPendingCustomersByAgentIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetPendingCustomersByAgentIdHook>>>, TError = unknown>(agentId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetPendingCustomersByAgentIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerGetPendingCustomersByAgentIdQueryKey(agentId);

  const customerGetPendingCustomersByAgentId =  useCustomerGetPendingCustomersByAgentIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerGetPendingCustomersByAgentIdHook>>>> = ({ signal }) => customerGetPendingCustomersByAgentId(agentId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(agentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetPendingCustomersByAgentIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerGetPendingCustomersByAgentIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerGetPendingCustomersByAgentIdHook>>>>
export type CustomerGetPendingCustomersByAgentIdQueryError = unknown

export const useCustomerGetPendingCustomersByAgentId = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetPendingCustomersByAgentIdHook>>>, TError = unknown>(
 agentId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetPendingCustomersByAgentIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerGetPendingCustomersByAgentIdQueryOptions(agentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerGetPendingCustomersByAgentIdWithFiltersHook = () => {
        const customerGetPendingCustomersByAgentIdWithFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkCustomer>();

        return (
    agentId: number,
    startIndex: number,
    endIndex: number,
    searchFilter: string,
    sortingFilter: string,
 signal?: AbortSignal
) => {
        return customerGetPendingCustomersByAgentIdWithFilters(
          {url: `/api/Customer/Pending/agent/filters/${agentId}/${startIndex}/${endIndex}/${searchFilter}/${sortingFilter}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerGetPendingCustomersByAgentIdWithFiltersQueryKey = (agentId: number,
    startIndex: number,
    endIndex: number,
    searchFilter: string,
    sortingFilter: string,) => {
    return [`/api/Customer/Pending/agent/filters/${agentId}/${startIndex}/${endIndex}/${searchFilter}/${sortingFilter}`] as const;
    }

    
export const useCustomerGetPendingCustomersByAgentIdWithFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetPendingCustomersByAgentIdWithFiltersHook>>>, TError = unknown>(agentId: number,
    startIndex: number,
    endIndex: number,
    searchFilter: string,
    sortingFilter: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetPendingCustomersByAgentIdWithFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerGetPendingCustomersByAgentIdWithFiltersQueryKey(agentId,startIndex,endIndex,searchFilter,sortingFilter);

  const customerGetPendingCustomersByAgentIdWithFilters =  useCustomerGetPendingCustomersByAgentIdWithFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerGetPendingCustomersByAgentIdWithFiltersHook>>>> = ({ signal }) => customerGetPendingCustomersByAgentIdWithFilters(agentId,startIndex,endIndex,searchFilter,sortingFilter, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(agentId && startIndex && endIndex && searchFilter && sortingFilter), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetPendingCustomersByAgentIdWithFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerGetPendingCustomersByAgentIdWithFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerGetPendingCustomersByAgentIdWithFiltersHook>>>>
export type CustomerGetPendingCustomersByAgentIdWithFiltersQueryError = unknown

export const useCustomerGetPendingCustomersByAgentIdWithFilters = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetPendingCustomersByAgentIdWithFiltersHook>>>, TError = unknown>(
 agentId: number,
    startIndex: number,
    endIndex: number,
    searchFilter: string,
    sortingFilter: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetPendingCustomersByAgentIdWithFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerGetPendingCustomersByAgentIdWithFiltersQueryOptions(agentId,startIndex,endIndex,searchFilter,sortingFilter,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerGetAllUsersHook = () => {
        const customerGetAllUsers = useCustomInstance<DomainModelUser[]>();

        return (
    
 signal?: AbortSignal
) => {
        return customerGetAllUsers(
          {url: `/api/Customer/users`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerGetAllUsersQueryKey = () => {
    return [`/api/Customer/users`] as const;
    }

    
export const useCustomerGetAllUsersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetAllUsersHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetAllUsersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerGetAllUsersQueryKey();

  const customerGetAllUsers =  useCustomerGetAllUsersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerGetAllUsersHook>>>> = ({ signal }) => customerGetAllUsers(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetAllUsersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerGetAllUsersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerGetAllUsersHook>>>>
export type CustomerGetAllUsersQueryError = unknown

export const useCustomerGetAllUsers = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetAllUsersHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetAllUsersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerGetAllUsersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerChargebeeSyncHook = () => {
        const customerChargebeeSync = useCustomInstance<DomainModelBenchmarkCustomer>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return customerChargebeeSync(
          {url: `/api/Customer/Chargebee/Sync/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerChargebeeSyncQueryKey = (customerId: number,) => {
    return [`/api/Customer/Chargebee/Sync/${customerId}`] as const;
    }

    
export const useCustomerChargebeeSyncQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerChargebeeSyncHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerChargebeeSyncHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerChargebeeSyncQueryKey(customerId);

  const customerChargebeeSync =  useCustomerChargebeeSyncHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerChargebeeSyncHook>>>> = ({ signal }) => customerChargebeeSync(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerChargebeeSyncHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerChargebeeSyncQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerChargebeeSyncHook>>>>
export type CustomerChargebeeSyncQueryError = unknown

export const useCustomerChargebeeSync = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerChargebeeSyncHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerChargebeeSyncHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerChargebeeSyncQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerGetAllCustomerByStatusHook = () => {
        const customerGetAllCustomerByStatus = useCustomInstance<DomainModelBenchmarkCustomer[]>();

        return (
    statusId: number,
 signal?: AbortSignal
) => {
        return customerGetAllCustomerByStatus(
          {url: `/api/statuses/${statusId}/Customer`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerGetAllCustomerByStatusQueryKey = (statusId: number,) => {
    return [`/api/statuses/${statusId}/Customer`] as const;
    }

    
export const useCustomerGetAllCustomerByStatusQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetAllCustomerByStatusHook>>>, TError = unknown>(statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetAllCustomerByStatusHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerGetAllCustomerByStatusQueryKey(statusId);

  const customerGetAllCustomerByStatus =  useCustomerGetAllCustomerByStatusHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerGetAllCustomerByStatusHook>>>> = ({ signal }) => customerGetAllCustomerByStatus(statusId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(statusId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetAllCustomerByStatusHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerGetAllCustomerByStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerGetAllCustomerByStatusHook>>>>
export type CustomerGetAllCustomerByStatusQueryError = unknown

export const useCustomerGetAllCustomerByStatus = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetAllCustomerByStatusHook>>>, TError = unknown>(
 statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetAllCustomerByStatusHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerGetAllCustomerByStatusQueryOptions(statusId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerAuthenticateCustomerHook = () => {
        const customerAuthenticateCustomer = useCustomInstance<DomainModelBenchmarkCustomer>();

        return (
    domainModelBenchmarkCustomerBody: DomainModelBenchmarkCustomerBody,
 ) => {
        return customerAuthenticateCustomer(
          {url: `/api/Customer/AuthenticateCustomer`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkCustomerBody
    },
          );
        }
      }
    


export const useCustomerAuthenticateCustomerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerAuthenticateCustomerHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerAuthenticateCustomerHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const customerAuthenticateCustomer =  useCustomerAuthenticateCustomerHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCustomerAuthenticateCustomerHook>>>, {data: DomainModelBenchmarkCustomerBody}> = (props) => {
          const {data} = props ?? {};

          return  customerAuthenticateCustomer(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CustomerAuthenticateCustomerMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerAuthenticateCustomerHook>>>>
    export type CustomerAuthenticateCustomerMutationBody = DomainModelBenchmarkCustomerBody
    export type CustomerAuthenticateCustomerMutationError = unknown

    export const useCustomerAuthenticateCustomer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerAuthenticateCustomerHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext>, }
) => {

      const mutationOptions = useCustomerAuthenticateCustomerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useCustomerUpdateAgentAvatarHook = () => {
        const customerUpdateAgentAvatar = useCustomInstance<string>();

        return (
    
 ) => {
        return customerUpdateAgentAvatar(
          {url: `/api/Customer/UpdateAgentAvatar`, method: 'POST'
    },
          );
        }
      }
    


export const useCustomerUpdateAgentAvatarMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerUpdateAgentAvatarHook>>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerUpdateAgentAvatarHook>>>, TError,void, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const customerUpdateAgentAvatar =  useCustomerUpdateAgentAvatarHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCustomerUpdateAgentAvatarHook>>>, void> = () => {
          

          return  customerUpdateAgentAvatar()
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CustomerUpdateAgentAvatarMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerUpdateAgentAvatarHook>>>>
    
    export type CustomerUpdateAgentAvatarMutationError = unknown

    export const useCustomerUpdateAgentAvatar = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerUpdateAgentAvatarHook>>>, TError,void, TContext>, }
) => {

      const mutationOptions = useCustomerUpdateAgentAvatarMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useCustomerChangePasswordHook = () => {
        const customerChangePassword = useCustomInstance<string>();

        return (
    domainModelChangePasswordBody: DomainModelChangePasswordBody,
 ) => {
        return customerChangePassword(
          {url: `/api/Customer/ChangePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelChangePasswordBody
    },
          );
        }
      }
    


export const useCustomerChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerChangePasswordHook>>>, TError,{data: DomainModelChangePasswordBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerChangePasswordHook>>>, TError,{data: DomainModelChangePasswordBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const customerChangePassword =  useCustomerChangePasswordHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCustomerChangePasswordHook>>>, {data: DomainModelChangePasswordBody}> = (props) => {
          const {data} = props ?? {};

          return  customerChangePassword(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CustomerChangePasswordMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerChangePasswordHook>>>>
    export type CustomerChangePasswordMutationBody = DomainModelChangePasswordBody
    export type CustomerChangePasswordMutationError = unknown

    export const useCustomerChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerChangePasswordHook>>>, TError,{data: DomainModelChangePasswordBody}, TContext>, }
) => {

      const mutationOptions = useCustomerChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useCustomerPostCustomerHook = () => {
        const customerPostCustomer = useCustomInstance<DomainModelBenchmarkCustomer>();

        return (
    domainModelBenchmarkCustomerBody: DomainModelBenchmarkCustomerBody,
 ) => {
        return customerPostCustomer(
          {url: `/api/Customer/post`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkCustomerBody
    },
          );
        }
      }
    


export const useCustomerPostCustomerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerPostCustomerHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerPostCustomerHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const customerPostCustomer =  useCustomerPostCustomerHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCustomerPostCustomerHook>>>, {data: DomainModelBenchmarkCustomerBody}> = (props) => {
          const {data} = props ?? {};

          return  customerPostCustomer(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CustomerPostCustomerMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerPostCustomerHook>>>>
    export type CustomerPostCustomerMutationBody = DomainModelBenchmarkCustomerBody
    export type CustomerPostCustomerMutationError = unknown

    export const useCustomerPostCustomer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerPostCustomerHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext>, }
) => {

      const mutationOptions = useCustomerPostCustomerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useCustomerRateCustomerHook = () => {
        const customerRateCustomer = useCustomInstance<CustomerRateCustomer200OneItem[] | CustomerRateCustomer200TwoItem[] | CustomerRateCustomer200ThreeItem[] | CustomerRateCustomer200FourItem[]>();

        return (
    domainModelBenchmarkCustomerBody: DomainModelBenchmarkCustomerBody,
 ) => {
        return customerRateCustomer(
          {url: `/api/Customer/rate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkCustomerBody
    },
          );
        }
      }
    


export const useCustomerRateCustomerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerRateCustomerHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerRateCustomerHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const customerRateCustomer =  useCustomerRateCustomerHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCustomerRateCustomerHook>>>, {data: DomainModelBenchmarkCustomerBody}> = (props) => {
          const {data} = props ?? {};

          return  customerRateCustomer(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CustomerRateCustomerMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerRateCustomerHook>>>>
    export type CustomerRateCustomerMutationBody = DomainModelBenchmarkCustomerBody
    export type CustomerRateCustomerMutationError = unknown

    export const useCustomerRateCustomer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerRateCustomerHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext>, }
) => {

      const mutationOptions = useCustomerRateCustomerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useCustomerPutCustomerHook = () => {
        const customerPutCustomer = useCustomInstance<CustomerPutCustomer200OneItem[] | CustomerPutCustomer200TwoItem[] | CustomerPutCustomer200ThreeItem[] | CustomerPutCustomer200FourItem[]>();

        return (
    domainModelBenchmarkCustomerBody: DomainModelBenchmarkCustomerBody,
 ) => {
        return customerPutCustomer(
          {url: `/api/Customer/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkCustomerBody
    },
          );
        }
      }
    


export const useCustomerPutCustomerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerPutCustomerHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerPutCustomerHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const customerPutCustomer =  useCustomerPutCustomerHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCustomerPutCustomerHook>>>, {data: DomainModelBenchmarkCustomerBody}> = (props) => {
          const {data} = props ?? {};

          return  customerPutCustomer(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CustomerPutCustomerMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerPutCustomerHook>>>>
    export type CustomerPutCustomerMutationBody = DomainModelBenchmarkCustomerBody
    export type CustomerPutCustomerMutationError = unknown

    export const useCustomerPutCustomer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerPutCustomerHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext>, }
) => {

      const mutationOptions = useCustomerPutCustomerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useCustomerCustomerUpdateHook = () => {
        const customerCustomerUpdate = useCustomInstance<DomainModelBenchmarkCustomer>();

        return (
    domainModelBenchmarkCustomerBody: DomainModelBenchmarkCustomerBody,
 ) => {
        return customerCustomerUpdate(
          {url: `/api/Customer/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkCustomerBody
    },
          );
        }
      }
    


export const useCustomerCustomerUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerCustomerUpdateHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerCustomerUpdateHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const customerCustomerUpdate =  useCustomerCustomerUpdateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCustomerCustomerUpdateHook>>>, {data: DomainModelBenchmarkCustomerBody}> = (props) => {
          const {data} = props ?? {};

          return  customerCustomerUpdate(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CustomerCustomerUpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerCustomerUpdateHook>>>>
    export type CustomerCustomerUpdateMutationBody = DomainModelBenchmarkCustomerBody
    export type CustomerCustomerUpdateMutationError = unknown

    export const useCustomerCustomerUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerCustomerUpdateHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext>, }
) => {

      const mutationOptions = useCustomerCustomerUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useCustomerUpdatecustomerprofileHook = () => {
        const customerUpdatecustomerprofile = useCustomInstance<DomainModelBenchmarkCustomer>();

        return (
    domainModelBenchmarkCustomerBody: DomainModelBenchmarkCustomerBody,
 ) => {
        return customerUpdatecustomerprofile(
          {url: `/api/Customer/UpdateCustomerProfile`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkCustomerBody
    },
          );
        }
      }
    


export const useCustomerUpdatecustomerprofileMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerUpdatecustomerprofileHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerUpdatecustomerprofileHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const customerUpdatecustomerprofile =  useCustomerUpdatecustomerprofileHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCustomerUpdatecustomerprofileHook>>>, {data: DomainModelBenchmarkCustomerBody}> = (props) => {
          const {data} = props ?? {};

          return  customerUpdatecustomerprofile(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CustomerUpdatecustomerprofileMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerUpdatecustomerprofileHook>>>>
    export type CustomerUpdatecustomerprofileMutationBody = DomainModelBenchmarkCustomerBody
    export type CustomerUpdatecustomerprofileMutationError = unknown

    export const useCustomerUpdatecustomerprofile = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerUpdatecustomerprofileHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext>, }
) => {

      const mutationOptions = useCustomerUpdatecustomerprofileMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useCustomerDeleteCustomerHook = () => {
        const customerDeleteCustomer = useCustomInstance<boolean>();

        return (
    params: CustomerDeleteCustomerParams,
 signal?: AbortSignal
) => {
        return customerDeleteCustomer(
          {url: `/api/Customer/delete`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getCustomerDeleteCustomerQueryKey = (params: CustomerDeleteCustomerParams,) => {
    return [`/api/Customer/delete`, ...(params ? [params]: [])] as const;
    }

    
export const useCustomerDeleteCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerDeleteCustomerHook>>>, TError = unknown>(params: CustomerDeleteCustomerParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerDeleteCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerDeleteCustomerQueryKey(params);

  const customerDeleteCustomer =  useCustomerDeleteCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerDeleteCustomerHook>>>> = ({ signal }) => customerDeleteCustomer(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerDeleteCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerDeleteCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerDeleteCustomerHook>>>>
export type CustomerDeleteCustomerQueryError = unknown

export const useCustomerDeleteCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerDeleteCustomerHook>>>, TError = unknown>(
 params: CustomerDeleteCustomerParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerDeleteCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerDeleteCustomerQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerGetAuthenticateCustomerByTokenIdHook = () => {
        const customerGetAuthenticateCustomerByTokenId = useCustomInstance<DomainModelBenchmarkCustomer[]>();

        return (
    params: CustomerGetAuthenticateCustomerByTokenIdParams,
 signal?: AbortSignal
) => {
        return customerGetAuthenticateCustomerByTokenId(
          {url: `/api/Customer/GetAuthenticateCustomerByTokenId`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getCustomerGetAuthenticateCustomerByTokenIdQueryKey = (params: CustomerGetAuthenticateCustomerByTokenIdParams,) => {
    return [`/api/Customer/GetAuthenticateCustomerByTokenId`, ...(params ? [params]: [])] as const;
    }

    
export const useCustomerGetAuthenticateCustomerByTokenIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetAuthenticateCustomerByTokenIdHook>>>, TError = unknown>(params: CustomerGetAuthenticateCustomerByTokenIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetAuthenticateCustomerByTokenIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerGetAuthenticateCustomerByTokenIdQueryKey(params);

  const customerGetAuthenticateCustomerByTokenId =  useCustomerGetAuthenticateCustomerByTokenIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerGetAuthenticateCustomerByTokenIdHook>>>> = ({ signal }) => customerGetAuthenticateCustomerByTokenId(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetAuthenticateCustomerByTokenIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerGetAuthenticateCustomerByTokenIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerGetAuthenticateCustomerByTokenIdHook>>>>
export type CustomerGetAuthenticateCustomerByTokenIdQueryError = unknown

export const useCustomerGetAuthenticateCustomerByTokenId = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetAuthenticateCustomerByTokenIdHook>>>, TError = unknown>(
 params: CustomerGetAuthenticateCustomerByTokenIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetAuthenticateCustomerByTokenIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerGetAuthenticateCustomerByTokenIdQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerSaveAndRenewHook = () => {
        const customerSaveAndRenew = useCustomInstance<DomainModelBenchmarkCustomer>();

        return (
    domainModelBenchmarkCustomerBody: DomainModelBenchmarkCustomerBody,
 ) => {
        return customerSaveAndRenew(
          {url: `/api/Customer/renew`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkCustomerBody
    },
          );
        }
      }
    


export const useCustomerSaveAndRenewMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerSaveAndRenewHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerSaveAndRenewHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const customerSaveAndRenew =  useCustomerSaveAndRenewHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCustomerSaveAndRenewHook>>>, {data: DomainModelBenchmarkCustomerBody}> = (props) => {
          const {data} = props ?? {};

          return  customerSaveAndRenew(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CustomerSaveAndRenewMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerSaveAndRenewHook>>>>
    export type CustomerSaveAndRenewMutationBody = DomainModelBenchmarkCustomerBody
    export type CustomerSaveAndRenewMutationError = unknown

    export const useCustomerSaveAndRenew = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerSaveAndRenewHook>>>, TError,{data: DomainModelBenchmarkCustomerBody}, TContext>, }
) => {

      const mutationOptions = useCustomerSaveAndRenewMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useCustomerSearchCustomerHook = () => {
        const customerSearchCustomer = useCustomInstance<DomainModelBenchmarkCustomer[]>();

        return (
    search: string,
 ) => {
        return customerSearchCustomer(
          {url: `/api/Customer/SearchCustomer/${search}`, method: 'POST'
    },
          );
        }
      }
    


export const useCustomerSearchCustomerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerSearchCustomerHook>>>, TError,{search: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerSearchCustomerHook>>>, TError,{search: string}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const customerSearchCustomer =  useCustomerSearchCustomerHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCustomerSearchCustomerHook>>>, {search: string}> = (props) => {
          const {search} = props ?? {};

          return  customerSearchCustomer(search,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CustomerSearchCustomerMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerSearchCustomerHook>>>>
    
    export type CustomerSearchCustomerMutationError = unknown

    export const useCustomerSearchCustomer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerSearchCustomerHook>>>, TError,{search: string}, TContext>, }
) => {

      const mutationOptions = useCustomerSearchCustomerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useCustomerGetCustomerDetailsHook = () => {
        const customerGetCustomerDetails = useCustomInstance<DomainModelBenchmarkCustomer>();

        return (
    id: number,
 ) => {
        return customerGetCustomerDetails(
          {url: `/api/Customer/GetCustomerDetails/${id}`, method: 'POST'
    },
          );
        }
      }
    


export const useCustomerGetCustomerDetailsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomerDetailsHook>>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomerDetailsHook>>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const customerGetCustomerDetails =  useCustomerGetCustomerDetailsHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomerDetailsHook>>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  customerGetCustomerDetails(id,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CustomerGetCustomerDetailsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomerDetailsHook>>>>
    
    export type CustomerGetCustomerDetailsMutationError = unknown

    export const useCustomerGetCustomerDetails = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomerDetailsHook>>>, TError,{id: number}, TContext>, }
) => {

      const mutationOptions = useCustomerGetCustomerDetailsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useCustomerGetNewCustomerCountHook = () => {
        const customerGetNewCustomerCount = useCustomInstance<string>();

        return (
    
 signal?: AbortSignal
) => {
        return customerGetNewCustomerCount(
          {url: `/api/Customer/getNewCustomerCount`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerGetNewCustomerCountQueryKey = () => {
    return [`/api/Customer/getNewCustomerCount`] as const;
    }

    
export const useCustomerGetNewCustomerCountQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetNewCustomerCountHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetNewCustomerCountHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerGetNewCustomerCountQueryKey();

  const customerGetNewCustomerCount =  useCustomerGetNewCustomerCountHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerGetNewCustomerCountHook>>>> = ({ signal }) => customerGetNewCustomerCount(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetNewCustomerCountHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerGetNewCustomerCountQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerGetNewCustomerCountHook>>>>
export type CustomerGetNewCustomerCountQueryError = unknown

export const useCustomerGetNewCustomerCount = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetNewCustomerCountHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetNewCustomerCountHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerGetNewCustomerCountQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerUpdateNewCustomerHook = () => {
        const customerUpdateNewCustomer = useCustomInstance<boolean>();

        return (
    
 signal?: AbortSignal
) => {
        return customerUpdateNewCustomer(
          {url: `/api/Customer/updateNewCustomer`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerUpdateNewCustomerQueryKey = () => {
    return [`/api/Customer/updateNewCustomer`] as const;
    }

    
export const useCustomerUpdateNewCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerUpdateNewCustomerHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerUpdateNewCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerUpdateNewCustomerQueryKey();

  const customerUpdateNewCustomer =  useCustomerUpdateNewCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerUpdateNewCustomerHook>>>> = ({ signal }) => customerUpdateNewCustomer(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerUpdateNewCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerUpdateNewCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerUpdateNewCustomerHook>>>>
export type CustomerUpdateNewCustomerQueryError = unknown

export const useCustomerUpdateNewCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerUpdateNewCustomerHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerUpdateNewCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerUpdateNewCustomerQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerGetWebPortalCustomerCountHook = () => {
        const customerGetWebPortalCustomerCount = useCustomInstance<string>();

        return (
    
 signal?: AbortSignal
) => {
        return customerGetWebPortalCustomerCount(
          {url: `/api/Customer/getWebPortalCustomerCount`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerGetWebPortalCustomerCountQueryKey = () => {
    return [`/api/Customer/getWebPortalCustomerCount`] as const;
    }

    
export const useCustomerGetWebPortalCustomerCountQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetWebPortalCustomerCountHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetWebPortalCustomerCountHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerGetWebPortalCustomerCountQueryKey();

  const customerGetWebPortalCustomerCount =  useCustomerGetWebPortalCustomerCountHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerGetWebPortalCustomerCountHook>>>> = ({ signal }) => customerGetWebPortalCustomerCount(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetWebPortalCustomerCountHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerGetWebPortalCustomerCountQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerGetWebPortalCustomerCountHook>>>>
export type CustomerGetWebPortalCustomerCountQueryError = unknown

export const useCustomerGetWebPortalCustomerCount = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetWebPortalCustomerCountHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetWebPortalCustomerCountHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerGetWebPortalCustomerCountQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerGetWebPortalCustomerWithFiltersHook = () => {
        const customerGetWebPortalCustomerWithFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkCustomer>();

        return (
    startIndex: number,
    endIndex: number,
    searchFilter: string,
    sortingFilter: string,
 signal?: AbortSignal
) => {
        return customerGetWebPortalCustomerWithFilters(
          {url: `/api/WebPortalCustomer/filters/${startIndex}/${endIndex}/${searchFilter}/${sortingFilter}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerGetWebPortalCustomerWithFiltersQueryKey = (startIndex: number,
    endIndex: number,
    searchFilter: string,
    sortingFilter: string,) => {
    return [`/api/WebPortalCustomer/filters/${startIndex}/${endIndex}/${searchFilter}/${sortingFilter}`] as const;
    }

    
export const useCustomerGetWebPortalCustomerWithFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetWebPortalCustomerWithFiltersHook>>>, TError = unknown>(startIndex: number,
    endIndex: number,
    searchFilter: string,
    sortingFilter: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetWebPortalCustomerWithFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerGetWebPortalCustomerWithFiltersQueryKey(startIndex,endIndex,searchFilter,sortingFilter);

  const customerGetWebPortalCustomerWithFilters =  useCustomerGetWebPortalCustomerWithFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerGetWebPortalCustomerWithFiltersHook>>>> = ({ signal }) => customerGetWebPortalCustomerWithFilters(startIndex,endIndex,searchFilter,sortingFilter, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(startIndex && endIndex && searchFilter && sortingFilter), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetWebPortalCustomerWithFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerGetWebPortalCustomerWithFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerGetWebPortalCustomerWithFiltersHook>>>>
export type CustomerGetWebPortalCustomerWithFiltersQueryError = unknown

export const useCustomerGetWebPortalCustomerWithFilters = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetWebPortalCustomerWithFiltersHook>>>, TError = unknown>(
 startIndex: number,
    endIndex: number,
    searchFilter: string,
    sortingFilter: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetWebPortalCustomerWithFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerGetWebPortalCustomerWithFiltersQueryOptions(startIndex,endIndex,searchFilter,sortingFilter,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerGetCustomerByPolicyNumberOrEmailOrNameHook = () => {
        const customerGetCustomerByPolicyNumberOrEmailOrName = useCustomInstance<DomainModelBenchmarkCustomer>();

        return (
    policyNumber: string,
    email: string,
    firstName: string,
    lastName: string,
 signal?: AbortSignal
) => {
        return customerGetCustomerByPolicyNumberOrEmailOrName(
          {url: `/api/GetCustomerByPolicyNumberOrEmailOrName/${policyNumber}/${email}/${firstName}/${lastName}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerGetCustomerByPolicyNumberOrEmailOrNameQueryKey = (policyNumber: string,
    email: string,
    firstName: string,
    lastName: string,) => {
    return [`/api/GetCustomerByPolicyNumberOrEmailOrName/${policyNumber}/${email}/${firstName}/${lastName}`] as const;
    }

    
export const useCustomerGetCustomerByPolicyNumberOrEmailOrNameQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomerByPolicyNumberOrEmailOrNameHook>>>, TError = unknown>(policyNumber: string,
    email: string,
    firstName: string,
    lastName: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomerByPolicyNumberOrEmailOrNameHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerGetCustomerByPolicyNumberOrEmailOrNameQueryKey(policyNumber,email,firstName,lastName);

  const customerGetCustomerByPolicyNumberOrEmailOrName =  useCustomerGetCustomerByPolicyNumberOrEmailOrNameHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomerByPolicyNumberOrEmailOrNameHook>>>> = ({ signal }) => customerGetCustomerByPolicyNumberOrEmailOrName(policyNumber,email,firstName,lastName, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyNumber && email && firstName && lastName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomerByPolicyNumberOrEmailOrNameHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerGetCustomerByPolicyNumberOrEmailOrNameQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomerByPolicyNumberOrEmailOrNameHook>>>>
export type CustomerGetCustomerByPolicyNumberOrEmailOrNameQueryError = unknown

export const useCustomerGetCustomerByPolicyNumberOrEmailOrName = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomerByPolicyNumberOrEmailOrNameHook>>>, TError = unknown>(
 policyNumber: string,
    email: string,
    firstName: string,
    lastName: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomerByPolicyNumberOrEmailOrNameHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerGetCustomerByPolicyNumberOrEmailOrNameQueryOptions(policyNumber,email,firstName,lastName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerGetCustomersBySearchHook = () => {
        const customerGetCustomersBySearch = useCustomInstance<DomainModelBenchmarkCustomer[]>();

        return (
    search: string,
 ) => {
        return customerGetCustomersBySearch(
          {url: `/api/Customer/GetCustomersBySearch/${search}`, method: 'POST'
    },
          );
        }
      }
    


export const useCustomerGetCustomersBySearchMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomersBySearchHook>>>, TError,{search: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomersBySearchHook>>>, TError,{search: string}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const customerGetCustomersBySearch =  useCustomerGetCustomersBySearchHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomersBySearchHook>>>, {search: string}> = (props) => {
          const {search} = props ?? {};

          return  customerGetCustomersBySearch(search,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CustomerGetCustomersBySearchMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomersBySearchHook>>>>
    
    export type CustomerGetCustomersBySearchMutationError = unknown

    export const useCustomerGetCustomersBySearch = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerGetCustomersBySearchHook>>>, TError,{search: string}, TContext>, }
) => {

      const mutationOptions = useCustomerGetCustomersBySearchMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useCustomerContactGetAllCustomerContactHook = () => {
        const customerContactGetAllCustomerContact = useCustomInstance<DomainModelBenchmarkCustomerContact[]>();

        return (
    
 signal?: AbortSignal
) => {
        return customerContactGetAllCustomerContact(
          {url: `/api/CustomerContact/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerContactGetAllCustomerContactQueryKey = () => {
    return [`/api/CustomerContact/getAll`] as const;
    }

    
export const useCustomerContactGetAllCustomerContactQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerContactGetAllCustomerContactHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerContactGetAllCustomerContactHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerContactGetAllCustomerContactQueryKey();

  const customerContactGetAllCustomerContact =  useCustomerContactGetAllCustomerContactHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerContactGetAllCustomerContactHook>>>> = ({ signal }) => customerContactGetAllCustomerContact(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerContactGetAllCustomerContactHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerContactGetAllCustomerContactQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerContactGetAllCustomerContactHook>>>>
export type CustomerContactGetAllCustomerContactQueryError = unknown

export const useCustomerContactGetAllCustomerContact = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerContactGetAllCustomerContactHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerContactGetAllCustomerContactHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerContactGetAllCustomerContactQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerContactGetHook = () => {
        const customerContactGet = useCustomInstance<DomainModelBenchmarkCustomerContact>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return customerContactGet(
          {url: `/api/CustomerContact/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerContactGetQueryKey = (id: number,) => {
    return [`/api/CustomerContact/get/${id}`] as const;
    }

    
export const useCustomerContactGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerContactGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerContactGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerContactGetQueryKey(id);

  const customerContactGet =  useCustomerContactGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerContactGetHook>>>> = ({ signal }) => customerContactGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerContactGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerContactGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerContactGetHook>>>>
export type CustomerContactGetQueryError = unknown

export const useCustomerContactGet = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerContactGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerContactGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerContactGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerContactPostCustomerContactHook = () => {
        const customerContactPostCustomerContact = useCustomInstance<DomainModelBenchmarkCustomerContact>();

        return (
    domainModelBenchmarkCustomerContactBody: DomainModelBenchmarkCustomerContactBody,
 ) => {
        return customerContactPostCustomerContact(
          {url: `/api/CustomerContact/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkCustomerContactBody
    },
          );
        }
      }
    


export const useCustomerContactPostCustomerContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerContactPostCustomerContactHook>>>, TError,{data: DomainModelBenchmarkCustomerContactBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerContactPostCustomerContactHook>>>, TError,{data: DomainModelBenchmarkCustomerContactBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const customerContactPostCustomerContact =  useCustomerContactPostCustomerContactHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCustomerContactPostCustomerContactHook>>>, {data: DomainModelBenchmarkCustomerContactBody}> = (props) => {
          const {data} = props ?? {};

          return  customerContactPostCustomerContact(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CustomerContactPostCustomerContactMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerContactPostCustomerContactHook>>>>
    export type CustomerContactPostCustomerContactMutationBody = DomainModelBenchmarkCustomerContactBody
    export type CustomerContactPostCustomerContactMutationError = unknown

    export const useCustomerContactPostCustomerContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerContactPostCustomerContactHook>>>, TError,{data: DomainModelBenchmarkCustomerContactBody}, TContext>, }
) => {

      const mutationOptions = useCustomerContactPostCustomerContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useCustomerContactPutCustomerContactHook = () => {
        const customerContactPutCustomerContact = useCustomInstance<DomainModelBenchmarkCustomerContact>();

        return (
    domainModelBenchmarkCustomerContactBody: DomainModelBenchmarkCustomerContactBody,
 ) => {
        return customerContactPutCustomerContact(
          {url: `/api/CustomerContact/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkCustomerContactBody
    },
          );
        }
      }
    


export const useCustomerContactPutCustomerContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerContactPutCustomerContactHook>>>, TError,{data: DomainModelBenchmarkCustomerContactBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerContactPutCustomerContactHook>>>, TError,{data: DomainModelBenchmarkCustomerContactBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const customerContactPutCustomerContact =  useCustomerContactPutCustomerContactHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCustomerContactPutCustomerContactHook>>>, {data: DomainModelBenchmarkCustomerContactBody}> = (props) => {
          const {data} = props ?? {};

          return  customerContactPutCustomerContact(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CustomerContactPutCustomerContactMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerContactPutCustomerContactHook>>>>
    export type CustomerContactPutCustomerContactMutationBody = DomainModelBenchmarkCustomerContactBody
    export type CustomerContactPutCustomerContactMutationError = unknown

    export const useCustomerContactPutCustomerContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerContactPutCustomerContactHook>>>, TError,{data: DomainModelBenchmarkCustomerContactBody}, TContext>, }
) => {

      const mutationOptions = useCustomerContactPutCustomerContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useCustomerContactDeleteCustomerContactHook = () => {
        const customerContactDeleteCustomerContact = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return customerContactDeleteCustomerContact(
          {url: `/api/CustomerContact/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerContactDeleteCustomerContactQueryKey = (id: number,) => {
    return [`/api/CustomerContact/delete/${id}`] as const;
    }

    
export const useCustomerContactDeleteCustomerContactQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerContactDeleteCustomerContactHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerContactDeleteCustomerContactHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerContactDeleteCustomerContactQueryKey(id);

  const customerContactDeleteCustomerContact =  useCustomerContactDeleteCustomerContactHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerContactDeleteCustomerContactHook>>>> = ({ signal }) => customerContactDeleteCustomerContact(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerContactDeleteCustomerContactHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerContactDeleteCustomerContactQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerContactDeleteCustomerContactHook>>>>
export type CustomerContactDeleteCustomerContactQueryError = unknown

export const useCustomerContactDeleteCustomerContact = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerContactDeleteCustomerContactHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerContactDeleteCustomerContactHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerContactDeleteCustomerContactQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerInvestmentStrategyMediaUploadHook = () => {
        const customerInvestmentStrategyMediaUpload = useCustomInstance<CustomerInvestmentStrategyMediaUpload200One | CustomerInvestmentStrategyMediaUpload200Two | CustomerInvestmentStrategyMediaUpload200Three | CustomerInvestmentStrategyMediaUpload200Four>();

        return (
    
 ) => {
        return customerInvestmentStrategyMediaUpload(
          {url: `/api/CustomerInvestmentStrategy/MediaUpload`, method: 'POST'
    },
          );
        }
      }
    


export const useCustomerInvestmentStrategyMediaUploadMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyMediaUploadHook>>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyMediaUploadHook>>>, TError,void, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const customerInvestmentStrategyMediaUpload =  useCustomerInvestmentStrategyMediaUploadHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyMediaUploadHook>>>, void> = () => {
          

          return  customerInvestmentStrategyMediaUpload()
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CustomerInvestmentStrategyMediaUploadMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyMediaUploadHook>>>>
    
    export type CustomerInvestmentStrategyMediaUploadMutationError = unknown

    export const useCustomerInvestmentStrategyMediaUpload = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyMediaUploadHook>>>, TError,void, TContext>, }
) => {

      const mutationOptions = useCustomerInvestmentStrategyMediaUploadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useCustomerInvestmentStrategyGetAllCustomerInvestmentStrategyHook = () => {
        const customerInvestmentStrategyGetAllCustomerInvestmentStrategy = useCustomInstance<DomainModelBenchmarkCustomerInvestmentStrategy[]>();

        return (
    
 signal?: AbortSignal
) => {
        return customerInvestmentStrategyGetAllCustomerInvestmentStrategy(
          {url: `/api/CustomerInvestmentStrategy/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerInvestmentStrategyGetAllCustomerInvestmentStrategyQueryKey = () => {
    return [`/api/CustomerInvestmentStrategy/getAll`] as const;
    }

    
export const useCustomerInvestmentStrategyGetAllCustomerInvestmentStrategyQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyGetAllCustomerInvestmentStrategyHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyGetAllCustomerInvestmentStrategyHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerInvestmentStrategyGetAllCustomerInvestmentStrategyQueryKey();

  const customerInvestmentStrategyGetAllCustomerInvestmentStrategy =  useCustomerInvestmentStrategyGetAllCustomerInvestmentStrategyHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyGetAllCustomerInvestmentStrategyHook>>>> = ({ signal }) => customerInvestmentStrategyGetAllCustomerInvestmentStrategy(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyGetAllCustomerInvestmentStrategyHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerInvestmentStrategyGetAllCustomerInvestmentStrategyQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyGetAllCustomerInvestmentStrategyHook>>>>
export type CustomerInvestmentStrategyGetAllCustomerInvestmentStrategyQueryError = unknown

export const useCustomerInvestmentStrategyGetAllCustomerInvestmentStrategy = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyGetAllCustomerInvestmentStrategyHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyGetAllCustomerInvestmentStrategyHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerInvestmentStrategyGetAllCustomerInvestmentStrategyQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerInvestmentStrategyGetCustomerInvestmentStrategyByCustomerIdHook = () => {
        const customerInvestmentStrategyGetCustomerInvestmentStrategyByCustomerId = useCustomInstance<DomainModelBenchmarkCustomerInvestmentStrategy>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return customerInvestmentStrategyGetCustomerInvestmentStrategyByCustomerId(
          {url: `/api/customers/${customerId}/CustomerInvestmentStrategy`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerInvestmentStrategyGetCustomerInvestmentStrategyByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/CustomerInvestmentStrategy`] as const;
    }

    
export const useCustomerInvestmentStrategyGetCustomerInvestmentStrategyByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyGetCustomerInvestmentStrategyByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyGetCustomerInvestmentStrategyByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerInvestmentStrategyGetCustomerInvestmentStrategyByCustomerIdQueryKey(customerId);

  const customerInvestmentStrategyGetCustomerInvestmentStrategyByCustomerId =  useCustomerInvestmentStrategyGetCustomerInvestmentStrategyByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyGetCustomerInvestmentStrategyByCustomerIdHook>>>> = ({ signal }) => customerInvestmentStrategyGetCustomerInvestmentStrategyByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyGetCustomerInvestmentStrategyByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerInvestmentStrategyGetCustomerInvestmentStrategyByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyGetCustomerInvestmentStrategyByCustomerIdHook>>>>
export type CustomerInvestmentStrategyGetCustomerInvestmentStrategyByCustomerIdQueryError = unknown

export const useCustomerInvestmentStrategyGetCustomerInvestmentStrategyByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyGetCustomerInvestmentStrategyByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyGetCustomerInvestmentStrategyByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerInvestmentStrategyGetCustomerInvestmentStrategyByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerInvestmentStrategyPostCustomerInvestmentStrategyHook = () => {
        const customerInvestmentStrategyPostCustomerInvestmentStrategy = useCustomInstance<DomainModelBenchmarkCustomerInvestmentStrategy>();

        return (
    domainModelBenchmarkCustomerInvestmentStrategyBody: DomainModelBenchmarkCustomerInvestmentStrategyBody,
 ) => {
        return customerInvestmentStrategyPostCustomerInvestmentStrategy(
          {url: `/api/CustomerInvestmentStrategy/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkCustomerInvestmentStrategyBody
    },
          );
        }
      }
    


export const useCustomerInvestmentStrategyPostCustomerInvestmentStrategyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyPostCustomerInvestmentStrategyHook>>>, TError,{data: DomainModelBenchmarkCustomerInvestmentStrategyBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyPostCustomerInvestmentStrategyHook>>>, TError,{data: DomainModelBenchmarkCustomerInvestmentStrategyBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const customerInvestmentStrategyPostCustomerInvestmentStrategy =  useCustomerInvestmentStrategyPostCustomerInvestmentStrategyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyPostCustomerInvestmentStrategyHook>>>, {data: DomainModelBenchmarkCustomerInvestmentStrategyBody}> = (props) => {
          const {data} = props ?? {};

          return  customerInvestmentStrategyPostCustomerInvestmentStrategy(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CustomerInvestmentStrategyPostCustomerInvestmentStrategyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyPostCustomerInvestmentStrategyHook>>>>
    export type CustomerInvestmentStrategyPostCustomerInvestmentStrategyMutationBody = DomainModelBenchmarkCustomerInvestmentStrategyBody
    export type CustomerInvestmentStrategyPostCustomerInvestmentStrategyMutationError = unknown

    export const useCustomerInvestmentStrategyPostCustomerInvestmentStrategy = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyPostCustomerInvestmentStrategyHook>>>, TError,{data: DomainModelBenchmarkCustomerInvestmentStrategyBody}, TContext>, }
) => {

      const mutationOptions = useCustomerInvestmentStrategyPostCustomerInvestmentStrategyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useCustomerInvestmentStrategyPutCustomerInvestmentStrategyHook = () => {
        const customerInvestmentStrategyPutCustomerInvestmentStrategy = useCustomInstance<DomainModelBenchmarkCustomerInvestmentStrategy>();

        return (
    domainModelBenchmarkCustomerInvestmentStrategyBody: DomainModelBenchmarkCustomerInvestmentStrategyBody,
 ) => {
        return customerInvestmentStrategyPutCustomerInvestmentStrategy(
          {url: `/api/CustomerInvestmentStrategy/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkCustomerInvestmentStrategyBody
    },
          );
        }
      }
    


export const useCustomerInvestmentStrategyPutCustomerInvestmentStrategyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyPutCustomerInvestmentStrategyHook>>>, TError,{data: DomainModelBenchmarkCustomerInvestmentStrategyBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyPutCustomerInvestmentStrategyHook>>>, TError,{data: DomainModelBenchmarkCustomerInvestmentStrategyBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const customerInvestmentStrategyPutCustomerInvestmentStrategy =  useCustomerInvestmentStrategyPutCustomerInvestmentStrategyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyPutCustomerInvestmentStrategyHook>>>, {data: DomainModelBenchmarkCustomerInvestmentStrategyBody}> = (props) => {
          const {data} = props ?? {};

          return  customerInvestmentStrategyPutCustomerInvestmentStrategy(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CustomerInvestmentStrategyPutCustomerInvestmentStrategyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyPutCustomerInvestmentStrategyHook>>>>
    export type CustomerInvestmentStrategyPutCustomerInvestmentStrategyMutationBody = DomainModelBenchmarkCustomerInvestmentStrategyBody
    export type CustomerInvestmentStrategyPutCustomerInvestmentStrategyMutationError = unknown

    export const useCustomerInvestmentStrategyPutCustomerInvestmentStrategy = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyPutCustomerInvestmentStrategyHook>>>, TError,{data: DomainModelBenchmarkCustomerInvestmentStrategyBody}, TContext>, }
) => {

      const mutationOptions = useCustomerInvestmentStrategyPutCustomerInvestmentStrategyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useCustomerInvestmentStrategyGetHook = () => {
        const customerInvestmentStrategyGet = useCustomInstance<DomainModelBenchmarkCustomerInvestmentStrategy>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return customerInvestmentStrategyGet(
          {url: `/api/CustomerInvestmentStrategy/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerInvestmentStrategyGetQueryKey = (id: number,) => {
    return [`/api/CustomerInvestmentStrategy/${id}`] as const;
    }

    
export const useCustomerInvestmentStrategyGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerInvestmentStrategyGetQueryKey(id);

  const customerInvestmentStrategyGet =  useCustomerInvestmentStrategyGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyGetHook>>>> = ({ signal }) => customerInvestmentStrategyGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerInvestmentStrategyGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyGetHook>>>>
export type CustomerInvestmentStrategyGetQueryError = unknown

export const useCustomerInvestmentStrategyGet = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerInvestmentStrategyGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerInvestmentStrategyDeleteCustomerInvestmentStrategyHook = () => {
        const customerInvestmentStrategyDeleteCustomerInvestmentStrategy = useCustomInstance<boolean>();

        return (
    id: number,
 ) => {
        return customerInvestmentStrategyDeleteCustomerInvestmentStrategy(
          {url: `/api/CustomerInvestmentStrategy/${id}`, method: 'DELETE'
    },
          );
        }
      }
    


export const useCustomerInvestmentStrategyDeleteCustomerInvestmentStrategyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyDeleteCustomerInvestmentStrategyHook>>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyDeleteCustomerInvestmentStrategyHook>>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const customerInvestmentStrategyDeleteCustomerInvestmentStrategy =  useCustomerInvestmentStrategyDeleteCustomerInvestmentStrategyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyDeleteCustomerInvestmentStrategyHook>>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  customerInvestmentStrategyDeleteCustomerInvestmentStrategy(id,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CustomerInvestmentStrategyDeleteCustomerInvestmentStrategyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyDeleteCustomerInvestmentStrategyHook>>>>
    
    export type CustomerInvestmentStrategyDeleteCustomerInvestmentStrategyMutationError = unknown

    export const useCustomerInvestmentStrategyDeleteCustomerInvestmentStrategy = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerInvestmentStrategyDeleteCustomerInvestmentStrategyHook>>>, TError,{id: number}, TContext>, }
) => {

      const mutationOptions = useCustomerInvestmentStrategyDeleteCustomerInvestmentStrategyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useCustomerQuestionGetAllUsersHook = () => {
        const customerQuestionGetAllUsers = useCustomInstance<DomainModelUser[]>();

        return (
    
 signal?: AbortSignal
) => {
        return customerQuestionGetAllUsers(
          {url: `/api/CustomerQuestion/users`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerQuestionGetAllUsersQueryKey = () => {
    return [`/api/CustomerQuestion/users`] as const;
    }

    
export const useCustomerQuestionGetAllUsersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetAllUsersHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetAllUsersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerQuestionGetAllUsersQueryKey();

  const customerQuestionGetAllUsers =  useCustomerQuestionGetAllUsersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetAllUsersHook>>>> = ({ signal }) => customerQuestionGetAllUsers(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetAllUsersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerQuestionGetAllUsersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetAllUsersHook>>>>
export type CustomerQuestionGetAllUsersQueryError = unknown

export const useCustomerQuestionGetAllUsers = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetAllUsersHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetAllUsersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerQuestionGetAllUsersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerQuestionGetAllCustomerQuestionByStatusHook = () => {
        const customerQuestionGetAllCustomerQuestionByStatus = useCustomInstance<DomainModelBenchmarkCustomerQuestion[]>();

        return (
    statusId: number,
 signal?: AbortSignal
) => {
        return customerQuestionGetAllCustomerQuestionByStatus(
          {url: `/api/statuses/${statusId}/CustomerQuestion`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerQuestionGetAllCustomerQuestionByStatusQueryKey = (statusId: number,) => {
    return [`/api/statuses/${statusId}/CustomerQuestion`] as const;
    }

    
export const useCustomerQuestionGetAllCustomerQuestionByStatusQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetAllCustomerQuestionByStatusHook>>>, TError = unknown>(statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetAllCustomerQuestionByStatusHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerQuestionGetAllCustomerQuestionByStatusQueryKey(statusId);

  const customerQuestionGetAllCustomerQuestionByStatus =  useCustomerQuestionGetAllCustomerQuestionByStatusHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetAllCustomerQuestionByStatusHook>>>> = ({ signal }) => customerQuestionGetAllCustomerQuestionByStatus(statusId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(statusId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetAllCustomerQuestionByStatusHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerQuestionGetAllCustomerQuestionByStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetAllCustomerQuestionByStatusHook>>>>
export type CustomerQuestionGetAllCustomerQuestionByStatusQueryError = unknown

export const useCustomerQuestionGetAllCustomerQuestionByStatus = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetAllCustomerQuestionByStatusHook>>>, TError = unknown>(
 statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetAllCustomerQuestionByStatusHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerQuestionGetAllCustomerQuestionByStatusQueryOptions(statusId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerQuestionGetCustomerQuestionsByCustomerIDHook = () => {
        const customerQuestionGetCustomerQuestionsByCustomerID = useCustomInstance<DomainModelBenchmarkCustomerQuestion>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return customerQuestionGetCustomerQuestionsByCustomerID(
          {url: `/api/Customeres/${customerId}/CustomerQuestion`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerQuestionGetCustomerQuestionsByCustomerIDQueryKey = (customerId: number,) => {
    return [`/api/Customeres/${customerId}/CustomerQuestion`] as const;
    }

    
export const useCustomerQuestionGetCustomerQuestionsByCustomerIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetCustomerQuestionsByCustomerIDHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetCustomerQuestionsByCustomerIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerQuestionGetCustomerQuestionsByCustomerIDQueryKey(customerId);

  const customerQuestionGetCustomerQuestionsByCustomerID =  useCustomerQuestionGetCustomerQuestionsByCustomerIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetCustomerQuestionsByCustomerIDHook>>>> = ({ signal }) => customerQuestionGetCustomerQuestionsByCustomerID(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetCustomerQuestionsByCustomerIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerQuestionGetCustomerQuestionsByCustomerIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetCustomerQuestionsByCustomerIDHook>>>>
export type CustomerQuestionGetCustomerQuestionsByCustomerIDQueryError = unknown

export const useCustomerQuestionGetCustomerQuestionsByCustomerID = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetCustomerQuestionsByCustomerIDHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetCustomerQuestionsByCustomerIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerQuestionGetCustomerQuestionsByCustomerIDQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerQuestionPostCustomerQuestionHook = () => {
        const customerQuestionPostCustomerQuestion = useCustomInstance<DomainModelBenchmarkCustomerQuestion>();

        return (
    domainModelBenchmarkCustomerQuestionBody: DomainModelBenchmarkCustomerQuestionBody,
 ) => {
        return customerQuestionPostCustomerQuestion(
          {url: `/api/CustomerQuestion/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkCustomerQuestionBody
    },
          );
        }
      }
    


export const useCustomerQuestionPostCustomerQuestionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionPostCustomerQuestionHook>>>, TError,{data: DomainModelBenchmarkCustomerQuestionBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionPostCustomerQuestionHook>>>, TError,{data: DomainModelBenchmarkCustomerQuestionBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const customerQuestionPostCustomerQuestion =  useCustomerQuestionPostCustomerQuestionHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionPostCustomerQuestionHook>>>, {data: DomainModelBenchmarkCustomerQuestionBody}> = (props) => {
          const {data} = props ?? {};

          return  customerQuestionPostCustomerQuestion(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CustomerQuestionPostCustomerQuestionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionPostCustomerQuestionHook>>>>
    export type CustomerQuestionPostCustomerQuestionMutationBody = DomainModelBenchmarkCustomerQuestionBody
    export type CustomerQuestionPostCustomerQuestionMutationError = unknown

    export const useCustomerQuestionPostCustomerQuestion = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionPostCustomerQuestionHook>>>, TError,{data: DomainModelBenchmarkCustomerQuestionBody}, TContext>, }
) => {

      const mutationOptions = useCustomerQuestionPostCustomerQuestionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useCustomerQuestionUpdateCustomerQuestionHook = () => {
        const customerQuestionUpdateCustomerQuestion = useCustomInstance<CustomerQuestionUpdateCustomerQuestion200OneItem[] | CustomerQuestionUpdateCustomerQuestion200TwoItem[] | CustomerQuestionUpdateCustomerQuestion200ThreeItem[] | CustomerQuestionUpdateCustomerQuestion200FourItem[]>();

        return (
    domainModelBenchmarkCustomerQuestionBody: DomainModelBenchmarkCustomerQuestionBody,
 ) => {
        return customerQuestionUpdateCustomerQuestion(
          {url: `/api/CustomerQuestion/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkCustomerQuestionBody
    },
          );
        }
      }
    


export const useCustomerQuestionUpdateCustomerQuestionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionUpdateCustomerQuestionHook>>>, TError,{data: DomainModelBenchmarkCustomerQuestionBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionUpdateCustomerQuestionHook>>>, TError,{data: DomainModelBenchmarkCustomerQuestionBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const customerQuestionUpdateCustomerQuestion =  useCustomerQuestionUpdateCustomerQuestionHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionUpdateCustomerQuestionHook>>>, {data: DomainModelBenchmarkCustomerQuestionBody}> = (props) => {
          const {data} = props ?? {};

          return  customerQuestionUpdateCustomerQuestion(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CustomerQuestionUpdateCustomerQuestionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionUpdateCustomerQuestionHook>>>>
    export type CustomerQuestionUpdateCustomerQuestionMutationBody = DomainModelBenchmarkCustomerQuestionBody
    export type CustomerQuestionUpdateCustomerQuestionMutationError = unknown

    export const useCustomerQuestionUpdateCustomerQuestion = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionUpdateCustomerQuestionHook>>>, TError,{data: DomainModelBenchmarkCustomerQuestionBody}, TContext>, }
) => {

      const mutationOptions = useCustomerQuestionUpdateCustomerQuestionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useCustomerQuestionGetAllHook = () => {
        const customerQuestionGetAll = useCustomInstance<DomainModelBenchmarkCustomerQuestion[]>();

        return (
    
 signal?: AbortSignal
) => {
        return customerQuestionGetAll(
          {url: `/api/CustomerQuestion`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerQuestionGetAllQueryKey = () => {
    return [`/api/CustomerQuestion`] as const;
    }

    
export const useCustomerQuestionGetAllQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetAllHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetAllHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerQuestionGetAllQueryKey();

  const customerQuestionGetAll =  useCustomerQuestionGetAllHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetAllHook>>>> = ({ signal }) => customerQuestionGetAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetAllHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerQuestionGetAllQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetAllHook>>>>
export type CustomerQuestionGetAllQueryError = unknown

export const useCustomerQuestionGetAll = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetAllHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetAllHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerQuestionGetAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerQuestionGetHook = () => {
        const customerQuestionGet = useCustomInstance<DomainModelBenchmarkCustomerQuestion>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return customerQuestionGet(
          {url: `/api/CustomerQuestion/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getCustomerQuestionGetQueryKey = (id: number,) => {
    return [`/api/CustomerQuestion/${id}`] as const;
    }

    
export const useCustomerQuestionGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerQuestionGetQueryKey(id);

  const customerQuestionGet =  useCustomerQuestionGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetHook>>>> = ({ signal }) => customerQuestionGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type CustomerQuestionGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetHook>>>>
export type CustomerQuestionGetQueryError = unknown

export const useCustomerQuestionGet = <TData = Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useCustomerQuestionGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useCustomerQuestionDeleteCustomerQuestionHook = () => {
        const customerQuestionDeleteCustomerQuestion = useCustomInstance<boolean>();

        return (
    id: number,
 ) => {
        return customerQuestionDeleteCustomerQuestion(
          {url: `/api/CustomerQuestion/${id}`, method: 'DELETE'
    },
          );
        }
      }
    


export const useCustomerQuestionDeleteCustomerQuestionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionDeleteCustomerQuestionHook>>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionDeleteCustomerQuestionHook>>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const customerQuestionDeleteCustomerQuestion =  useCustomerQuestionDeleteCustomerQuestionHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionDeleteCustomerQuestionHook>>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  customerQuestionDeleteCustomerQuestion(id,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CustomerQuestionDeleteCustomerQuestionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionDeleteCustomerQuestionHook>>>>
    
    export type CustomerQuestionDeleteCustomerQuestionMutationError = unknown

    export const useCustomerQuestionDeleteCustomerQuestion = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCustomerQuestionDeleteCustomerQuestionHook>>>, TError,{id: number}, TContext>, }
) => {

      const mutationOptions = useCustomerQuestionDeleteCustomerQuestionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useDeductibleGetDeductibleByIDHook = () => {
        const deductibleGetDeductibleByID = useCustomInstance<DomainModelBenchmarkDeductible[]>();

        return (
    deductibleID: number,
 signal?: AbortSignal
) => {
        return deductibleGetDeductibleByID(
          {url: `/api/Deductible/GetDeductibleByID/${deductibleID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getDeductibleGetDeductibleByIDQueryKey = (deductibleID: number,) => {
    return [`/api/Deductible/GetDeductibleByID/${deductibleID}`] as const;
    }

    
export const useDeductibleGetDeductibleByIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useDeductibleGetDeductibleByIDHook>>>, TError = unknown>(deductibleID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleGetDeductibleByIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDeductibleGetDeductibleByIDQueryKey(deductibleID);

  const deductibleGetDeductibleByID =  useDeductibleGetDeductibleByIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useDeductibleGetDeductibleByIDHook>>>> = ({ signal }) => deductibleGetDeductibleByID(deductibleID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(deductibleID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleGetDeductibleByIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type DeductibleGetDeductibleByIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeductibleGetDeductibleByIDHook>>>>
export type DeductibleGetDeductibleByIDQueryError = unknown

export const useDeductibleGetDeductibleByID = <TData = Awaited<ReturnType<ReturnType<typeof useDeductibleGetDeductibleByIDHook>>>, TError = unknown>(
 deductibleID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleGetDeductibleByIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useDeductibleGetDeductibleByIDQueryOptions(deductibleID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useDeductibleGetAllUsersHook = () => {
        const deductibleGetAllUsers = useCustomInstance<DomainModelUser[]>();

        return (
    
 signal?: AbortSignal
) => {
        return deductibleGetAllUsers(
          {url: `/api/Deductible/users`, method: 'GET', signal
    },
          );
        }
      }
    

export const getDeductibleGetAllUsersQueryKey = () => {
    return [`/api/Deductible/users`] as const;
    }

    
export const useDeductibleGetAllUsersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useDeductibleGetAllUsersHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleGetAllUsersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDeductibleGetAllUsersQueryKey();

  const deductibleGetAllUsers =  useDeductibleGetAllUsersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useDeductibleGetAllUsersHook>>>> = ({ signal }) => deductibleGetAllUsers(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleGetAllUsersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type DeductibleGetAllUsersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeductibleGetAllUsersHook>>>>
export type DeductibleGetAllUsersQueryError = unknown

export const useDeductibleGetAllUsers = <TData = Awaited<ReturnType<ReturnType<typeof useDeductibleGetAllUsersHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleGetAllUsersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useDeductibleGetAllUsersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useDeductibleRateDeductibleHook = () => {
        const deductibleRateDeductible = useCustomInstance<DeductibleRateDeductible200OneItem[] | DeductibleRateDeductible200TwoItem[] | DeductibleRateDeductible200ThreeItem[] | DeductibleRateDeductible200FourItem[]>();

        return (
    domainModelBenchmarkDeductibleBody: DomainModelBenchmarkDeductibleBody,
 ) => {
        return deductibleRateDeductible(
          {url: `/api/Deductible/rate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkDeductibleBody
    },
          );
        }
      }
    


export const useDeductibleRateDeductibleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleRateDeductibleHook>>>, TError,{data: DomainModelBenchmarkDeductibleBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleRateDeductibleHook>>>, TError,{data: DomainModelBenchmarkDeductibleBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const deductibleRateDeductible =  useDeductibleRateDeductibleHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeductibleRateDeductibleHook>>>, {data: DomainModelBenchmarkDeductibleBody}> = (props) => {
          const {data} = props ?? {};

          return  deductibleRateDeductible(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeductibleRateDeductibleMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeductibleRateDeductibleHook>>>>
    export type DeductibleRateDeductibleMutationBody = DomainModelBenchmarkDeductibleBody
    export type DeductibleRateDeductibleMutationError = unknown

    export const useDeductibleRateDeductible = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleRateDeductibleHook>>>, TError,{data: DomainModelBenchmarkDeductibleBody}, TContext>, }
) => {

      const mutationOptions = useDeductibleRateDeductibleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useDeductiblePutDeductibleHook = () => {
        const deductiblePutDeductible = useCustomInstance<DeductiblePutDeductible200OneItem[] | DeductiblePutDeductible200TwoItem[] | DeductiblePutDeductible200ThreeItem[] | DeductiblePutDeductible200FourItem[]>();

        return (
    domainModelBenchmarkDeductibleBody: DomainModelBenchmarkDeductibleBody,
 ) => {
        return deductiblePutDeductible(
          {url: `/api/Deductible/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkDeductibleBody
    },
          );
        }
      }
    


export const useDeductiblePutDeductibleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeductiblePutDeductibleHook>>>, TError,{data: DomainModelBenchmarkDeductibleBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeductiblePutDeductibleHook>>>, TError,{data: DomainModelBenchmarkDeductibleBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const deductiblePutDeductible =  useDeductiblePutDeductibleHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeductiblePutDeductibleHook>>>, {data: DomainModelBenchmarkDeductibleBody}> = (props) => {
          const {data} = props ?? {};

          return  deductiblePutDeductible(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeductiblePutDeductibleMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeductiblePutDeductibleHook>>>>
    export type DeductiblePutDeductibleMutationBody = DomainModelBenchmarkDeductibleBody
    export type DeductiblePutDeductibleMutationError = unknown

    export const useDeductiblePutDeductible = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeductiblePutDeductibleHook>>>, TError,{data: DomainModelBenchmarkDeductibleBody}, TContext>, }
) => {

      const mutationOptions = useDeductiblePutDeductibleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useDeductibleUpdateDeductibleHook = () => {
        const deductibleUpdateDeductible = useCustomInstance<DomainModelBenchmarkDeductible>();

        return (
    domainModelBenchmarkDeductibleBody: DomainModelBenchmarkDeductibleBody,
 ) => {
        return deductibleUpdateDeductible(
          {url: `/api/Deductible/edits`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkDeductibleBody
    },
          );
        }
      }
    


export const useDeductibleUpdateDeductibleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleUpdateDeductibleHook>>>, TError,{data: DomainModelBenchmarkDeductibleBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleUpdateDeductibleHook>>>, TError,{data: DomainModelBenchmarkDeductibleBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const deductibleUpdateDeductible =  useDeductibleUpdateDeductibleHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeductibleUpdateDeductibleHook>>>, {data: DomainModelBenchmarkDeductibleBody}> = (props) => {
          const {data} = props ?? {};

          return  deductibleUpdateDeductible(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeductibleUpdateDeductibleMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeductibleUpdateDeductibleHook>>>>
    export type DeductibleUpdateDeductibleMutationBody = DomainModelBenchmarkDeductibleBody
    export type DeductibleUpdateDeductibleMutationError = unknown

    export const useDeductibleUpdateDeductible = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleUpdateDeductibleHook>>>, TError,{data: DomainModelBenchmarkDeductibleBody}, TContext>, }
) => {

      const mutationOptions = useDeductibleUpdateDeductibleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useDeductibleGetDeductibleByBrokerIDHook = () => {
        const deductibleGetDeductibleByBrokerID = useCustomInstance<DomainModelBenchmarkDeductible[]>();

        return (
    brokerID: number,
 signal?: AbortSignal
) => {
        return deductibleGetDeductibleByBrokerID(
          {url: `/api/Deductible/GetDeductibleByBrokerID/${brokerID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getDeductibleGetDeductibleByBrokerIDQueryKey = (brokerID: number,) => {
    return [`/api/Deductible/GetDeductibleByBrokerID/${brokerID}`] as const;
    }

    
export const useDeductibleGetDeductibleByBrokerIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useDeductibleGetDeductibleByBrokerIDHook>>>, TError = unknown>(brokerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleGetDeductibleByBrokerIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDeductibleGetDeductibleByBrokerIDQueryKey(brokerID);

  const deductibleGetDeductibleByBrokerID =  useDeductibleGetDeductibleByBrokerIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useDeductibleGetDeductibleByBrokerIDHook>>>> = ({ signal }) => deductibleGetDeductibleByBrokerID(brokerID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(brokerID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleGetDeductibleByBrokerIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type DeductibleGetDeductibleByBrokerIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeductibleGetDeductibleByBrokerIDHook>>>>
export type DeductibleGetDeductibleByBrokerIDQueryError = unknown

export const useDeductibleGetDeductibleByBrokerID = <TData = Awaited<ReturnType<ReturnType<typeof useDeductibleGetDeductibleByBrokerIDHook>>>, TError = unknown>(
 brokerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleGetDeductibleByBrokerIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useDeductibleGetDeductibleByBrokerIDQueryOptions(brokerID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useDeductibleGetDeductibleByCustomerIDHook = () => {
        const deductibleGetDeductibleByCustomerID = useCustomInstance<DomainModelBenchmarkDeductible[]>();

        return (
    customerID: number,
 signal?: AbortSignal
) => {
        return deductibleGetDeductibleByCustomerID(
          {url: `/api/Deductible/GetDeductibleByCustomerID/${customerID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getDeductibleGetDeductibleByCustomerIDQueryKey = (customerID: number,) => {
    return [`/api/Deductible/GetDeductibleByCustomerID/${customerID}`] as const;
    }

    
export const useDeductibleGetDeductibleByCustomerIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useDeductibleGetDeductibleByCustomerIDHook>>>, TError = unknown>(customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleGetDeductibleByCustomerIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDeductibleGetDeductibleByCustomerIDQueryKey(customerID);

  const deductibleGetDeductibleByCustomerID =  useDeductibleGetDeductibleByCustomerIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useDeductibleGetDeductibleByCustomerIDHook>>>> = ({ signal }) => deductibleGetDeductibleByCustomerID(customerID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleGetDeductibleByCustomerIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type DeductibleGetDeductibleByCustomerIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeductibleGetDeductibleByCustomerIDHook>>>>
export type DeductibleGetDeductibleByCustomerIDQueryError = unknown

export const useDeductibleGetDeductibleByCustomerID = <TData = Awaited<ReturnType<ReturnType<typeof useDeductibleGetDeductibleByCustomerIDHook>>>, TError = unknown>(
 customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleGetDeductibleByCustomerIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useDeductibleGetDeductibleByCustomerIDQueryOptions(customerID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useDeductibleGetHook = () => {
        const deductibleGet = useCustomInstance<DomainModelBenchmarkDeductible>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return deductibleGet(
          {url: `/api/Deductible/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getDeductibleGetQueryKey = (id: number,) => {
    return [`/api/Deductible/${id}`] as const;
    }

    
export const useDeductibleGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useDeductibleGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDeductibleGetQueryKey(id);

  const deductibleGet =  useDeductibleGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useDeductibleGetHook>>>> = ({ signal }) => deductibleGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type DeductibleGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeductibleGetHook>>>>
export type DeductibleGetQueryError = unknown

export const useDeductibleGet = <TData = Awaited<ReturnType<ReturnType<typeof useDeductibleGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useDeductibleGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useDeductibleDeleteDeductibleHook = () => {
        const deductibleDeleteDeductible = useCustomInstance<boolean>();

        return (
    id: number,
 ) => {
        return deductibleDeleteDeductible(
          {url: `/api/Deductible/${id}`, method: 'DELETE'
    },
          );
        }
      }
    


export const useDeductibleDeleteDeductibleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleDeleteDeductibleHook>>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleDeleteDeductibleHook>>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const deductibleDeleteDeductible =  useDeductibleDeleteDeductibleHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeductibleDeleteDeductibleHook>>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deductibleDeleteDeductible(id,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeductibleDeleteDeductibleMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeductibleDeleteDeductibleHook>>>>
    
    export type DeductibleDeleteDeductibleMutationError = unknown

    export const useDeductibleDeleteDeductible = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleDeleteDeductibleHook>>>, TError,{id: number}, TContext>, }
) => {

      const mutationOptions = useDeductibleDeleteDeductibleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useDeductibleGetAllDeductibleHook = () => {
        const deductibleGetAllDeductible = useCustomInstance<DomainModelBenchmarkDeductible[]>();

        return (
    
 signal?: AbortSignal
) => {
        return deductibleGetAllDeductible(
          {url: `/api/Deductible`, method: 'GET', signal
    },
          );
        }
      }
    

export const getDeductibleGetAllDeductibleQueryKey = () => {
    return [`/api/Deductible`] as const;
    }

    
export const useDeductibleGetAllDeductibleQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useDeductibleGetAllDeductibleHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleGetAllDeductibleHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDeductibleGetAllDeductibleQueryKey();

  const deductibleGetAllDeductible =  useDeductibleGetAllDeductibleHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useDeductibleGetAllDeductibleHook>>>> = ({ signal }) => deductibleGetAllDeductible(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleGetAllDeductibleHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type DeductibleGetAllDeductibleQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeductibleGetAllDeductibleHook>>>>
export type DeductibleGetAllDeductibleQueryError = unknown

export const useDeductibleGetAllDeductible = <TData = Awaited<ReturnType<ReturnType<typeof useDeductibleGetAllDeductibleHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDeductibleGetAllDeductibleHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useDeductibleGetAllDeductibleQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useDeductiblePostDeductibleHook = () => {
        const deductiblePostDeductible = useCustomInstance<DomainModelBenchmarkDeductible>();

        return (
    domainModelBenchmarkDeductibleBody: DomainModelBenchmarkDeductibleBody,
 ) => {
        return deductiblePostDeductible(
          {url: `/api/Deductible`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkDeductibleBody
    },
          );
        }
      }
    


export const useDeductiblePostDeductibleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeductiblePostDeductibleHook>>>, TError,{data: DomainModelBenchmarkDeductibleBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeductiblePostDeductibleHook>>>, TError,{data: DomainModelBenchmarkDeductibleBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const deductiblePostDeductible =  useDeductiblePostDeductibleHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeductiblePostDeductibleHook>>>, {data: DomainModelBenchmarkDeductibleBody}> = (props) => {
          const {data} = props ?? {};

          return  deductiblePostDeductible(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeductiblePostDeductibleMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeductiblePostDeductibleHook>>>>
    export type DeductiblePostDeductibleMutationBody = DomainModelBenchmarkDeductibleBody
    export type DeductiblePostDeductibleMutationError = unknown

    export const useDeductiblePostDeductible = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeductiblePostDeductibleHook>>>, TError,{data: DomainModelBenchmarkDeductibleBody}, TContext>, }
) => {

      const mutationOptions = useDeductiblePostDeductibleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useDocuSignIntegrationGetSignOnPDFHook = () => {
        const docuSignIntegrationGetSignOnPDF = useCustomInstance<DomainModelBenchmarkCustomer>();

        return (
    benchmarkControllersSing: BenchmarkControllersSing,
 ) => {
        return docuSignIntegrationGetSignOnPDF(
          {url: `/api/DocuSignIntegration/requestSignatureOnPDF`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: benchmarkControllersSing
    },
          );
        }
      }
    


export const useDocuSignIntegrationGetSignOnPDFMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDocuSignIntegrationGetSignOnPDFHook>>>, TError,{data: BenchmarkControllersSing}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDocuSignIntegrationGetSignOnPDFHook>>>, TError,{data: BenchmarkControllersSing}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const docuSignIntegrationGetSignOnPDF =  useDocuSignIntegrationGetSignOnPDFHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDocuSignIntegrationGetSignOnPDFHook>>>, {data: BenchmarkControllersSing}> = (props) => {
          const {data} = props ?? {};

          return  docuSignIntegrationGetSignOnPDF(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DocuSignIntegrationGetSignOnPDFMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDocuSignIntegrationGetSignOnPDFHook>>>>
    export type DocuSignIntegrationGetSignOnPDFMutationBody = BenchmarkControllersSing
    export type DocuSignIntegrationGetSignOnPDFMutationError = unknown

    export const useDocuSignIntegrationGetSignOnPDF = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDocuSignIntegrationGetSignOnPDFHook>>>, TError,{data: BenchmarkControllersSing}, TContext>, }
) => {

      const mutationOptions = useDocuSignIntegrationGetSignOnPDFMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useDocuSignIntegrationRequestSignatureOnDocumentHook = () => {
        const docuSignIntegrationRequestSignatureOnDocument = useCustomInstance<boolean>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return docuSignIntegrationRequestSignatureOnDocument(
          {url: `/api/DocuSignIntegration/requestSignatureOnDocument/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getDocuSignIntegrationRequestSignatureOnDocumentQueryKey = (customerId: number,) => {
    return [`/api/DocuSignIntegration/requestSignatureOnDocument/${customerId}`] as const;
    }

    
export const useDocuSignIntegrationRequestSignatureOnDocumentQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useDocuSignIntegrationRequestSignatureOnDocumentHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDocuSignIntegrationRequestSignatureOnDocumentHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDocuSignIntegrationRequestSignatureOnDocumentQueryKey(customerId);

  const docuSignIntegrationRequestSignatureOnDocument =  useDocuSignIntegrationRequestSignatureOnDocumentHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useDocuSignIntegrationRequestSignatureOnDocumentHook>>>> = ({ signal }) => docuSignIntegrationRequestSignatureOnDocument(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDocuSignIntegrationRequestSignatureOnDocumentHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type DocuSignIntegrationRequestSignatureOnDocumentQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDocuSignIntegrationRequestSignatureOnDocumentHook>>>>
export type DocuSignIntegrationRequestSignatureOnDocumentQueryError = unknown

export const useDocuSignIntegrationRequestSignatureOnDocument = <TData = Awaited<ReturnType<ReturnType<typeof useDocuSignIntegrationRequestSignatureOnDocumentHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDocuSignIntegrationRequestSignatureOnDocumentHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useDocuSignIntegrationRequestSignatureOnDocumentQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useDocuSignIntegrationGetUserSignatureOnDocumentHook = () => {
        const docuSignIntegrationGetUserSignatureOnDocument = useCustomInstance<SystemIOStream>();

        return (
    
 signal?: AbortSignal
) => {
        return docuSignIntegrationGetUserSignatureOnDocument(
          {url: `/api/DocuSignIntegration/getUserSignatureOnDocument`, method: 'GET', signal
    },
          );
        }
      }
    

export const getDocuSignIntegrationGetUserSignatureOnDocumentQueryKey = () => {
    return [`/api/DocuSignIntegration/getUserSignatureOnDocument`] as const;
    }

    
export const useDocuSignIntegrationGetUserSignatureOnDocumentQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useDocuSignIntegrationGetUserSignatureOnDocumentHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDocuSignIntegrationGetUserSignatureOnDocumentHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDocuSignIntegrationGetUserSignatureOnDocumentQueryKey();

  const docuSignIntegrationGetUserSignatureOnDocument =  useDocuSignIntegrationGetUserSignatureOnDocumentHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useDocuSignIntegrationGetUserSignatureOnDocumentHook>>>> = ({ signal }) => docuSignIntegrationGetUserSignatureOnDocument(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDocuSignIntegrationGetUserSignatureOnDocumentHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type DocuSignIntegrationGetUserSignatureOnDocumentQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDocuSignIntegrationGetUserSignatureOnDocumentHook>>>>
export type DocuSignIntegrationGetUserSignatureOnDocumentQueryError = unknown

export const useDocuSignIntegrationGetUserSignatureOnDocument = <TData = Awaited<ReturnType<ReturnType<typeof useDocuSignIntegrationGetUserSignatureOnDocumentHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDocuSignIntegrationGetUserSignatureOnDocumentHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useDocuSignIntegrationGetUserSignatureOnDocumentQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useEmailTemplateGetAllEmailTemplateHook = () => {
        const emailTemplateGetAllEmailTemplate = useCustomInstance<DomainModelBenchmarkEmailTemplate[]>();

        return (
    
 signal?: AbortSignal
) => {
        return emailTemplateGetAllEmailTemplate(
          {url: `/api/EmailTemplate/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getEmailTemplateGetAllEmailTemplateQueryKey = () => {
    return [`/api/EmailTemplate/getAll`] as const;
    }

    
export const useEmailTemplateGetAllEmailTemplateQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useEmailTemplateGetAllEmailTemplateHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useEmailTemplateGetAllEmailTemplateHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEmailTemplateGetAllEmailTemplateQueryKey();

  const emailTemplateGetAllEmailTemplate =  useEmailTemplateGetAllEmailTemplateHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useEmailTemplateGetAllEmailTemplateHook>>>> = ({ signal }) => emailTemplateGetAllEmailTemplate(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useEmailTemplateGetAllEmailTemplateHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type EmailTemplateGetAllEmailTemplateQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useEmailTemplateGetAllEmailTemplateHook>>>>
export type EmailTemplateGetAllEmailTemplateQueryError = unknown

export const useEmailTemplateGetAllEmailTemplate = <TData = Awaited<ReturnType<ReturnType<typeof useEmailTemplateGetAllEmailTemplateHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useEmailTemplateGetAllEmailTemplateHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useEmailTemplateGetAllEmailTemplateQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useEmailTemplateGetHook = () => {
        const emailTemplateGet = useCustomInstance<DomainModelBenchmarkEmailTemplate>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return emailTemplateGet(
          {url: `/api/EmailTemplate/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getEmailTemplateGetQueryKey = (id: number,) => {
    return [`/api/EmailTemplate/get/${id}`] as const;
    }

    
export const useEmailTemplateGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useEmailTemplateGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useEmailTemplateGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEmailTemplateGetQueryKey(id);

  const emailTemplateGet =  useEmailTemplateGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useEmailTemplateGetHook>>>> = ({ signal }) => emailTemplateGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useEmailTemplateGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type EmailTemplateGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useEmailTemplateGetHook>>>>
export type EmailTemplateGetQueryError = unknown

export const useEmailTemplateGet = <TData = Awaited<ReturnType<ReturnType<typeof useEmailTemplateGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useEmailTemplateGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useEmailTemplateGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useEmailTemplatePostHook = () => {
        const emailTemplatePost = useCustomInstance<DomainModelBenchmarkEmailTemplate>();

        return (
    domainModelBenchmarkEmailTemplateBody: DomainModelBenchmarkEmailTemplateBody,
 ) => {
        return emailTemplatePost(
          {url: `/api/EmailTemplate/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkEmailTemplateBody
    },
          );
        }
      }
    


export const useEmailTemplatePostMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useEmailTemplatePostHook>>>, TError,{data: DomainModelBenchmarkEmailTemplateBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useEmailTemplatePostHook>>>, TError,{data: DomainModelBenchmarkEmailTemplateBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const emailTemplatePost =  useEmailTemplatePostHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useEmailTemplatePostHook>>>, {data: DomainModelBenchmarkEmailTemplateBody}> = (props) => {
          const {data} = props ?? {};

          return  emailTemplatePost(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type EmailTemplatePostMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useEmailTemplatePostHook>>>>
    export type EmailTemplatePostMutationBody = DomainModelBenchmarkEmailTemplateBody
    export type EmailTemplatePostMutationError = unknown

    export const useEmailTemplatePost = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useEmailTemplatePostHook>>>, TError,{data: DomainModelBenchmarkEmailTemplateBody}, TContext>, }
) => {

      const mutationOptions = useEmailTemplatePostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useEmailTemplatePutHook = () => {
        const emailTemplatePut = useCustomInstance<DomainModelBenchmarkEmailTemplate>();

        return (
    domainModelBenchmarkEmailTemplateBody: DomainModelBenchmarkEmailTemplateBody,
 ) => {
        return emailTemplatePut(
          {url: `/api/EmailTemplate/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkEmailTemplateBody
    },
          );
        }
      }
    


export const useEmailTemplatePutMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useEmailTemplatePutHook>>>, TError,{data: DomainModelBenchmarkEmailTemplateBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useEmailTemplatePutHook>>>, TError,{data: DomainModelBenchmarkEmailTemplateBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const emailTemplatePut =  useEmailTemplatePutHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useEmailTemplatePutHook>>>, {data: DomainModelBenchmarkEmailTemplateBody}> = (props) => {
          const {data} = props ?? {};

          return  emailTemplatePut(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type EmailTemplatePutMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useEmailTemplatePutHook>>>>
    export type EmailTemplatePutMutationBody = DomainModelBenchmarkEmailTemplateBody
    export type EmailTemplatePutMutationError = unknown

    export const useEmailTemplatePut = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useEmailTemplatePutHook>>>, TError,{data: DomainModelBenchmarkEmailTemplateBody}, TContext>, }
) => {

      const mutationOptions = useEmailTemplatePutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useEmailTemplateDeleteEmailTemplateHook = () => {
        const emailTemplateDeleteEmailTemplate = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return emailTemplateDeleteEmailTemplate(
          {url: `/api/EmailTemplate/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getEmailTemplateDeleteEmailTemplateQueryKey = (id: number,) => {
    return [`/api/EmailTemplate/delete/${id}`] as const;
    }

    
export const useEmailTemplateDeleteEmailTemplateQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useEmailTemplateDeleteEmailTemplateHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useEmailTemplateDeleteEmailTemplateHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEmailTemplateDeleteEmailTemplateQueryKey(id);

  const emailTemplateDeleteEmailTemplate =  useEmailTemplateDeleteEmailTemplateHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useEmailTemplateDeleteEmailTemplateHook>>>> = ({ signal }) => emailTemplateDeleteEmailTemplate(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useEmailTemplateDeleteEmailTemplateHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type EmailTemplateDeleteEmailTemplateQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useEmailTemplateDeleteEmailTemplateHook>>>>
export type EmailTemplateDeleteEmailTemplateQueryError = unknown

export const useEmailTemplateDeleteEmailTemplate = <TData = Awaited<ReturnType<ReturnType<typeof useEmailTemplateDeleteEmailTemplateHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useEmailTemplateDeleteEmailTemplateHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useEmailTemplateDeleteEmailTemplateQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useEmailTemplateGetEmailTemplateByFiltersHook = () => {
        const emailTemplateGetEmailTemplateByFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkEmailTemplate>();

        return (
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return emailTemplateGetEmailTemplateByFilters(
          {url: `/api/EmailTemplate/GetEmailTemplateByFilters/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getEmailTemplateGetEmailTemplateByFiltersQueryKey = (startIndex: number,
    endIndex: number,) => {
    return [`/api/EmailTemplate/GetEmailTemplateByFilters/${startIndex}/${endIndex}`] as const;
    }

    
export const useEmailTemplateGetEmailTemplateByFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useEmailTemplateGetEmailTemplateByFiltersHook>>>, TError = unknown>(startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useEmailTemplateGetEmailTemplateByFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEmailTemplateGetEmailTemplateByFiltersQueryKey(startIndex,endIndex);

  const emailTemplateGetEmailTemplateByFilters =  useEmailTemplateGetEmailTemplateByFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useEmailTemplateGetEmailTemplateByFiltersHook>>>> = ({ signal }) => emailTemplateGetEmailTemplateByFilters(startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useEmailTemplateGetEmailTemplateByFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type EmailTemplateGetEmailTemplateByFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useEmailTemplateGetEmailTemplateByFiltersHook>>>>
export type EmailTemplateGetEmailTemplateByFiltersQueryError = unknown

export const useEmailTemplateGetEmailTemplateByFilters = <TData = Awaited<ReturnType<ReturnType<typeof useEmailTemplateGetEmailTemplateByFiltersHook>>>, TError = unknown>(
 startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useEmailTemplateGetEmailTemplateByFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useEmailTemplateGetEmailTemplateByFiltersQueryOptions(startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useEndorsementGetAllBrokerHook = () => {
        const endorsementGetAllBroker = useCustomInstance<DomainModelBenchmarkEndorsement[]>();

        return (
    
 signal?: AbortSignal
) => {
        return endorsementGetAllBroker(
          {url: `/api/Endorsement/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getEndorsementGetAllBrokerQueryKey = () => {
    return [`/api/Endorsement/getAll`] as const;
    }

    
export const useEndorsementGetAllBrokerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useEndorsementGetAllBrokerHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useEndorsementGetAllBrokerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEndorsementGetAllBrokerQueryKey();

  const endorsementGetAllBroker =  useEndorsementGetAllBrokerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useEndorsementGetAllBrokerHook>>>> = ({ signal }) => endorsementGetAllBroker(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useEndorsementGetAllBrokerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type EndorsementGetAllBrokerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useEndorsementGetAllBrokerHook>>>>
export type EndorsementGetAllBrokerQueryError = unknown

export const useEndorsementGetAllBroker = <TData = Awaited<ReturnType<ReturnType<typeof useEndorsementGetAllBrokerHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useEndorsementGetAllBrokerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useEndorsementGetAllBrokerQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useEndorsementGetHook = () => {
        const endorsementGet = useCustomInstance<DomainModelBenchmarkEndorsement>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return endorsementGet(
          {url: `/api/Endorsement/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getEndorsementGetQueryKey = (id: number,) => {
    return [`/api/Endorsement/get/${id}`] as const;
    }

    
export const useEndorsementGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useEndorsementGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useEndorsementGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEndorsementGetQueryKey(id);

  const endorsementGet =  useEndorsementGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useEndorsementGetHook>>>> = ({ signal }) => endorsementGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useEndorsementGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type EndorsementGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useEndorsementGetHook>>>>
export type EndorsementGetQueryError = unknown

export const useEndorsementGet = <TData = Awaited<ReturnType<ReturnType<typeof useEndorsementGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useEndorsementGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useEndorsementGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useEndorsementPostBrokerHook = () => {
        const endorsementPostBroker = useCustomInstance<DomainModelBenchmarkEndorsement>();

        return (
    domainModelBenchmarkEndorsementBody: DomainModelBenchmarkEndorsementBody,
 ) => {
        return endorsementPostBroker(
          {url: `/api/Endorsement/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkEndorsementBody
    },
          );
        }
      }
    


export const useEndorsementPostBrokerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useEndorsementPostBrokerHook>>>, TError,{data: DomainModelBenchmarkEndorsementBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useEndorsementPostBrokerHook>>>, TError,{data: DomainModelBenchmarkEndorsementBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const endorsementPostBroker =  useEndorsementPostBrokerHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useEndorsementPostBrokerHook>>>, {data: DomainModelBenchmarkEndorsementBody}> = (props) => {
          const {data} = props ?? {};

          return  endorsementPostBroker(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type EndorsementPostBrokerMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useEndorsementPostBrokerHook>>>>
    export type EndorsementPostBrokerMutationBody = DomainModelBenchmarkEndorsementBody
    export type EndorsementPostBrokerMutationError = unknown

    export const useEndorsementPostBroker = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useEndorsementPostBrokerHook>>>, TError,{data: DomainModelBenchmarkEndorsementBody}, TContext>, }
) => {

      const mutationOptions = useEndorsementPostBrokerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useEndorsementPutBrokerHook = () => {
        const endorsementPutBroker = useCustomInstance<DomainModelBenchmarkEndorsement>();

        return (
    domainModelBenchmarkEndorsementBody: DomainModelBenchmarkEndorsementBody,
 ) => {
        return endorsementPutBroker(
          {url: `/api/Endorsement/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkEndorsementBody
    },
          );
        }
      }
    


export const useEndorsementPutBrokerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useEndorsementPutBrokerHook>>>, TError,{data: DomainModelBenchmarkEndorsementBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useEndorsementPutBrokerHook>>>, TError,{data: DomainModelBenchmarkEndorsementBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const endorsementPutBroker =  useEndorsementPutBrokerHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useEndorsementPutBrokerHook>>>, {data: DomainModelBenchmarkEndorsementBody}> = (props) => {
          const {data} = props ?? {};

          return  endorsementPutBroker(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type EndorsementPutBrokerMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useEndorsementPutBrokerHook>>>>
    export type EndorsementPutBrokerMutationBody = DomainModelBenchmarkEndorsementBody
    export type EndorsementPutBrokerMutationError = unknown

    export const useEndorsementPutBroker = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useEndorsementPutBrokerHook>>>, TError,{data: DomainModelBenchmarkEndorsementBody}, TContext>, }
) => {

      const mutationOptions = useEndorsementPutBrokerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useEndorsementDeleteBrokersHook = () => {
        const endorsementDeleteBrokers = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return endorsementDeleteBrokers(
          {url: `/api/Endorsement/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getEndorsementDeleteBrokersQueryKey = (id: number,) => {
    return [`/api/Endorsement/delete/${id}`] as const;
    }

    
export const useEndorsementDeleteBrokersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useEndorsementDeleteBrokersHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useEndorsementDeleteBrokersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEndorsementDeleteBrokersQueryKey(id);

  const endorsementDeleteBrokers =  useEndorsementDeleteBrokersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useEndorsementDeleteBrokersHook>>>> = ({ signal }) => endorsementDeleteBrokers(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useEndorsementDeleteBrokersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type EndorsementDeleteBrokersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useEndorsementDeleteBrokersHook>>>>
export type EndorsementDeleteBrokersQueryError = unknown

export const useEndorsementDeleteBrokers = <TData = Awaited<ReturnType<ReturnType<typeof useEndorsementDeleteBrokersHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useEndorsementDeleteBrokersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useEndorsementDeleteBrokersQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useEndorsementAddByPropertyIDsHook = () => {
        const endorsementAddByPropertyIDs = useCustomInstance<boolean>();

        return (
    domainModelBenchmarkEndorsement: DomainModelBenchmarkEndorsement[],
 ) => {
        return endorsementAddByPropertyIDs(
          {url: `/api/Endorsement/addByPropertyIDs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkEndorsement
    },
          );
        }
      }
    


export const useEndorsementAddByPropertyIDsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useEndorsementAddByPropertyIDsHook>>>, TError,{data: DomainModelBenchmarkEndorsement[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useEndorsementAddByPropertyIDsHook>>>, TError,{data: DomainModelBenchmarkEndorsement[]}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const endorsementAddByPropertyIDs =  useEndorsementAddByPropertyIDsHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useEndorsementAddByPropertyIDsHook>>>, {data: DomainModelBenchmarkEndorsement[]}> = (props) => {
          const {data} = props ?? {};

          return  endorsementAddByPropertyIDs(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type EndorsementAddByPropertyIDsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useEndorsementAddByPropertyIDsHook>>>>
    export type EndorsementAddByPropertyIDsMutationBody = DomainModelBenchmarkEndorsement[]
    export type EndorsementAddByPropertyIDsMutationError = unknown

    export const useEndorsementAddByPropertyIDs = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useEndorsementAddByPropertyIDsHook>>>, TError,{data: DomainModelBenchmarkEndorsement[]}, TContext>, }
) => {

      const mutationOptions = useEndorsementAddByPropertyIDsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useFileGetAllFileHook = () => {
        const fileGetAllFile = useCustomInstance<DomainModelBenchmarkFile[]>();

        return (
    
 signal?: AbortSignal
) => {
        return fileGetAllFile(
          {url: `/api/File/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getFileGetAllFileQueryKey = () => {
    return [`/api/File/getAll`] as const;
    }

    
export const useFileGetAllFileQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFileGetAllFileHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileGetAllFileHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFileGetAllFileQueryKey();

  const fileGetAllFile =  useFileGetAllFileHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFileGetAllFileHook>>>> = ({ signal }) => fileGetAllFile(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileGetAllFileHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type FileGetAllFileQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFileGetAllFileHook>>>>
export type FileGetAllFileQueryError = unknown

export const useFileGetAllFile = <TData = Awaited<ReturnType<ReturnType<typeof useFileGetAllFileHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileGetAllFileHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useFileGetAllFileQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useFileGetFileByCustomerIdTypeIdHook = () => {
        const fileGetFileByCustomerIdTypeId = useCustomInstance<DomainModelBenchmarkFile[]>();

        return (
    customerId: number,
    typeID: number,
 signal?: AbortSignal
) => {
        return fileGetFileByCustomerIdTypeId(
          {url: `/api/customers/${customerId}/File/${typeID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getFileGetFileByCustomerIdTypeIdQueryKey = (customerId: number,
    typeID: number,) => {
    return [`/api/customers/${customerId}/File/${typeID}`] as const;
    }

    
export const useFileGetFileByCustomerIdTypeIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFileGetFileByCustomerIdTypeIdHook>>>, TError = unknown>(customerId: number,
    typeID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileGetFileByCustomerIdTypeIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFileGetFileByCustomerIdTypeIdQueryKey(customerId,typeID);

  const fileGetFileByCustomerIdTypeId =  useFileGetFileByCustomerIdTypeIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFileGetFileByCustomerIdTypeIdHook>>>> = ({ signal }) => fileGetFileByCustomerIdTypeId(customerId,typeID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && typeID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileGetFileByCustomerIdTypeIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type FileGetFileByCustomerIdTypeIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFileGetFileByCustomerIdTypeIdHook>>>>
export type FileGetFileByCustomerIdTypeIdQueryError = unknown

export const useFileGetFileByCustomerIdTypeId = <TData = Awaited<ReturnType<ReturnType<typeof useFileGetFileByCustomerIdTypeIdHook>>>, TError = unknown>(
 customerId: number,
    typeID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileGetFileByCustomerIdTypeIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useFileGetFileByCustomerIdTypeIdQueryOptions(customerId,typeID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useFileGetAllFileByStatusHook = () => {
        const fileGetAllFileByStatus = useCustomInstance<DomainModelBenchmarkFile[]>();

        return (
    statusId: number,
 signal?: AbortSignal
) => {
        return fileGetAllFileByStatus(
          {url: `/api/statuses/${statusId}/File`, method: 'GET', signal
    },
          );
        }
      }
    

export const getFileGetAllFileByStatusQueryKey = (statusId: number,) => {
    return [`/api/statuses/${statusId}/File`] as const;
    }

    
export const useFileGetAllFileByStatusQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFileGetAllFileByStatusHook>>>, TError = unknown>(statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileGetAllFileByStatusHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFileGetAllFileByStatusQueryKey(statusId);

  const fileGetAllFileByStatus =  useFileGetAllFileByStatusHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFileGetAllFileByStatusHook>>>> = ({ signal }) => fileGetAllFileByStatus(statusId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(statusId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileGetAllFileByStatusHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type FileGetAllFileByStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFileGetAllFileByStatusHook>>>>
export type FileGetAllFileByStatusQueryError = unknown

export const useFileGetAllFileByStatus = <TData = Awaited<ReturnType<ReturnType<typeof useFileGetAllFileByStatusHook>>>, TError = unknown>(
 statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileGetAllFileByStatusHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useFileGetAllFileByStatusQueryOptions(statusId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useFileGetFileByCustomerIdHook = () => {
        const fileGetFileByCustomerId = useCustomInstance<DomainModelBenchmarkFile[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return fileGetFileByCustomerId(
          {url: `/api/customers/${customerId}/File`, method: 'GET', signal
    },
          );
        }
      }
    

export const getFileGetFileByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/File`] as const;
    }

    
export const useFileGetFileByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFileGetFileByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileGetFileByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFileGetFileByCustomerIdQueryKey(customerId);

  const fileGetFileByCustomerId =  useFileGetFileByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFileGetFileByCustomerIdHook>>>> = ({ signal }) => fileGetFileByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileGetFileByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type FileGetFileByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFileGetFileByCustomerIdHook>>>>
export type FileGetFileByCustomerIdQueryError = unknown

export const useFileGetFileByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof useFileGetFileByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileGetFileByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useFileGetFileByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useFileArchiveFileByCustomerIdTypeIdHook = () => {
        const fileArchiveFileByCustomerIdTypeId = useCustomInstance<boolean>();

        return (
    customerId: number,
    typeID: number,
 signal?: AbortSignal
) => {
        return fileArchiveFileByCustomerIdTypeId(
          {url: `/api/File/Archive/${customerId}/${typeID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getFileArchiveFileByCustomerIdTypeIdQueryKey = (customerId: number,
    typeID: number,) => {
    return [`/api/File/Archive/${customerId}/${typeID}`] as const;
    }

    
export const useFileArchiveFileByCustomerIdTypeIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFileArchiveFileByCustomerIdTypeIdHook>>>, TError = unknown>(customerId: number,
    typeID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileArchiveFileByCustomerIdTypeIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFileArchiveFileByCustomerIdTypeIdQueryKey(customerId,typeID);

  const fileArchiveFileByCustomerIdTypeId =  useFileArchiveFileByCustomerIdTypeIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFileArchiveFileByCustomerIdTypeIdHook>>>> = ({ signal }) => fileArchiveFileByCustomerIdTypeId(customerId,typeID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && typeID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileArchiveFileByCustomerIdTypeIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type FileArchiveFileByCustomerIdTypeIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFileArchiveFileByCustomerIdTypeIdHook>>>>
export type FileArchiveFileByCustomerIdTypeIdQueryError = unknown

export const useFileArchiveFileByCustomerIdTypeId = <TData = Awaited<ReturnType<ReturnType<typeof useFileArchiveFileByCustomerIdTypeIdHook>>>, TError = unknown>(
 customerId: number,
    typeID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileArchiveFileByCustomerIdTypeIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useFileArchiveFileByCustomerIdTypeIdQueryOptions(customerId,typeID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useFileGetFileByCustomerIdTemplateIdHook = () => {
        const fileGetFileByCustomerIdTemplateId = useCustomInstance<DomainModelBenchmarkFile[]>();

        return (
    customerId: number,
    templateId: number,
    params?: FileGetFileByCustomerIdTemplateIdParams,
 signal?: AbortSignal
) => {
        return fileGetFileByCustomerIdTemplateId(
          {url: `/api/customers/${customerId}/File/${templateId}`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getFileGetFileByCustomerIdTemplateIdQueryKey = (customerId: number,
    templateId: number,
    params?: FileGetFileByCustomerIdTemplateIdParams,) => {
    return [`/api/customers/${customerId}/File/${templateId}`, ...(params ? [params]: [])] as const;
    }

    
export const useFileGetFileByCustomerIdTemplateIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFileGetFileByCustomerIdTemplateIdHook>>>, TError = unknown>(customerId: number,
    templateId: number,
    params?: FileGetFileByCustomerIdTemplateIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileGetFileByCustomerIdTemplateIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFileGetFileByCustomerIdTemplateIdQueryKey(customerId,templateId,params);

  const fileGetFileByCustomerIdTemplateId =  useFileGetFileByCustomerIdTemplateIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFileGetFileByCustomerIdTemplateIdHook>>>> = ({ signal }) => fileGetFileByCustomerIdTemplateId(customerId,templateId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && templateId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileGetFileByCustomerIdTemplateIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type FileGetFileByCustomerIdTemplateIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFileGetFileByCustomerIdTemplateIdHook>>>>
export type FileGetFileByCustomerIdTemplateIdQueryError = unknown

export const useFileGetFileByCustomerIdTemplateId = <TData = Awaited<ReturnType<ReturnType<typeof useFileGetFileByCustomerIdTemplateIdHook>>>, TError = unknown>(
 customerId: number,
    templateId: number,
    params?: FileGetFileByCustomerIdTemplateIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileGetFileByCustomerIdTemplateIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useFileGetFileByCustomerIdTemplateIdQueryOptions(customerId,templateId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useFileGetArchivedFileByCustomerIdHook = () => {
        const fileGetArchivedFileByCustomerId = useCustomInstance<DomainModelBenchmarkFile[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return fileGetArchivedFileByCustomerId(
          {url: `/api/customers/${customerId}/File/Archived`, method: 'GET', signal
    },
          );
        }
      }
    

export const getFileGetArchivedFileByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/File/Archived`] as const;
    }

    
export const useFileGetArchivedFileByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFileGetArchivedFileByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileGetArchivedFileByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFileGetArchivedFileByCustomerIdQueryKey(customerId);

  const fileGetArchivedFileByCustomerId =  useFileGetArchivedFileByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFileGetArchivedFileByCustomerIdHook>>>> = ({ signal }) => fileGetArchivedFileByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileGetArchivedFileByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type FileGetArchivedFileByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFileGetArchivedFileByCustomerIdHook>>>>
export type FileGetArchivedFileByCustomerIdQueryError = unknown

export const useFileGetArchivedFileByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof useFileGetArchivedFileByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileGetArchivedFileByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useFileGetArchivedFileByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useFilePostFileHook = () => {
        const filePostFile = useCustomInstance<DomainModelBenchmarkFile>();

        return (
    domainModelBenchmarkFileBody: DomainModelBenchmarkFileBody,
 ) => {
        return filePostFile(
          {url: `/api/File/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkFileBody
    },
          );
        }
      }
    


export const useFilePostFileMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFilePostFileHook>>>, TError,{data: DomainModelBenchmarkFileBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFilePostFileHook>>>, TError,{data: DomainModelBenchmarkFileBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const filePostFile =  useFilePostFileHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useFilePostFileHook>>>, {data: DomainModelBenchmarkFileBody}> = (props) => {
          const {data} = props ?? {};

          return  filePostFile(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type FilePostFileMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFilePostFileHook>>>>
    export type FilePostFileMutationBody = DomainModelBenchmarkFileBody
    export type FilePostFileMutationError = unknown

    export const useFilePostFile = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFilePostFileHook>>>, TError,{data: DomainModelBenchmarkFileBody}, TContext>, }
) => {

      const mutationOptions = useFilePostFileMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useFileRateFileHook = () => {
        const fileRateFile = useCustomInstance<DomainModelBenchmarkFile>();

        return (
    domainModelBenchmarkFileBody: DomainModelBenchmarkFileBody,
 ) => {
        return fileRateFile(
          {url: `/api/File/rate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkFileBody
    },
          );
        }
      }
    


export const useFileRateFileMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFileRateFileHook>>>, TError,{data: DomainModelBenchmarkFileBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFileRateFileHook>>>, TError,{data: DomainModelBenchmarkFileBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const fileRateFile =  useFileRateFileHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useFileRateFileHook>>>, {data: DomainModelBenchmarkFileBody}> = (props) => {
          const {data} = props ?? {};

          return  fileRateFile(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type FileRateFileMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFileRateFileHook>>>>
    export type FileRateFileMutationBody = DomainModelBenchmarkFileBody
    export type FileRateFileMutationError = unknown

    export const useFileRateFile = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFileRateFileHook>>>, TError,{data: DomainModelBenchmarkFileBody}, TContext>, }
) => {

      const mutationOptions = useFileRateFileMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useFilePutFileHook = () => {
        const filePutFile = useCustomInstance<DomainModelBenchmarkFile>();

        return (
    domainModelBenchmarkFileBody: DomainModelBenchmarkFileBody,
 ) => {
        return filePutFile(
          {url: `/api/File/edit`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkFileBody
    },
          );
        }
      }
    


export const useFilePutFileMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFilePutFileHook>>>, TError,{data: DomainModelBenchmarkFileBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFilePutFileHook>>>, TError,{data: DomainModelBenchmarkFileBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const filePutFile =  useFilePutFileHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useFilePutFileHook>>>, {data: DomainModelBenchmarkFileBody}> = (props) => {
          const {data} = props ?? {};

          return  filePutFile(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type FilePutFileMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFilePutFileHook>>>>
    export type FilePutFileMutationBody = DomainModelBenchmarkFileBody
    export type FilePutFileMutationError = unknown

    export const useFilePutFile = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFilePutFileHook>>>, TError,{data: DomainModelBenchmarkFileBody}, TContext>, }
) => {

      const mutationOptions = useFilePutFileMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useFileDeleteFileHook = () => {
        const fileDeleteFile = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return fileDeleteFile(
          {url: `/api/File/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getFileDeleteFileQueryKey = (id: number,) => {
    return [`/api/File/delete/${id}`] as const;
    }

    
export const useFileDeleteFileQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFileDeleteFileHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileDeleteFileHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFileDeleteFileQueryKey(id);

  const fileDeleteFile =  useFileDeleteFileHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFileDeleteFileHook>>>> = ({ signal }) => fileDeleteFile(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileDeleteFileHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type FileDeleteFileQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFileDeleteFileHook>>>>
export type FileDeleteFileQueryError = unknown

export const useFileDeleteFile = <TData = Awaited<ReturnType<ReturnType<typeof useFileDeleteFileHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileDeleteFileHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useFileDeleteFileQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useFileUpdateFileHook = () => {
        const fileUpdateFile = useCustomInstance<DomainModelBenchmarkFile[]>();

        return (
    domainModelBenchmarkFile: DomainModelBenchmarkFile[],
 ) => {
        return fileUpdateFile(
          {url: `/api/File/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkFile
    },
          );
        }
      }
    


export const useFileUpdateFileMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFileUpdateFileHook>>>, TError,{data: DomainModelBenchmarkFile[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFileUpdateFileHook>>>, TError,{data: DomainModelBenchmarkFile[]}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const fileUpdateFile =  useFileUpdateFileHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useFileUpdateFileHook>>>, {data: DomainModelBenchmarkFile[]}> = (props) => {
          const {data} = props ?? {};

          return  fileUpdateFile(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type FileUpdateFileMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFileUpdateFileHook>>>>
    export type FileUpdateFileMutationBody = DomainModelBenchmarkFile[]
    export type FileUpdateFileMutationError = unknown

    export const useFileUpdateFile = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFileUpdateFileHook>>>, TError,{data: DomainModelBenchmarkFile[]}, TContext>, }
) => {

      const mutationOptions = useFileUpdateFileMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useFileGetHook = () => {
        const fileGet = useCustomInstance<DomainModelBenchmarkFile>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return fileGet(
          {url: `/api/File/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getFileGetQueryKey = (id: number,) => {
    return [`/api/File/${id}`] as const;
    }

    
export const useFileGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFileGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFileGetQueryKey(id);

  const fileGet =  useFileGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFileGetHook>>>> = ({ signal }) => fileGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type FileGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFileGetHook>>>>
export type FileGetQueryError = unknown

export const useFileGet = <TData = Awaited<ReturnType<ReturnType<typeof useFileGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useFileGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useFileBatchArchiveCreateFileBatchHook = () => {
        const fileBatchArchiveCreateFileBatch = useCustomInstance<DomainModelBenchmarkFileBatch>();

        return (
    customerID: string,
    domainModelBenchmarkFileBatchBody: DomainModelBenchmarkFileBatchBody,
 ) => {
        return fileBatchArchiveCreateFileBatch(
          {url: `/api/FileBatch/Archive/Create/${customerID}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkFileBatchBody
    },
          );
        }
      }
    


export const useFileBatchArchiveCreateFileBatchMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchArchiveCreateFileBatchHook>>>, TError,{customerID: string;data: DomainModelBenchmarkFileBatchBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchArchiveCreateFileBatchHook>>>, TError,{customerID: string;data: DomainModelBenchmarkFileBatchBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const fileBatchArchiveCreateFileBatch =  useFileBatchArchiveCreateFileBatchHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useFileBatchArchiveCreateFileBatchHook>>>, {customerID: string;data: DomainModelBenchmarkFileBatchBody}> = (props) => {
          const {customerID,data} = props ?? {};

          return  fileBatchArchiveCreateFileBatch(customerID,data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type FileBatchArchiveCreateFileBatchMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFileBatchArchiveCreateFileBatchHook>>>>
    export type FileBatchArchiveCreateFileBatchMutationBody = DomainModelBenchmarkFileBatchBody
    export type FileBatchArchiveCreateFileBatchMutationError = unknown

    export const useFileBatchArchiveCreateFileBatch = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchArchiveCreateFileBatchHook>>>, TError,{customerID: string;data: DomainModelBenchmarkFileBatchBody}, TContext>, }
) => {

      const mutationOptions = useFileBatchArchiveCreateFileBatchMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useFileBatchGetAllFileBatchHook = () => {
        const fileBatchGetAllFileBatch = useCustomInstance<DomainModelBenchmarkFileBatch[]>();

        return (
    
 signal?: AbortSignal
) => {
        return fileBatchGetAllFileBatch(
          {url: `/api/FileBatch/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getFileBatchGetAllFileBatchQueryKey = () => {
    return [`/api/FileBatch/getAll`] as const;
    }

    
export const useFileBatchGetAllFileBatchQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFileBatchGetAllFileBatchHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchGetAllFileBatchHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFileBatchGetAllFileBatchQueryKey();

  const fileBatchGetAllFileBatch =  useFileBatchGetAllFileBatchHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFileBatchGetAllFileBatchHook>>>> = ({ signal }) => fileBatchGetAllFileBatch(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchGetAllFileBatchHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type FileBatchGetAllFileBatchQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFileBatchGetAllFileBatchHook>>>>
export type FileBatchGetAllFileBatchQueryError = unknown

export const useFileBatchGetAllFileBatch = <TData = Awaited<ReturnType<ReturnType<typeof useFileBatchGetAllFileBatchHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchGetAllFileBatchHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useFileBatchGetAllFileBatchQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useFileBatchGetAllFileBatchByStatusHook = () => {
        const fileBatchGetAllFileBatchByStatus = useCustomInstance<DomainModelBenchmarkFileBatch[]>();

        return (
    statusId: number,
 signal?: AbortSignal
) => {
        return fileBatchGetAllFileBatchByStatus(
          {url: `/api/statuses/${statusId}/FileBatch`, method: 'GET', signal
    },
          );
        }
      }
    

export const getFileBatchGetAllFileBatchByStatusQueryKey = (statusId: number,) => {
    return [`/api/statuses/${statusId}/FileBatch`] as const;
    }

    
export const useFileBatchGetAllFileBatchByStatusQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFileBatchGetAllFileBatchByStatusHook>>>, TError = unknown>(statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchGetAllFileBatchByStatusHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFileBatchGetAllFileBatchByStatusQueryKey(statusId);

  const fileBatchGetAllFileBatchByStatus =  useFileBatchGetAllFileBatchByStatusHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFileBatchGetAllFileBatchByStatusHook>>>> = ({ signal }) => fileBatchGetAllFileBatchByStatus(statusId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(statusId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchGetAllFileBatchByStatusHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type FileBatchGetAllFileBatchByStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFileBatchGetAllFileBatchByStatusHook>>>>
export type FileBatchGetAllFileBatchByStatusQueryError = unknown

export const useFileBatchGetAllFileBatchByStatus = <TData = Awaited<ReturnType<ReturnType<typeof useFileBatchGetAllFileBatchByStatusHook>>>, TError = unknown>(
 statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchGetAllFileBatchByStatusHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useFileBatchGetAllFileBatchByStatusQueryOptions(statusId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useFileBatchGetFileBatchByCustomerIdHook = () => {
        const fileBatchGetFileBatchByCustomerId = useCustomInstance<DomainModelBenchmarkFileBatch[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return fileBatchGetFileBatchByCustomerId(
          {url: `/api/customers/${customerId}/FileBatch`, method: 'GET', signal
    },
          );
        }
      }
    

export const getFileBatchGetFileBatchByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/FileBatch`] as const;
    }

    
export const useFileBatchGetFileBatchByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFileBatchGetFileBatchByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchGetFileBatchByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFileBatchGetFileBatchByCustomerIdQueryKey(customerId);

  const fileBatchGetFileBatchByCustomerId =  useFileBatchGetFileBatchByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFileBatchGetFileBatchByCustomerIdHook>>>> = ({ signal }) => fileBatchGetFileBatchByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchGetFileBatchByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type FileBatchGetFileBatchByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFileBatchGetFileBatchByCustomerIdHook>>>>
export type FileBatchGetFileBatchByCustomerIdQueryError = unknown

export const useFileBatchGetFileBatchByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof useFileBatchGetFileBatchByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchGetFileBatchByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useFileBatchGetFileBatchByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useFileBatchPostFileBatchHook = () => {
        const fileBatchPostFileBatch = useCustomInstance<DomainModelBenchmarkFileBatch>();

        return (
    domainModelBenchmarkFileBatchBody: DomainModelBenchmarkFileBatchBody,
 ) => {
        return fileBatchPostFileBatch(
          {url: `/api/FileBatch/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkFileBatchBody
    },
          );
        }
      }
    


export const useFileBatchPostFileBatchMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchPostFileBatchHook>>>, TError,{data: DomainModelBenchmarkFileBatchBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchPostFileBatchHook>>>, TError,{data: DomainModelBenchmarkFileBatchBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const fileBatchPostFileBatch =  useFileBatchPostFileBatchHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useFileBatchPostFileBatchHook>>>, {data: DomainModelBenchmarkFileBatchBody}> = (props) => {
          const {data} = props ?? {};

          return  fileBatchPostFileBatch(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type FileBatchPostFileBatchMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFileBatchPostFileBatchHook>>>>
    export type FileBatchPostFileBatchMutationBody = DomainModelBenchmarkFileBatchBody
    export type FileBatchPostFileBatchMutationError = unknown

    export const useFileBatchPostFileBatch = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchPostFileBatchHook>>>, TError,{data: DomainModelBenchmarkFileBatchBody}, TContext>, }
) => {

      const mutationOptions = useFileBatchPostFileBatchMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useFileBatchRateFileBatchHook = () => {
        const fileBatchRateFileBatch = useCustomInstance<DomainModelBenchmarkFileBatch>();

        return (
    domainModelBenchmarkFileBatchBody: DomainModelBenchmarkFileBatchBody,
 ) => {
        return fileBatchRateFileBatch(
          {url: `/api/FileBatch/rate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkFileBatchBody
    },
          );
        }
      }
    


export const useFileBatchRateFileBatchMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchRateFileBatchHook>>>, TError,{data: DomainModelBenchmarkFileBatchBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchRateFileBatchHook>>>, TError,{data: DomainModelBenchmarkFileBatchBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const fileBatchRateFileBatch =  useFileBatchRateFileBatchHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useFileBatchRateFileBatchHook>>>, {data: DomainModelBenchmarkFileBatchBody}> = (props) => {
          const {data} = props ?? {};

          return  fileBatchRateFileBatch(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type FileBatchRateFileBatchMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFileBatchRateFileBatchHook>>>>
    export type FileBatchRateFileBatchMutationBody = DomainModelBenchmarkFileBatchBody
    export type FileBatchRateFileBatchMutationError = unknown

    export const useFileBatchRateFileBatch = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchRateFileBatchHook>>>, TError,{data: DomainModelBenchmarkFileBatchBody}, TContext>, }
) => {

      const mutationOptions = useFileBatchRateFileBatchMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useFileBatchPutFileBatchHook = () => {
        const fileBatchPutFileBatch = useCustomInstance<DomainModelBenchmarkFileBatch>();

        return (
    domainModelBenchmarkFileBatchBody: DomainModelBenchmarkFileBatchBody,
 ) => {
        return fileBatchPutFileBatch(
          {url: `/api/FileBatch/edit`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkFileBatchBody
    },
          );
        }
      }
    


export const useFileBatchPutFileBatchMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchPutFileBatchHook>>>, TError,{data: DomainModelBenchmarkFileBatchBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchPutFileBatchHook>>>, TError,{data: DomainModelBenchmarkFileBatchBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const fileBatchPutFileBatch =  useFileBatchPutFileBatchHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useFileBatchPutFileBatchHook>>>, {data: DomainModelBenchmarkFileBatchBody}> = (props) => {
          const {data} = props ?? {};

          return  fileBatchPutFileBatch(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type FileBatchPutFileBatchMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFileBatchPutFileBatchHook>>>>
    export type FileBatchPutFileBatchMutationBody = DomainModelBenchmarkFileBatchBody
    export type FileBatchPutFileBatchMutationError = unknown

    export const useFileBatchPutFileBatch = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchPutFileBatchHook>>>, TError,{data: DomainModelBenchmarkFileBatchBody}, TContext>, }
) => {

      const mutationOptions = useFileBatchPutFileBatchMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useFileBatchDeleteFileBatchHook = () => {
        const fileBatchDeleteFileBatch = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return fileBatchDeleteFileBatch(
          {url: `/api/FileBatch/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getFileBatchDeleteFileBatchQueryKey = (id: number,) => {
    return [`/api/FileBatch/delete/${id}`] as const;
    }

    
export const useFileBatchDeleteFileBatchQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFileBatchDeleteFileBatchHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchDeleteFileBatchHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFileBatchDeleteFileBatchQueryKey(id);

  const fileBatchDeleteFileBatch =  useFileBatchDeleteFileBatchHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFileBatchDeleteFileBatchHook>>>> = ({ signal }) => fileBatchDeleteFileBatch(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchDeleteFileBatchHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type FileBatchDeleteFileBatchQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFileBatchDeleteFileBatchHook>>>>
export type FileBatchDeleteFileBatchQueryError = unknown

export const useFileBatchDeleteFileBatch = <TData = Awaited<ReturnType<ReturnType<typeof useFileBatchDeleteFileBatchHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchDeleteFileBatchHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useFileBatchDeleteFileBatchQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useFileBatchUpdateFileBatchHook = () => {
        const fileBatchUpdateFileBatch = useCustomInstance<DomainModelBenchmarkFileBatch[]>();

        return (
    domainModelBenchmarkFileBatch: DomainModelBenchmarkFileBatch[],
 ) => {
        return fileBatchUpdateFileBatch(
          {url: `/api/FileBatch/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkFileBatch
    },
          );
        }
      }
    


export const useFileBatchUpdateFileBatchMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchUpdateFileBatchHook>>>, TError,{data: DomainModelBenchmarkFileBatch[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchUpdateFileBatchHook>>>, TError,{data: DomainModelBenchmarkFileBatch[]}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const fileBatchUpdateFileBatch =  useFileBatchUpdateFileBatchHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useFileBatchUpdateFileBatchHook>>>, {data: DomainModelBenchmarkFileBatch[]}> = (props) => {
          const {data} = props ?? {};

          return  fileBatchUpdateFileBatch(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type FileBatchUpdateFileBatchMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFileBatchUpdateFileBatchHook>>>>
    export type FileBatchUpdateFileBatchMutationBody = DomainModelBenchmarkFileBatch[]
    export type FileBatchUpdateFileBatchMutationError = unknown

    export const useFileBatchUpdateFileBatch = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchUpdateFileBatchHook>>>, TError,{data: DomainModelBenchmarkFileBatch[]}, TContext>, }
) => {

      const mutationOptions = useFileBatchUpdateFileBatchMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useFileBatchGetHook = () => {
        const fileBatchGet = useCustomInstance<DomainModelBenchmarkFileBatch>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return fileBatchGet(
          {url: `/api/FileBatch/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getFileBatchGetQueryKey = (id: number,) => {
    return [`/api/FileBatch/${id}`] as const;
    }

    
export const useFileBatchGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFileBatchGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFileBatchGetQueryKey(id);

  const fileBatchGet =  useFileBatchGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFileBatchGetHook>>>> = ({ signal }) => fileBatchGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type FileBatchGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFileBatchGetHook>>>>
export type FileBatchGetQueryError = unknown

export const useFileBatchGet = <TData = Awaited<ReturnType<ReturnType<typeof useFileBatchGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFileBatchGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useFileBatchGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInquiryGetAllInquiryHook = () => {
        const inquiryGetAllInquiry = useCustomInstance<DomainModelBenchmarkInquiry[]>();

        return (
    
 signal?: AbortSignal
) => {
        return inquiryGetAllInquiry(
          {url: `/api/Inquiry/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInquiryGetAllInquiryQueryKey = () => {
    return [`/api/Inquiry/getAll`] as const;
    }

    
export const useInquiryGetAllInquiryQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInquiryGetAllInquiryHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInquiryGetAllInquiryHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInquiryGetAllInquiryQueryKey();

  const inquiryGetAllInquiry =  useInquiryGetAllInquiryHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInquiryGetAllInquiryHook>>>> = ({ signal }) => inquiryGetAllInquiry(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInquiryGetAllInquiryHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InquiryGetAllInquiryQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInquiryGetAllInquiryHook>>>>
export type InquiryGetAllInquiryQueryError = unknown

export const useInquiryGetAllInquiry = <TData = Awaited<ReturnType<ReturnType<typeof useInquiryGetAllInquiryHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInquiryGetAllInquiryHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInquiryGetAllInquiryQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInquiryGetHook = () => {
        const inquiryGet = useCustomInstance<DomainModelBenchmarkInquiry>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return inquiryGet(
          {url: `/api/Inquiry/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInquiryGetQueryKey = (id: number,) => {
    return [`/api/Inquiry/get/${id}`] as const;
    }

    
export const useInquiryGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInquiryGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInquiryGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInquiryGetQueryKey(id);

  const inquiryGet =  useInquiryGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInquiryGetHook>>>> = ({ signal }) => inquiryGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInquiryGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InquiryGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInquiryGetHook>>>>
export type InquiryGetQueryError = unknown

export const useInquiryGet = <TData = Awaited<ReturnType<ReturnType<typeof useInquiryGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInquiryGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInquiryGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInquiryPostInquiryHook = () => {
        const inquiryPostInquiry = useCustomInstance<DomainModelBenchmarkInquiry>();

        return (
    domainModelBenchmarkInquiryBody: DomainModelBenchmarkInquiryBody,
 ) => {
        return inquiryPostInquiry(
          {url: `/api/Inquiry/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkInquiryBody
    },
          );
        }
      }
    


export const useInquiryPostInquiryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInquiryPostInquiryHook>>>, TError,{data: DomainModelBenchmarkInquiryBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInquiryPostInquiryHook>>>, TError,{data: DomainModelBenchmarkInquiryBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const inquiryPostInquiry =  useInquiryPostInquiryHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useInquiryPostInquiryHook>>>, {data: DomainModelBenchmarkInquiryBody}> = (props) => {
          const {data} = props ?? {};

          return  inquiryPostInquiry(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type InquiryPostInquiryMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInquiryPostInquiryHook>>>>
    export type InquiryPostInquiryMutationBody = DomainModelBenchmarkInquiryBody
    export type InquiryPostInquiryMutationError = unknown

    export const useInquiryPostInquiry = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInquiryPostInquiryHook>>>, TError,{data: DomainModelBenchmarkInquiryBody}, TContext>, }
) => {

      const mutationOptions = useInquiryPostInquiryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useInquiryPutInquiryHook = () => {
        const inquiryPutInquiry = useCustomInstance<DomainModelBenchmarkInquiry>();

        return (
    domainModelBenchmarkInquiryBody: DomainModelBenchmarkInquiryBody,
 ) => {
        return inquiryPutInquiry(
          {url: `/api/Inquiry/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkInquiryBody
    },
          );
        }
      }
    


export const useInquiryPutInquiryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInquiryPutInquiryHook>>>, TError,{data: DomainModelBenchmarkInquiryBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInquiryPutInquiryHook>>>, TError,{data: DomainModelBenchmarkInquiryBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const inquiryPutInquiry =  useInquiryPutInquiryHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useInquiryPutInquiryHook>>>, {data: DomainModelBenchmarkInquiryBody}> = (props) => {
          const {data} = props ?? {};

          return  inquiryPutInquiry(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type InquiryPutInquiryMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInquiryPutInquiryHook>>>>
    export type InquiryPutInquiryMutationBody = DomainModelBenchmarkInquiryBody
    export type InquiryPutInquiryMutationError = unknown

    export const useInquiryPutInquiry = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInquiryPutInquiryHook>>>, TError,{data: DomainModelBenchmarkInquiryBody}, TContext>, }
) => {

      const mutationOptions = useInquiryPutInquiryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useInquiryDeleteInquiryHook = () => {
        const inquiryDeleteInquiry = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return inquiryDeleteInquiry(
          {url: `/api/Inquiry/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInquiryDeleteInquiryQueryKey = (id: number,) => {
    return [`/api/Inquiry/delete/${id}`] as const;
    }

    
export const useInquiryDeleteInquiryQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInquiryDeleteInquiryHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInquiryDeleteInquiryHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInquiryDeleteInquiryQueryKey(id);

  const inquiryDeleteInquiry =  useInquiryDeleteInquiryHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInquiryDeleteInquiryHook>>>> = ({ signal }) => inquiryDeleteInquiry(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInquiryDeleteInquiryHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InquiryDeleteInquiryQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInquiryDeleteInquiryHook>>>>
export type InquiryDeleteInquiryQueryError = unknown

export const useInquiryDeleteInquiry = <TData = Awaited<ReturnType<ReturnType<typeof useInquiryDeleteInquiryHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInquiryDeleteInquiryHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInquiryDeleteInquiryQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInquiryGetInquiryByFiltersHook = () => {
        const inquiryGetInquiryByFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkInquiry>();

        return (
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return inquiryGetInquiryByFilters(
          {url: `/api/Inquiry/GetInquiryByFilters/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInquiryGetInquiryByFiltersQueryKey = (startIndex: number,
    endIndex: number,) => {
    return [`/api/Inquiry/GetInquiryByFilters/${startIndex}/${endIndex}`] as const;
    }

    
export const useInquiryGetInquiryByFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInquiryGetInquiryByFiltersHook>>>, TError = unknown>(startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInquiryGetInquiryByFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInquiryGetInquiryByFiltersQueryKey(startIndex,endIndex);

  const inquiryGetInquiryByFilters =  useInquiryGetInquiryByFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInquiryGetInquiryByFiltersHook>>>> = ({ signal }) => inquiryGetInquiryByFilters(startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInquiryGetInquiryByFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InquiryGetInquiryByFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInquiryGetInquiryByFiltersHook>>>>
export type InquiryGetInquiryByFiltersQueryError = unknown

export const useInquiryGetInquiryByFilters = <TData = Awaited<ReturnType<ReturnType<typeof useInquiryGetInquiryByFiltersHook>>>, TError = unknown>(
 startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInquiryGetInquiryByFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInquiryGetInquiryByFiltersQueryOptions(startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInquiryGetNewInquiryCountHook = () => {
        const inquiryGetNewInquiryCount = useCustomInstance<string>();

        return (
    
 signal?: AbortSignal
) => {
        return inquiryGetNewInquiryCount(
          {url: `/api/Inquiry/getNewInquiryCount`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInquiryGetNewInquiryCountQueryKey = () => {
    return [`/api/Inquiry/getNewInquiryCount`] as const;
    }

    
export const useInquiryGetNewInquiryCountQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInquiryGetNewInquiryCountHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInquiryGetNewInquiryCountHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInquiryGetNewInquiryCountQueryKey();

  const inquiryGetNewInquiryCount =  useInquiryGetNewInquiryCountHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInquiryGetNewInquiryCountHook>>>> = ({ signal }) => inquiryGetNewInquiryCount(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInquiryGetNewInquiryCountHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InquiryGetNewInquiryCountQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInquiryGetNewInquiryCountHook>>>>
export type InquiryGetNewInquiryCountQueryError = unknown

export const useInquiryGetNewInquiryCount = <TData = Awaited<ReturnType<ReturnType<typeof useInquiryGetNewInquiryCountHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInquiryGetNewInquiryCountHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInquiryGetNewInquiryCountQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInquiryUpdateNewInquiryHook = () => {
        const inquiryUpdateNewInquiry = useCustomInstance<boolean>();

        return (
    
 signal?: AbortSignal
) => {
        return inquiryUpdateNewInquiry(
          {url: `/api/Inquiry/updateNewInquiry`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInquiryUpdateNewInquiryQueryKey = () => {
    return [`/api/Inquiry/updateNewInquiry`] as const;
    }

    
export const useInquiryUpdateNewInquiryQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInquiryUpdateNewInquiryHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInquiryUpdateNewInquiryHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInquiryUpdateNewInquiryQueryKey();

  const inquiryUpdateNewInquiry =  useInquiryUpdateNewInquiryHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInquiryUpdateNewInquiryHook>>>> = ({ signal }) => inquiryUpdateNewInquiry(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInquiryUpdateNewInquiryHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InquiryUpdateNewInquiryQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInquiryUpdateNewInquiryHook>>>>
export type InquiryUpdateNewInquiryQueryError = unknown

export const useInquiryUpdateNewInquiry = <TData = Awaited<ReturnType<ReturnType<typeof useInquiryUpdateNewInquiryHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInquiryUpdateNewInquiryHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInquiryUpdateNewInquiryQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvestorTypeGetAllInvestorTypeHook = () => {
        const investorTypeGetAllInvestorType = useCustomInstance<DomainModelBenchmarkInvestorType[]>();

        return (
    
 signal?: AbortSignal
) => {
        return investorTypeGetAllInvestorType(
          {url: `/api/InvestorType/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvestorTypeGetAllInvestorTypeQueryKey = () => {
    return [`/api/InvestorType/getAll`] as const;
    }

    
export const useInvestorTypeGetAllInvestorTypeQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvestorTypeGetAllInvestorTypeHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvestorTypeGetAllInvestorTypeHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvestorTypeGetAllInvestorTypeQueryKey();

  const investorTypeGetAllInvestorType =  useInvestorTypeGetAllInvestorTypeHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvestorTypeGetAllInvestorTypeHook>>>> = ({ signal }) => investorTypeGetAllInvestorType(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvestorTypeGetAllInvestorTypeHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvestorTypeGetAllInvestorTypeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvestorTypeGetAllInvestorTypeHook>>>>
export type InvestorTypeGetAllInvestorTypeQueryError = unknown

export const useInvestorTypeGetAllInvestorType = <TData = Awaited<ReturnType<ReturnType<typeof useInvestorTypeGetAllInvestorTypeHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvestorTypeGetAllInvestorTypeHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvestorTypeGetAllInvestorTypeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvestorTypePostInvestorTypeHook = () => {
        const investorTypePostInvestorType = useCustomInstance<DomainModelBenchmarkInvestorType>();

        return (
    domainModelBenchmarkInvestorTypeBody: DomainModelBenchmarkInvestorTypeBody,
 ) => {
        return investorTypePostInvestorType(
          {url: `/api/InvestorType/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkInvestorTypeBody
    },
          );
        }
      }
    


export const useInvestorTypePostInvestorTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvestorTypePostInvestorTypeHook>>>, TError,{data: DomainModelBenchmarkInvestorTypeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvestorTypePostInvestorTypeHook>>>, TError,{data: DomainModelBenchmarkInvestorTypeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const investorTypePostInvestorType =  useInvestorTypePostInvestorTypeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useInvestorTypePostInvestorTypeHook>>>, {data: DomainModelBenchmarkInvestorTypeBody}> = (props) => {
          const {data} = props ?? {};

          return  investorTypePostInvestorType(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type InvestorTypePostInvestorTypeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvestorTypePostInvestorTypeHook>>>>
    export type InvestorTypePostInvestorTypeMutationBody = DomainModelBenchmarkInvestorTypeBody
    export type InvestorTypePostInvestorTypeMutationError = unknown

    export const useInvestorTypePostInvestorType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvestorTypePostInvestorTypeHook>>>, TError,{data: DomainModelBenchmarkInvestorTypeBody}, TContext>, }
) => {

      const mutationOptions = useInvestorTypePostInvestorTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useInvestorTypePutInvestorTypeHook = () => {
        const investorTypePutInvestorType = useCustomInstance<DomainModelBenchmarkInvestorType>();

        return (
    domainModelBenchmarkInvestorTypeBody: DomainModelBenchmarkInvestorTypeBody,
 ) => {
        return investorTypePutInvestorType(
          {url: `/api/InvestorType/edit`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkInvestorTypeBody
    },
          );
        }
      }
    


export const useInvestorTypePutInvestorTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvestorTypePutInvestorTypeHook>>>, TError,{data: DomainModelBenchmarkInvestorTypeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvestorTypePutInvestorTypeHook>>>, TError,{data: DomainModelBenchmarkInvestorTypeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const investorTypePutInvestorType =  useInvestorTypePutInvestorTypeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useInvestorTypePutInvestorTypeHook>>>, {data: DomainModelBenchmarkInvestorTypeBody}> = (props) => {
          const {data} = props ?? {};

          return  investorTypePutInvestorType(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type InvestorTypePutInvestorTypeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvestorTypePutInvestorTypeHook>>>>
    export type InvestorTypePutInvestorTypeMutationBody = DomainModelBenchmarkInvestorTypeBody
    export type InvestorTypePutInvestorTypeMutationError = unknown

    export const useInvestorTypePutInvestorType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvestorTypePutInvestorTypeHook>>>, TError,{data: DomainModelBenchmarkInvestorTypeBody}, TContext>, }
) => {

      const mutationOptions = useInvestorTypePutInvestorTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useInvestorTypeGetHook = () => {
        const investorTypeGet = useCustomInstance<DomainModelBenchmarkInvestorType>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return investorTypeGet(
          {url: `/api/InvestorType/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvestorTypeGetQueryKey = (id: number,) => {
    return [`/api/InvestorType/${id}`] as const;
    }

    
export const useInvestorTypeGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvestorTypeGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvestorTypeGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvestorTypeGetQueryKey(id);

  const investorTypeGet =  useInvestorTypeGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvestorTypeGetHook>>>> = ({ signal }) => investorTypeGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvestorTypeGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvestorTypeGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvestorTypeGetHook>>>>
export type InvestorTypeGetQueryError = unknown

export const useInvestorTypeGet = <TData = Awaited<ReturnType<ReturnType<typeof useInvestorTypeGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvestorTypeGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvestorTypeGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvestorTypeDeleteInvestorTypeHook = () => {
        const investorTypeDeleteInvestorType = useCustomInstance<boolean>();

        return (
    id: number,
 ) => {
        return investorTypeDeleteInvestorType(
          {url: `/api/InvestorType/${id}`, method: 'DELETE'
    },
          );
        }
      }
    


export const useInvestorTypeDeleteInvestorTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvestorTypeDeleteInvestorTypeHook>>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvestorTypeDeleteInvestorTypeHook>>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const investorTypeDeleteInvestorType =  useInvestorTypeDeleteInvestorTypeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useInvestorTypeDeleteInvestorTypeHook>>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  investorTypeDeleteInvestorType(id,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type InvestorTypeDeleteInvestorTypeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvestorTypeDeleteInvestorTypeHook>>>>
    
    export type InvestorTypeDeleteInvestorTypeMutationError = unknown

    export const useInvestorTypeDeleteInvestorType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvestorTypeDeleteInvestorTypeHook>>>, TError,{id: number}, TContext>, }
) => {

      const mutationOptions = useInvestorTypeDeleteInvestorTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useInvoiceGetHook = () => {
        const invoiceGet = useCustomInstance<DomainModelBenchmarkInvoice>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return invoiceGet(
          {url: `/api/Invoice/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceGetQueryKey = (id: number,) => {
    return [`/api/Invoice/get/${id}`] as const;
    }

    
export const useInvoiceGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceGetQueryKey(id);

  const invoiceGet =  useInvoiceGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGetHook>>>> = ({ signal }) => invoiceGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGetHook>>>>
export type InvoiceGetQueryError = unknown

export const useInvoiceGet = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceGetAllInvoiceHook = () => {
        const invoiceGetAllInvoice = useCustomInstance<DomainModelBenchmarkInvoice[]>();

        return (
    
 signal?: AbortSignal
) => {
        return invoiceGetAllInvoice(
          {url: `/api/Invoice/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceGetAllInvoiceQueryKey = () => {
    return [`/api/Invoice/getAll`] as const;
    }

    
export const useInvoiceGetAllInvoiceQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllInvoiceHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllInvoiceHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceGetAllInvoiceQueryKey();

  const invoiceGetAllInvoice =  useInvoiceGetAllInvoiceHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllInvoiceHook>>>> = ({ signal }) => invoiceGetAllInvoice(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllInvoiceHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceGetAllInvoiceQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllInvoiceHook>>>>
export type InvoiceGetAllInvoiceQueryError = unknown

export const useInvoiceGetAllInvoice = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllInvoiceHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllInvoiceHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceGetAllInvoiceQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceGetInvoiceByInvoiceTypeHook = () => {
        const invoiceGetInvoiceByInvoiceType = useCustomInstance<DomainModelBenchmarkInvoice[]>();

        return (
    invoiceTypeId: number,
    customerID: number,
 signal?: AbortSignal
) => {
        return invoiceGetInvoiceByInvoiceType(
          {url: `/api/Invoice/get/ByInvoiceType/${invoiceTypeId}/${customerID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceGetInvoiceByInvoiceTypeQueryKey = (invoiceTypeId: number,
    customerID: number,) => {
    return [`/api/Invoice/get/ByInvoiceType/${invoiceTypeId}/${customerID}`] as const;
    }

    
export const useInvoiceGetInvoiceByInvoiceTypeQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByInvoiceTypeHook>>>, TError = unknown>(invoiceTypeId: number,
    customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByInvoiceTypeHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceGetInvoiceByInvoiceTypeQueryKey(invoiceTypeId,customerID);

  const invoiceGetInvoiceByInvoiceType =  useInvoiceGetInvoiceByInvoiceTypeHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByInvoiceTypeHook>>>> = ({ signal }) => invoiceGetInvoiceByInvoiceType(invoiceTypeId,customerID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(invoiceTypeId && customerID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByInvoiceTypeHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceGetInvoiceByInvoiceTypeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByInvoiceTypeHook>>>>
export type InvoiceGetInvoiceByInvoiceTypeQueryError = unknown

export const useInvoiceGetInvoiceByInvoiceType = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByInvoiceTypeHook>>>, TError = unknown>(
 invoiceTypeId: number,
    customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByInvoiceTypeHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceGetInvoiceByInvoiceTypeQueryOptions(invoiceTypeId,customerID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceGenerateNewPolicyFullTermAllInvoiceHook = () => {
        const invoiceGenerateNewPolicyFullTermAllInvoice = useCustomInstance<DomainModelBenchmarkInvoice[]>();

        return (
    customerID: number,
 signal?: AbortSignal
) => {
        return invoiceGenerateNewPolicyFullTermAllInvoice(
          {url: `/api/Policy/New/FullTerm/Invoice/generateAll/${customerID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceGenerateNewPolicyFullTermAllInvoiceQueryKey = (customerID: number,) => {
    return [`/api/Policy/New/FullTerm/Invoice/generateAll/${customerID}`] as const;
    }

    
export const useInvoiceGenerateNewPolicyFullTermAllInvoiceQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGenerateNewPolicyFullTermAllInvoiceHook>>>, TError = unknown>(customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGenerateNewPolicyFullTermAllInvoiceHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceGenerateNewPolicyFullTermAllInvoiceQueryKey(customerID);

  const invoiceGenerateNewPolicyFullTermAllInvoice =  useInvoiceGenerateNewPolicyFullTermAllInvoiceHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGenerateNewPolicyFullTermAllInvoiceHook>>>> = ({ signal }) => invoiceGenerateNewPolicyFullTermAllInvoice(customerID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGenerateNewPolicyFullTermAllInvoiceHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceGenerateNewPolicyFullTermAllInvoiceQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGenerateNewPolicyFullTermAllInvoiceHook>>>>
export type InvoiceGenerateNewPolicyFullTermAllInvoiceQueryError = unknown

export const useInvoiceGenerateNewPolicyFullTermAllInvoice = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGenerateNewPolicyFullTermAllInvoiceHook>>>, TError = unknown>(
 customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGenerateNewPolicyFullTermAllInvoiceHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceGenerateNewPolicyFullTermAllInvoiceQueryOptions(customerID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceGenerateEndorsementPolicyFullTermAllInvoiceHook = () => {
        const invoiceGenerateEndorsementPolicyFullTermAllInvoice = useCustomInstance<DomainModelBenchmarkInvoice[]>();

        return (
    customerID: number,
 signal?: AbortSignal
) => {
        return invoiceGenerateEndorsementPolicyFullTermAllInvoice(
          {url: `/api/Policy/Endorsement/FullTerm/Invoice/generateAll/${customerID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceGenerateEndorsementPolicyFullTermAllInvoiceQueryKey = (customerID: number,) => {
    return [`/api/Policy/Endorsement/FullTerm/Invoice/generateAll/${customerID}`] as const;
    }

    
export const useInvoiceGenerateEndorsementPolicyFullTermAllInvoiceQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGenerateEndorsementPolicyFullTermAllInvoiceHook>>>, TError = unknown>(customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGenerateEndorsementPolicyFullTermAllInvoiceHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceGenerateEndorsementPolicyFullTermAllInvoiceQueryKey(customerID);

  const invoiceGenerateEndorsementPolicyFullTermAllInvoice =  useInvoiceGenerateEndorsementPolicyFullTermAllInvoiceHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGenerateEndorsementPolicyFullTermAllInvoiceHook>>>> = ({ signal }) => invoiceGenerateEndorsementPolicyFullTermAllInvoice(customerID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGenerateEndorsementPolicyFullTermAllInvoiceHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceGenerateEndorsementPolicyFullTermAllInvoiceQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGenerateEndorsementPolicyFullTermAllInvoiceHook>>>>
export type InvoiceGenerateEndorsementPolicyFullTermAllInvoiceQueryError = unknown

export const useInvoiceGenerateEndorsementPolicyFullTermAllInvoice = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGenerateEndorsementPolicyFullTermAllInvoiceHook>>>, TError = unknown>(
 customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGenerateEndorsementPolicyFullTermAllInvoiceHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceGenerateEndorsementPolicyFullTermAllInvoiceQueryOptions(customerID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceGeneratePastDueConsolidatedInvoiceHook = () => {
        const invoiceGeneratePastDueConsolidatedInvoice = useCustomInstance<DomainModelBenchmarkInvoice>();

        return (
    customerID: number,
    invoiceAmount: number,
 ) => {
        return invoiceGeneratePastDueConsolidatedInvoice(
          {url: `/api/Invoice/ConsolidatedInvoice/${customerID}/PastDue/${invoiceAmount}`, method: 'POST'
    },
          );
        }
      }
    


export const useInvoiceGeneratePastDueConsolidatedInvoiceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGeneratePastDueConsolidatedInvoiceHook>>>, TError,{customerID: number;invoiceAmount: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGeneratePastDueConsolidatedInvoiceHook>>>, TError,{customerID: number;invoiceAmount: number}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const invoiceGeneratePastDueConsolidatedInvoice =  useInvoiceGeneratePastDueConsolidatedInvoiceHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGeneratePastDueConsolidatedInvoiceHook>>>, {customerID: number;invoiceAmount: number}> = (props) => {
          const {customerID,invoiceAmount} = props ?? {};

          return  invoiceGeneratePastDueConsolidatedInvoice(customerID,invoiceAmount,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type InvoiceGeneratePastDueConsolidatedInvoiceMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGeneratePastDueConsolidatedInvoiceHook>>>>
    
    export type InvoiceGeneratePastDueConsolidatedInvoiceMutationError = unknown

    export const useInvoiceGeneratePastDueConsolidatedInvoice = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGeneratePastDueConsolidatedInvoiceHook>>>, TError,{customerID: number;invoiceAmount: number}, TContext>, }
) => {

      const mutationOptions = useInvoiceGeneratePastDueConsolidatedInvoiceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useInvoiceGeneratePolicyEndorsementUpdateAllInvoiceHook = () => {
        const invoiceGeneratePolicyEndorsementUpdateAllInvoice = useCustomInstance<DomainModelBenchmarkInvoice[]>();

        return (
    customerID: number,
 signal?: AbortSignal
) => {
        return invoiceGeneratePolicyEndorsementUpdateAllInvoice(
          {url: `/api/Policy/Endorsement/Invoice/updateAll/${customerID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceGeneratePolicyEndorsementUpdateAllInvoiceQueryKey = (customerID: number,) => {
    return [`/api/Policy/Endorsement/Invoice/updateAll/${customerID}`] as const;
    }

    
export const useInvoiceGeneratePolicyEndorsementUpdateAllInvoiceQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGeneratePolicyEndorsementUpdateAllInvoiceHook>>>, TError = unknown>(customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGeneratePolicyEndorsementUpdateAllInvoiceHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceGeneratePolicyEndorsementUpdateAllInvoiceQueryKey(customerID);

  const invoiceGeneratePolicyEndorsementUpdateAllInvoice =  useInvoiceGeneratePolicyEndorsementUpdateAllInvoiceHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGeneratePolicyEndorsementUpdateAllInvoiceHook>>>> = ({ signal }) => invoiceGeneratePolicyEndorsementUpdateAllInvoice(customerID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGeneratePolicyEndorsementUpdateAllInvoiceHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceGeneratePolicyEndorsementUpdateAllInvoiceQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGeneratePolicyEndorsementUpdateAllInvoiceHook>>>>
export type InvoiceGeneratePolicyEndorsementUpdateAllInvoiceQueryError = unknown

export const useInvoiceGeneratePolicyEndorsementUpdateAllInvoice = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGeneratePolicyEndorsementUpdateAllInvoiceHook>>>, TError = unknown>(
 customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGeneratePolicyEndorsementUpdateAllInvoiceHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceGeneratePolicyEndorsementUpdateAllInvoiceQueryOptions(customerID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceGetAllInvoiceByStatusHook = () => {
        const invoiceGetAllInvoiceByStatus = useCustomInstance<DomainModelBenchmarkInvoice[]>();

        return (
    statusId: number,
 signal?: AbortSignal
) => {
        return invoiceGetAllInvoiceByStatus(
          {url: `/api/statuses/${statusId}/Invoice`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceGetAllInvoiceByStatusQueryKey = (statusId: number,) => {
    return [`/api/statuses/${statusId}/Invoice`] as const;
    }

    
export const useInvoiceGetAllInvoiceByStatusQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllInvoiceByStatusHook>>>, TError = unknown>(statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllInvoiceByStatusHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceGetAllInvoiceByStatusQueryKey(statusId);

  const invoiceGetAllInvoiceByStatus =  useInvoiceGetAllInvoiceByStatusHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllInvoiceByStatusHook>>>> = ({ signal }) => invoiceGetAllInvoiceByStatus(statusId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(statusId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllInvoiceByStatusHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceGetAllInvoiceByStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllInvoiceByStatusHook>>>>
export type InvoiceGetAllInvoiceByStatusQueryError = unknown

export const useInvoiceGetAllInvoiceByStatus = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllInvoiceByStatusHook>>>, TError = unknown>(
 statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllInvoiceByStatusHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceGetAllInvoiceByStatusQueryOptions(statusId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceGetMonthlyInvoiceByCustomerIdHook = () => {
        const invoiceGetMonthlyInvoiceByCustomerId = useCustomInstance<DomainModelBenchmarkInvoice[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return invoiceGetMonthlyInvoiceByCustomerId(
          {url: `/api/customers/${customerId}/MonthlyInvoice`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceGetMonthlyInvoiceByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/MonthlyInvoice`] as const;
    }

    
export const useInvoiceGetMonthlyInvoiceByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetMonthlyInvoiceByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetMonthlyInvoiceByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceGetMonthlyInvoiceByCustomerIdQueryKey(customerId);

  const invoiceGetMonthlyInvoiceByCustomerId =  useInvoiceGetMonthlyInvoiceByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGetMonthlyInvoiceByCustomerIdHook>>>> = ({ signal }) => invoiceGetMonthlyInvoiceByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetMonthlyInvoiceByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceGetMonthlyInvoiceByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGetMonthlyInvoiceByCustomerIdHook>>>>
export type InvoiceGetMonthlyInvoiceByCustomerIdQueryError = unknown

export const useInvoiceGetMonthlyInvoiceByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetMonthlyInvoiceByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetMonthlyInvoiceByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceGetMonthlyInvoiceByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceGetMortgageInvoiceByCustomerIdHook = () => {
        const invoiceGetMortgageInvoiceByCustomerId = useCustomInstance<DomainModelBenchmarkInvoice[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return invoiceGetMortgageInvoiceByCustomerId(
          {url: `/api/customers/${customerId}/MortgageInvoice`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceGetMortgageInvoiceByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/MortgageInvoice`] as const;
    }

    
export const useInvoiceGetMortgageInvoiceByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetMortgageInvoiceByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetMortgageInvoiceByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceGetMortgageInvoiceByCustomerIdQueryKey(customerId);

  const invoiceGetMortgageInvoiceByCustomerId =  useInvoiceGetMortgageInvoiceByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGetMortgageInvoiceByCustomerIdHook>>>> = ({ signal }) => invoiceGetMortgageInvoiceByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetMortgageInvoiceByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceGetMortgageInvoiceByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGetMortgageInvoiceByCustomerIdHook>>>>
export type InvoiceGetMortgageInvoiceByCustomerIdQueryError = unknown

export const useInvoiceGetMortgageInvoiceByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetMortgageInvoiceByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetMortgageInvoiceByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceGetMortgageInvoiceByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceGetFloodInvoiceByCustomerIdHook = () => {
        const invoiceGetFloodInvoiceByCustomerId = useCustomInstance<DomainModelBenchmarkInvoice[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return invoiceGetFloodInvoiceByCustomerId(
          {url: `/api/customers/${customerId}/FloodInvoice`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceGetFloodInvoiceByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/FloodInvoice`] as const;
    }

    
export const useInvoiceGetFloodInvoiceByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetFloodInvoiceByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetFloodInvoiceByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceGetFloodInvoiceByCustomerIdQueryKey(customerId);

  const invoiceGetFloodInvoiceByCustomerId =  useInvoiceGetFloodInvoiceByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGetFloodInvoiceByCustomerIdHook>>>> = ({ signal }) => invoiceGetFloodInvoiceByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetFloodInvoiceByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceGetFloodInvoiceByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGetFloodInvoiceByCustomerIdHook>>>>
export type InvoiceGetFloodInvoiceByCustomerIdQueryError = unknown

export const useInvoiceGetFloodInvoiceByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetFloodInvoiceByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetFloodInvoiceByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceGetFloodInvoiceByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceGetInvoiceByChargebeeCustomerIDHook = () => {
        const invoiceGetInvoiceByChargebeeCustomerID = useCustomInstance<DomainModelBenchmarkInvoice>();

        return (
    chargebeeCustomerID: string,
 signal?: AbortSignal
) => {
        return invoiceGetInvoiceByChargebeeCustomerID(
          {url: `/api/Invoice/Chargebee/${chargebeeCustomerID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceGetInvoiceByChargebeeCustomerIDQueryKey = (chargebeeCustomerID: string,) => {
    return [`/api/Invoice/Chargebee/${chargebeeCustomerID}`] as const;
    }

    
export const useInvoiceGetInvoiceByChargebeeCustomerIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByChargebeeCustomerIDHook>>>, TError = unknown>(chargebeeCustomerID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByChargebeeCustomerIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceGetInvoiceByChargebeeCustomerIDQueryKey(chargebeeCustomerID);

  const invoiceGetInvoiceByChargebeeCustomerID =  useInvoiceGetInvoiceByChargebeeCustomerIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByChargebeeCustomerIDHook>>>> = ({ signal }) => invoiceGetInvoiceByChargebeeCustomerID(chargebeeCustomerID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(chargebeeCustomerID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByChargebeeCustomerIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceGetInvoiceByChargebeeCustomerIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByChargebeeCustomerIDHook>>>>
export type InvoiceGetInvoiceByChargebeeCustomerIDQueryError = unknown

export const useInvoiceGetInvoiceByChargebeeCustomerID = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByChargebeeCustomerIDHook>>>, TError = unknown>(
 chargebeeCustomerID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByChargebeeCustomerIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceGetInvoiceByChargebeeCustomerIDQueryOptions(chargebeeCustomerID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceGetInvoiceByInvoiceDateHook = () => {
        const invoiceGetInvoiceByInvoiceDate = useCustomInstance<DomainModelBenchmarkInvoice[]>();

        return (
    invoiceDate: string,
 signal?: AbortSignal
) => {
        return invoiceGetInvoiceByInvoiceDate(
          {url: `/api/Invoice/InvoiceDate/${invoiceDate}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceGetInvoiceByInvoiceDateQueryKey = (invoiceDate: string,) => {
    return [`/api/Invoice/InvoiceDate/${invoiceDate}`] as const;
    }

    
export const useInvoiceGetInvoiceByInvoiceDateQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByInvoiceDateHook>>>, TError = unknown>(invoiceDate: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByInvoiceDateHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceGetInvoiceByInvoiceDateQueryKey(invoiceDate);

  const invoiceGetInvoiceByInvoiceDate =  useInvoiceGetInvoiceByInvoiceDateHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByInvoiceDateHook>>>> = ({ signal }) => invoiceGetInvoiceByInvoiceDate(invoiceDate, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(invoiceDate), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByInvoiceDateHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceGetInvoiceByInvoiceDateQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByInvoiceDateHook>>>>
export type InvoiceGetInvoiceByInvoiceDateQueryError = unknown

export const useInvoiceGetInvoiceByInvoiceDate = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByInvoiceDateHook>>>, TError = unknown>(
 invoiceDate: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByInvoiceDateHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceGetInvoiceByInvoiceDateQueryOptions(invoiceDate,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceGetInvoiceByInvoiceNoHook = () => {
        const invoiceGetInvoiceByInvoiceNo = useCustomInstance<DomainModelBenchmarkInvoice>();

        return (
    invoiceNo: string,
 signal?: AbortSignal
) => {
        return invoiceGetInvoiceByInvoiceNo(
          {url: `/api/Invoice/GetInvoiceByInvoiceNo/${invoiceNo}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceGetInvoiceByInvoiceNoQueryKey = (invoiceNo: string,) => {
    return [`/api/Invoice/GetInvoiceByInvoiceNo/${invoiceNo}`] as const;
    }

    
export const useInvoiceGetInvoiceByInvoiceNoQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByInvoiceNoHook>>>, TError = unknown>(invoiceNo: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByInvoiceNoHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceGetInvoiceByInvoiceNoQueryKey(invoiceNo);

  const invoiceGetInvoiceByInvoiceNo =  useInvoiceGetInvoiceByInvoiceNoHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByInvoiceNoHook>>>> = ({ signal }) => invoiceGetInvoiceByInvoiceNo(invoiceNo, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(invoiceNo), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByInvoiceNoHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceGetInvoiceByInvoiceNoQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByInvoiceNoHook>>>>
export type InvoiceGetInvoiceByInvoiceNoQueryError = unknown

export const useInvoiceGetInvoiceByInvoiceNo = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByInvoiceNoHook>>>, TError = unknown>(
 invoiceNo: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByInvoiceNoHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceGetInvoiceByInvoiceNoQueryOptions(invoiceNo,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceGetInvoiceByPropertyIdHook = () => {
        const invoiceGetInvoiceByPropertyId = useCustomInstance<DomainModelBenchmarkInvoice>();

        return (
    propertyId: number,
 signal?: AbortSignal
) => {
        return invoiceGetInvoiceByPropertyId(
          {url: `/api/Invoice/GetInvoiceByPropertyId/${propertyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceGetInvoiceByPropertyIdQueryKey = (propertyId: number,) => {
    return [`/api/Invoice/GetInvoiceByPropertyId/${propertyId}`] as const;
    }

    
export const useInvoiceGetInvoiceByPropertyIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByPropertyIdHook>>>, TError = unknown>(propertyId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByPropertyIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceGetInvoiceByPropertyIdQueryKey(propertyId);

  const invoiceGetInvoiceByPropertyId =  useInvoiceGetInvoiceByPropertyIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByPropertyIdHook>>>> = ({ signal }) => invoiceGetInvoiceByPropertyId(propertyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(propertyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByPropertyIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceGetInvoiceByPropertyIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByPropertyIdHook>>>>
export type InvoiceGetInvoiceByPropertyIdQueryError = unknown

export const useInvoiceGetInvoiceByPropertyId = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByPropertyIdHook>>>, TError = unknown>(
 propertyId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByPropertyIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceGetInvoiceByPropertyIdQueryOptions(propertyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceGetAllInvoiceByNameHook = () => {
        const invoiceGetAllInvoiceByName = useCustomInstance<DomainModelBenchmarkInvoice[]>();

        return (
    params: InvoiceGetAllInvoiceByNameParams,
 signal?: AbortSignal
) => {
        return invoiceGetAllInvoiceByName(
          {url: `/api/Invoice`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getInvoiceGetAllInvoiceByNameQueryKey = (params: InvoiceGetAllInvoiceByNameParams,) => {
    return [`/api/Invoice`, ...(params ? [params]: [])] as const;
    }

    
export const useInvoiceGetAllInvoiceByNameQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllInvoiceByNameHook>>>, TError = unknown>(params: InvoiceGetAllInvoiceByNameParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllInvoiceByNameHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceGetAllInvoiceByNameQueryKey(params);

  const invoiceGetAllInvoiceByName =  useInvoiceGetAllInvoiceByNameHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllInvoiceByNameHook>>>> = ({ signal }) => invoiceGetAllInvoiceByName(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllInvoiceByNameHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceGetAllInvoiceByNameQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllInvoiceByNameHook>>>>
export type InvoiceGetAllInvoiceByNameQueryError = unknown

export const useInvoiceGetAllInvoiceByName = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllInvoiceByNameHook>>>, TError = unknown>(
 params: InvoiceGetAllInvoiceByNameParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllInvoiceByNameHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceGetAllInvoiceByNameQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoicePostInvoiceHook = () => {
        const invoicePostInvoice = useCustomInstance<DomainModelBenchmarkInvoice>();

        return (
    domainModelBenchmarkInvoiceBody: DomainModelBenchmarkInvoiceBody,
 ) => {
        return invoicePostInvoice(
          {url: `/api/Invoice`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkInvoiceBody
    },
          );
        }
      }
    


export const useInvoicePostInvoiceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePostInvoiceHook>>>, TError,{data: DomainModelBenchmarkInvoiceBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePostInvoiceHook>>>, TError,{data: DomainModelBenchmarkInvoiceBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const invoicePostInvoice =  useInvoicePostInvoiceHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useInvoicePostInvoiceHook>>>, {data: DomainModelBenchmarkInvoiceBody}> = (props) => {
          const {data} = props ?? {};

          return  invoicePostInvoice(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type InvoicePostInvoiceMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoicePostInvoiceHook>>>>
    export type InvoicePostInvoiceMutationBody = DomainModelBenchmarkInvoiceBody
    export type InvoicePostInvoiceMutationError = unknown

    export const useInvoicePostInvoice = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePostInvoiceHook>>>, TError,{data: DomainModelBenchmarkInvoiceBody}, TContext>, }
) => {

      const mutationOptions = useInvoicePostInvoiceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useInvoicePutInvoiceHook = () => {
        const invoicePutInvoice = useCustomInstance<boolean>();

        return (
    domainModelBenchmarkInvoiceBody: DomainModelBenchmarkInvoiceBody,
 ) => {
        return invoicePutInvoice(
          {url: `/api/Invoice/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkInvoiceBody
    },
          );
        }
      }
    


export const useInvoicePutInvoiceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePutInvoiceHook>>>, TError,{data: DomainModelBenchmarkInvoiceBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePutInvoiceHook>>>, TError,{data: DomainModelBenchmarkInvoiceBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const invoicePutInvoice =  useInvoicePutInvoiceHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useInvoicePutInvoiceHook>>>, {data: DomainModelBenchmarkInvoiceBody}> = (props) => {
          const {data} = props ?? {};

          return  invoicePutInvoice(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type InvoicePutInvoiceMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoicePutInvoiceHook>>>>
    export type InvoicePutInvoiceMutationBody = DomainModelBenchmarkInvoiceBody
    export type InvoicePutInvoiceMutationError = unknown

    export const useInvoicePutInvoice = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePutInvoiceHook>>>, TError,{data: DomainModelBenchmarkInvoiceBody}, TContext>, }
) => {

      const mutationOptions = useInvoicePutInvoiceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useInvoiceDeleteInvoiceHook = () => {
        const invoiceDeleteInvoice = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return invoiceDeleteInvoice(
          {url: `/api/Invoice/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceDeleteInvoiceQueryKey = (id: number,) => {
    return [`/api/Invoice/delete/${id}`] as const;
    }

    
export const useInvoiceDeleteInvoiceQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceDeleteInvoiceHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceDeleteInvoiceHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceDeleteInvoiceQueryKey(id);

  const invoiceDeleteInvoice =  useInvoiceDeleteInvoiceHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceDeleteInvoiceHook>>>> = ({ signal }) => invoiceDeleteInvoice(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceDeleteInvoiceHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceDeleteInvoiceQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceDeleteInvoiceHook>>>>
export type InvoiceDeleteInvoiceQueryError = unknown

export const useInvoiceDeleteInvoice = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceDeleteInvoiceHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceDeleteInvoiceHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceDeleteInvoiceQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceGetAllPaymentInvoiceHook = () => {
        const invoiceGetAllPaymentInvoice = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkInvoice>();

        return (
    agentId: number,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return invoiceGetAllPaymentInvoice(
          {url: `/api/Invoice/GetAllPaymentInvoice/${agentId}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceGetAllPaymentInvoiceQueryKey = (agentId: number,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/Invoice/GetAllPaymentInvoice/${agentId}/${startIndex}/${endIndex}`] as const;
    }

    
export const useInvoiceGetAllPaymentInvoiceQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllPaymentInvoiceHook>>>, TError = unknown>(agentId: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllPaymentInvoiceHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceGetAllPaymentInvoiceQueryKey(agentId,startIndex,endIndex);

  const invoiceGetAllPaymentInvoice =  useInvoiceGetAllPaymentInvoiceHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllPaymentInvoiceHook>>>> = ({ signal }) => invoiceGetAllPaymentInvoice(agentId,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(agentId && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllPaymentInvoiceHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceGetAllPaymentInvoiceQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllPaymentInvoiceHook>>>>
export type InvoiceGetAllPaymentInvoiceQueryError = unknown

export const useInvoiceGetAllPaymentInvoice = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllPaymentInvoiceHook>>>, TError = unknown>(
 agentId: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllPaymentInvoiceHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceGetAllPaymentInvoiceQueryOptions(agentId,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceGetAllBatchInvoiceDetailsHook = () => {
        const invoiceGetAllBatchInvoiceDetails = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkInvoice>();

        return (
    agentId: number,
    strInvoiceDate: string,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return invoiceGetAllBatchInvoiceDetails(
          {url: `/api/Invoice/GetAllBatchInvoiceDetails/${agentId}/${strInvoiceDate}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceGetAllBatchInvoiceDetailsQueryKey = (agentId: number,
    strInvoiceDate: string,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/Invoice/GetAllBatchInvoiceDetails/${agentId}/${strInvoiceDate}/${startIndex}/${endIndex}`] as const;
    }

    
export const useInvoiceGetAllBatchInvoiceDetailsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllBatchInvoiceDetailsHook>>>, TError = unknown>(agentId: number,
    strInvoiceDate: string,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllBatchInvoiceDetailsHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceGetAllBatchInvoiceDetailsQueryKey(agentId,strInvoiceDate,startIndex,endIndex);

  const invoiceGetAllBatchInvoiceDetails =  useInvoiceGetAllBatchInvoiceDetailsHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllBatchInvoiceDetailsHook>>>> = ({ signal }) => invoiceGetAllBatchInvoiceDetails(agentId,strInvoiceDate,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(agentId && strInvoiceDate && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllBatchInvoiceDetailsHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceGetAllBatchInvoiceDetailsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllBatchInvoiceDetailsHook>>>>
export type InvoiceGetAllBatchInvoiceDetailsQueryError = unknown

export const useInvoiceGetAllBatchInvoiceDetails = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllBatchInvoiceDetailsHook>>>, TError = unknown>(
 agentId: number,
    strInvoiceDate: string,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetAllBatchInvoiceDetailsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceGetAllBatchInvoiceDetailsQueryOptions(agentId,strInvoiceDate,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceInvoiceProcessHook = () => {
        const invoiceInvoiceProcess = useCustomInstance<string>();

        return (
    agentId: number,
    strInvoiceDate: string,
 signal?: AbortSignal
) => {
        return invoiceInvoiceProcess(
          {url: `/api/Invoice/InvoiceProcess/${agentId}/${strInvoiceDate}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceInvoiceProcessQueryKey = (agentId: number,
    strInvoiceDate: string,) => {
    return [`/api/Invoice/InvoiceProcess/${agentId}/${strInvoiceDate}`] as const;
    }

    
export const useInvoiceInvoiceProcessQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceInvoiceProcessHook>>>, TError = unknown>(agentId: number,
    strInvoiceDate: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceInvoiceProcessHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceInvoiceProcessQueryKey(agentId,strInvoiceDate);

  const invoiceInvoiceProcess =  useInvoiceInvoiceProcessHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceInvoiceProcessHook>>>> = ({ signal }) => invoiceInvoiceProcess(agentId,strInvoiceDate, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(agentId && strInvoiceDate), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceInvoiceProcessHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceInvoiceProcessQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceInvoiceProcessHook>>>>
export type InvoiceInvoiceProcessQueryError = unknown

export const useInvoiceInvoiceProcess = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceInvoiceProcessHook>>>, TError = unknown>(
 agentId: number,
    strInvoiceDate: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceInvoiceProcessHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceInvoiceProcessQueryOptions(agentId,strInvoiceDate,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceUpdateInvoiceIsArchivedHook = () => {
        const invoiceUpdateInvoiceIsArchived = useCustomInstance<boolean>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return invoiceUpdateInvoiceIsArchived(
          {url: `/api/Invoice/UpdateInvoiceIsArchived/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceUpdateInvoiceIsArchivedQueryKey = (customerId: number,) => {
    return [`/api/Invoice/UpdateInvoiceIsArchived/${customerId}`] as const;
    }

    
export const useInvoiceUpdateInvoiceIsArchivedQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceUpdateInvoiceIsArchivedHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceUpdateInvoiceIsArchivedHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceUpdateInvoiceIsArchivedQueryKey(customerId);

  const invoiceUpdateInvoiceIsArchived =  useInvoiceUpdateInvoiceIsArchivedHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceUpdateInvoiceIsArchivedHook>>>> = ({ signal }) => invoiceUpdateInvoiceIsArchived(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceUpdateInvoiceIsArchivedHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceUpdateInvoiceIsArchivedQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceUpdateInvoiceIsArchivedHook>>>>
export type InvoiceUpdateInvoiceIsArchivedQueryError = unknown

export const useInvoiceUpdateInvoiceIsArchived = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceUpdateInvoiceIsArchivedHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceUpdateInvoiceIsArchivedHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceUpdateInvoiceIsArchivedQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceUpdateInvoiceFileURlHook = () => {
        const invoiceUpdateInvoiceFileURl = useCustomInstance<boolean>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return invoiceUpdateInvoiceFileURl(
          {url: `/api/Invoice/UpdateInvoiceFileURl/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceUpdateInvoiceFileURlQueryKey = (customerId: number,) => {
    return [`/api/Invoice/UpdateInvoiceFileURl/${customerId}`] as const;
    }

    
export const useInvoiceUpdateInvoiceFileURlQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceUpdateInvoiceFileURlHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceUpdateInvoiceFileURlHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceUpdateInvoiceFileURlQueryKey(customerId);

  const invoiceUpdateInvoiceFileURl =  useInvoiceUpdateInvoiceFileURlHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceUpdateInvoiceFileURlHook>>>> = ({ signal }) => invoiceUpdateInvoiceFileURl(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceUpdateInvoiceFileURlHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceUpdateInvoiceFileURlQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceUpdateInvoiceFileURlHook>>>>
export type InvoiceUpdateInvoiceFileURlQueryError = unknown

export const useInvoiceUpdateInvoiceFileURl = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceUpdateInvoiceFileURlHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceUpdateInvoiceFileURlHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceUpdateInvoiceFileURlQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceSendInvoiceMailHook = () => {
        const invoiceSendInvoiceMail = useCustomInstance<boolean>();

        return (
    customerId: number,
    invoiceID: number,
 signal?: AbortSignal
) => {
        return invoiceSendInvoiceMail(
          {url: `/api/Invoice/SendInvoiceMail/${customerId}/${invoiceID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceSendInvoiceMailQueryKey = (customerId: number,
    invoiceID: number,) => {
    return [`/api/Invoice/SendInvoiceMail/${customerId}/${invoiceID}`] as const;
    }

    
export const useInvoiceSendInvoiceMailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceSendInvoiceMailHook>>>, TError = unknown>(customerId: number,
    invoiceID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceSendInvoiceMailHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceSendInvoiceMailQueryKey(customerId,invoiceID);

  const invoiceSendInvoiceMail =  useInvoiceSendInvoiceMailHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceSendInvoiceMailHook>>>> = ({ signal }) => invoiceSendInvoiceMail(customerId,invoiceID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && invoiceID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceSendInvoiceMailHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceSendInvoiceMailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceSendInvoiceMailHook>>>>
export type InvoiceSendInvoiceMailQueryError = unknown

export const useInvoiceSendInvoiceMail = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceSendInvoiceMailHook>>>, TError = unknown>(
 customerId: number,
    invoiceID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceSendInvoiceMailHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceSendInvoiceMailQueryOptions(customerId,invoiceID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceUpdateInvoiceAmountHook = () => {
        const invoiceUpdateInvoiceAmount = useCustomInstance<boolean>();

        return (
    domainModelBenchmarkInvoiceBody: DomainModelBenchmarkInvoiceBody,
 ) => {
        return invoiceUpdateInvoiceAmount(
          {url: `/api/Invoice/UpdateInvoiceAmount`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkInvoiceBody
    },
          );
        }
      }
    


export const useInvoiceUpdateInvoiceAmountMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceUpdateInvoiceAmountHook>>>, TError,{data: DomainModelBenchmarkInvoiceBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceUpdateInvoiceAmountHook>>>, TError,{data: DomainModelBenchmarkInvoiceBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const invoiceUpdateInvoiceAmount =  useInvoiceUpdateInvoiceAmountHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceUpdateInvoiceAmountHook>>>, {data: DomainModelBenchmarkInvoiceBody}> = (props) => {
          const {data} = props ?? {};

          return  invoiceUpdateInvoiceAmount(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type InvoiceUpdateInvoiceAmountMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceUpdateInvoiceAmountHook>>>>
    export type InvoiceUpdateInvoiceAmountMutationBody = DomainModelBenchmarkInvoiceBody
    export type InvoiceUpdateInvoiceAmountMutationError = unknown

    export const useInvoiceUpdateInvoiceAmount = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceUpdateInvoiceAmountHook>>>, TError,{data: DomainModelBenchmarkInvoiceBody}, TContext>, }
) => {

      const mutationOptions = useInvoiceUpdateInvoiceAmountMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useInvoiceGetInvoiceListByCustomerIdWithFiltersHook = () => {
        const invoiceGetInvoiceListByCustomerIdWithFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkInvoice>();

        return (
    customerId: number,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return invoiceGetInvoiceListByCustomerIdWithFilters(
          {url: `/api/Invoice/GetInvoiceByCustomerIdWithFilters/${customerId}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceGetInvoiceListByCustomerIdWithFiltersQueryKey = (customerId: number,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/Invoice/GetInvoiceByCustomerIdWithFilters/${customerId}/${startIndex}/${endIndex}`] as const;
    }

    
export const useInvoiceGetInvoiceListByCustomerIdWithFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceListByCustomerIdWithFiltersHook>>>, TError = unknown>(customerId: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceListByCustomerIdWithFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceGetInvoiceListByCustomerIdWithFiltersQueryKey(customerId,startIndex,endIndex);

  const invoiceGetInvoiceListByCustomerIdWithFilters =  useInvoiceGetInvoiceListByCustomerIdWithFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceListByCustomerIdWithFiltersHook>>>> = ({ signal }) => invoiceGetInvoiceListByCustomerIdWithFilters(customerId,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceListByCustomerIdWithFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceGetInvoiceListByCustomerIdWithFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceListByCustomerIdWithFiltersHook>>>>
export type InvoiceGetInvoiceListByCustomerIdWithFiltersQueryError = unknown

export const useInvoiceGetInvoiceListByCustomerIdWithFilters = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceListByCustomerIdWithFiltersHook>>>, TError = unknown>(
 customerId: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceListByCustomerIdWithFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceGetInvoiceListByCustomerIdWithFiltersQueryOptions(customerId,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceGetMonthlyInvoiceListByCustomerIdWithFiltersHook = () => {
        const invoiceGetMonthlyInvoiceListByCustomerIdWithFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkInvoice>();

        return (
    customerId: number,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return invoiceGetMonthlyInvoiceListByCustomerIdWithFilters(
          {url: `/api/Invoice/GetMonthlyInvoiceByCustomerIdWithFilters/${customerId}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceGetMonthlyInvoiceListByCustomerIdWithFiltersQueryKey = (customerId: number,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/Invoice/GetMonthlyInvoiceByCustomerIdWithFilters/${customerId}/${startIndex}/${endIndex}`] as const;
    }

    
export const useInvoiceGetMonthlyInvoiceListByCustomerIdWithFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetMonthlyInvoiceListByCustomerIdWithFiltersHook>>>, TError = unknown>(customerId: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetMonthlyInvoiceListByCustomerIdWithFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceGetMonthlyInvoiceListByCustomerIdWithFiltersQueryKey(customerId,startIndex,endIndex);

  const invoiceGetMonthlyInvoiceListByCustomerIdWithFilters =  useInvoiceGetMonthlyInvoiceListByCustomerIdWithFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGetMonthlyInvoiceListByCustomerIdWithFiltersHook>>>> = ({ signal }) => invoiceGetMonthlyInvoiceListByCustomerIdWithFilters(customerId,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetMonthlyInvoiceListByCustomerIdWithFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceGetMonthlyInvoiceListByCustomerIdWithFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGetMonthlyInvoiceListByCustomerIdWithFiltersHook>>>>
export type InvoiceGetMonthlyInvoiceListByCustomerIdWithFiltersQueryError = unknown

export const useInvoiceGetMonthlyInvoiceListByCustomerIdWithFilters = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetMonthlyInvoiceListByCustomerIdWithFiltersHook>>>, TError = unknown>(
 customerId: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetMonthlyInvoiceListByCustomerIdWithFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceGetMonthlyInvoiceListByCustomerIdWithFiltersQueryOptions(customerId,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceGetMortgageInvoiceListByCustomerIdWithFiltersHook = () => {
        const invoiceGetMortgageInvoiceListByCustomerIdWithFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkInvoice>();

        return (
    customerId: number,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return invoiceGetMortgageInvoiceListByCustomerIdWithFilters(
          {url: `/api/Invoice/GetMortgageInvoiceByCustomerIdWithFilters/${customerId}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceGetMortgageInvoiceListByCustomerIdWithFiltersQueryKey = (customerId: number,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/Invoice/GetMortgageInvoiceByCustomerIdWithFilters/${customerId}/${startIndex}/${endIndex}`] as const;
    }

    
export const useInvoiceGetMortgageInvoiceListByCustomerIdWithFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetMortgageInvoiceListByCustomerIdWithFiltersHook>>>, TError = unknown>(customerId: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetMortgageInvoiceListByCustomerIdWithFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceGetMortgageInvoiceListByCustomerIdWithFiltersQueryKey(customerId,startIndex,endIndex);

  const invoiceGetMortgageInvoiceListByCustomerIdWithFilters =  useInvoiceGetMortgageInvoiceListByCustomerIdWithFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGetMortgageInvoiceListByCustomerIdWithFiltersHook>>>> = ({ signal }) => invoiceGetMortgageInvoiceListByCustomerIdWithFilters(customerId,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetMortgageInvoiceListByCustomerIdWithFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceGetMortgageInvoiceListByCustomerIdWithFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGetMortgageInvoiceListByCustomerIdWithFiltersHook>>>>
export type InvoiceGetMortgageInvoiceListByCustomerIdWithFiltersQueryError = unknown

export const useInvoiceGetMortgageInvoiceListByCustomerIdWithFilters = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetMortgageInvoiceListByCustomerIdWithFiltersHook>>>, TError = unknown>(
 customerId: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetMortgageInvoiceListByCustomerIdWithFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceGetMortgageInvoiceListByCustomerIdWithFiltersQueryOptions(customerId,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceGetInvoiceByCustomerIdHook = () => {
        const invoiceGetInvoiceByCustomerId = useCustomInstance<DomainModelBenchmarkInvoice[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return invoiceGetInvoiceByCustomerId(
          {url: `/api/customers/${customerId}/Invoice`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceGetInvoiceByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/Invoice`] as const;
    }

    
export const useInvoiceGetInvoiceByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceGetInvoiceByCustomerIdQueryKey(customerId);

  const invoiceGetInvoiceByCustomerId =  useInvoiceGetInvoiceByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByCustomerIdHook>>>> = ({ signal }) => invoiceGetInvoiceByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceGetInvoiceByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByCustomerIdHook>>>>
export type InvoiceGetInvoiceByCustomerIdQueryError = unknown

export const useInvoiceGetInvoiceByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceGetInvoiceByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceGetInvoiceByCustomerIDAndSequenceHook = () => {
        const invoiceGetInvoiceByCustomerIDAndSequence = useCustomInstance<DomainModelBenchmarkInvoice>();

        return (
    customerId: number,
    sequence: number,
 signal?: AbortSignal
) => {
        return invoiceGetInvoiceByCustomerIDAndSequence(
          {url: `/api/Invoice/GetInvoiceByCustomerIDAndSequence/${customerId}/${sequence}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceGetInvoiceByCustomerIDAndSequenceQueryKey = (customerId: number,
    sequence: number,) => {
    return [`/api/Invoice/GetInvoiceByCustomerIDAndSequence/${customerId}/${sequence}`] as const;
    }

    
export const useInvoiceGetInvoiceByCustomerIDAndSequenceQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByCustomerIDAndSequenceHook>>>, TError = unknown>(customerId: number,
    sequence: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByCustomerIDAndSequenceHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceGetInvoiceByCustomerIDAndSequenceQueryKey(customerId,sequence);

  const invoiceGetInvoiceByCustomerIDAndSequence =  useInvoiceGetInvoiceByCustomerIDAndSequenceHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByCustomerIDAndSequenceHook>>>> = ({ signal }) => invoiceGetInvoiceByCustomerIDAndSequence(customerId,sequence, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && sequence), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByCustomerIDAndSequenceHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceGetInvoiceByCustomerIDAndSequenceQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByCustomerIDAndSequenceHook>>>>
export type InvoiceGetInvoiceByCustomerIDAndSequenceQueryError = unknown

export const useInvoiceGetInvoiceByCustomerIDAndSequence = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByCustomerIDAndSequenceHook>>>, TError = unknown>(
 customerId: number,
    sequence: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGetInvoiceByCustomerIDAndSequenceHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceGetInvoiceByCustomerIDAndSequenceQueryOptions(customerId,sequence,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceGenerateFloodInvoiceHook = () => {
        const invoiceGenerateFloodInvoice = useCustomInstance<boolean>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return invoiceGenerateFloodInvoice(
          {url: `/api/Invoice/GenerateFloodInvoice/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoiceGenerateFloodInvoiceQueryKey = (customerId: number,) => {
    return [`/api/Invoice/GenerateFloodInvoice/${customerId}`] as const;
    }

    
export const useInvoiceGenerateFloodInvoiceQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGenerateFloodInvoiceHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGenerateFloodInvoiceHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoiceGenerateFloodInvoiceQueryKey(customerId);

  const invoiceGenerateFloodInvoice =  useInvoiceGenerateFloodInvoiceHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceGenerateFloodInvoiceHook>>>> = ({ signal }) => invoiceGenerateFloodInvoice(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGenerateFloodInvoiceHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoiceGenerateFloodInvoiceQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceGenerateFloodInvoiceHook>>>>
export type InvoiceGenerateFloodInvoiceQueryError = unknown

export const useInvoiceGenerateFloodInvoice = <TData = Awaited<ReturnType<ReturnType<typeof useInvoiceGenerateFloodInvoiceHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceGenerateFloodInvoiceHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoiceGenerateFloodInvoiceQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoiceAutoSearchInvoiceOrPolicyNoHook = () => {
        const invoiceAutoSearchInvoiceOrPolicyNo = useCustomInstance<string[]>();

        return (
    autoSearch: string,
 ) => {
        return invoiceAutoSearchInvoiceOrPolicyNo(
          {url: `/api/Invoice/AutoSearchInvoiceOrPolicyNo/${autoSearch}`, method: 'POST'
    },
          );
        }
      }
    


export const useInvoiceAutoSearchInvoiceOrPolicyNoMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceAutoSearchInvoiceOrPolicyNoHook>>>, TError,{autoSearch: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceAutoSearchInvoiceOrPolicyNoHook>>>, TError,{autoSearch: string}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const invoiceAutoSearchInvoiceOrPolicyNo =  useInvoiceAutoSearchInvoiceOrPolicyNoHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useInvoiceAutoSearchInvoiceOrPolicyNoHook>>>, {autoSearch: string}> = (props) => {
          const {autoSearch} = props ?? {};

          return  invoiceAutoSearchInvoiceOrPolicyNo(autoSearch,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type InvoiceAutoSearchInvoiceOrPolicyNoMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoiceAutoSearchInvoiceOrPolicyNoHook>>>>
    
    export type InvoiceAutoSearchInvoiceOrPolicyNoMutationError = unknown

    export const useInvoiceAutoSearchInvoiceOrPolicyNo = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvoiceAutoSearchInvoiceOrPolicyNoHook>>>, TError,{autoSearch: string}, TContext>, }
) => {

      const mutationOptions = useInvoiceAutoSearchInvoiceOrPolicyNoMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useInvoicePropertyGetAllInvoicePropertyHook = () => {
        const invoicePropertyGetAllInvoiceProperty = useCustomInstance<DomainModelBenchmarkInvoiceProperty[]>();

        return (
    
 signal?: AbortSignal
) => {
        return invoicePropertyGetAllInvoiceProperty(
          {url: `/api/InvoiceProperty/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoicePropertyGetAllInvoicePropertyQueryKey = () => {
    return [`/api/InvoiceProperty/getAll`] as const;
    }

    
export const useInvoicePropertyGetAllInvoicePropertyQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetAllInvoicePropertyHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetAllInvoicePropertyHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoicePropertyGetAllInvoicePropertyQueryKey();

  const invoicePropertyGetAllInvoiceProperty =  useInvoicePropertyGetAllInvoicePropertyHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetAllInvoicePropertyHook>>>> = ({ signal }) => invoicePropertyGetAllInvoiceProperty(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetAllInvoicePropertyHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoicePropertyGetAllInvoicePropertyQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetAllInvoicePropertyHook>>>>
export type InvoicePropertyGetAllInvoicePropertyQueryError = unknown

export const useInvoicePropertyGetAllInvoiceProperty = <TData = Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetAllInvoicePropertyHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetAllInvoicePropertyHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoicePropertyGetAllInvoicePropertyQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoicePropertyGetHook = () => {
        const invoicePropertyGet = useCustomInstance<DomainModelBenchmarkInvoiceProperty>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return invoicePropertyGet(
          {url: `/api/InvoiceProperty/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoicePropertyGetQueryKey = (id: number,) => {
    return [`/api/InvoiceProperty/get/${id}`] as const;
    }

    
export const useInvoicePropertyGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoicePropertyGetQueryKey(id);

  const invoicePropertyGet =  useInvoicePropertyGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetHook>>>> = ({ signal }) => invoicePropertyGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoicePropertyGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetHook>>>>
export type InvoicePropertyGetQueryError = unknown

export const useInvoicePropertyGet = <TData = Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoicePropertyGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoicePropertyPostInvoicePropertyHook = () => {
        const invoicePropertyPostInvoiceProperty = useCustomInstance<DomainModelBenchmarkInvoiceProperty>();

        return (
    domainModelBenchmarkInvoicePropertyBody: DomainModelBenchmarkInvoicePropertyBody,
 ) => {
        return invoicePropertyPostInvoiceProperty(
          {url: `/api/InvoiceProperty/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkInvoicePropertyBody
    },
          );
        }
      }
    


export const useInvoicePropertyPostInvoicePropertyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyPostInvoicePropertyHook>>>, TError,{data: DomainModelBenchmarkInvoicePropertyBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyPostInvoicePropertyHook>>>, TError,{data: DomainModelBenchmarkInvoicePropertyBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const invoicePropertyPostInvoiceProperty =  useInvoicePropertyPostInvoicePropertyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyPostInvoicePropertyHook>>>, {data: DomainModelBenchmarkInvoicePropertyBody}> = (props) => {
          const {data} = props ?? {};

          return  invoicePropertyPostInvoiceProperty(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type InvoicePropertyPostInvoicePropertyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyPostInvoicePropertyHook>>>>
    export type InvoicePropertyPostInvoicePropertyMutationBody = DomainModelBenchmarkInvoicePropertyBody
    export type InvoicePropertyPostInvoicePropertyMutationError = unknown

    export const useInvoicePropertyPostInvoiceProperty = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyPostInvoicePropertyHook>>>, TError,{data: DomainModelBenchmarkInvoicePropertyBody}, TContext>, }
) => {

      const mutationOptions = useInvoicePropertyPostInvoicePropertyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useInvoicePropertyPutInvoicePropertyHook = () => {
        const invoicePropertyPutInvoiceProperty = useCustomInstance<boolean>();

        return (
    domainModelBenchmarkInvoicePropertyBody: DomainModelBenchmarkInvoicePropertyBody,
 ) => {
        return invoicePropertyPutInvoiceProperty(
          {url: `/api/InvoiceProperty/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkInvoicePropertyBody
    },
          );
        }
      }
    


export const useInvoicePropertyPutInvoicePropertyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyPutInvoicePropertyHook>>>, TError,{data: DomainModelBenchmarkInvoicePropertyBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyPutInvoicePropertyHook>>>, TError,{data: DomainModelBenchmarkInvoicePropertyBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const invoicePropertyPutInvoiceProperty =  useInvoicePropertyPutInvoicePropertyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyPutInvoicePropertyHook>>>, {data: DomainModelBenchmarkInvoicePropertyBody}> = (props) => {
          const {data} = props ?? {};

          return  invoicePropertyPutInvoiceProperty(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type InvoicePropertyPutInvoicePropertyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyPutInvoicePropertyHook>>>>
    export type InvoicePropertyPutInvoicePropertyMutationBody = DomainModelBenchmarkInvoicePropertyBody
    export type InvoicePropertyPutInvoicePropertyMutationError = unknown

    export const useInvoicePropertyPutInvoiceProperty = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyPutInvoicePropertyHook>>>, TError,{data: DomainModelBenchmarkInvoicePropertyBody}, TContext>, }
) => {

      const mutationOptions = useInvoicePropertyPutInvoicePropertyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useInvoicePropertyDeleteInvoicePropertyHook = () => {
        const invoicePropertyDeleteInvoiceProperty = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return invoicePropertyDeleteInvoiceProperty(
          {url: `/api/InvoiceProperty/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoicePropertyDeleteInvoicePropertyQueryKey = (id: number,) => {
    return [`/api/InvoiceProperty/delete/${id}`] as const;
    }

    
export const useInvoicePropertyDeleteInvoicePropertyQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoicePropertyDeleteInvoicePropertyHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyDeleteInvoicePropertyHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoicePropertyDeleteInvoicePropertyQueryKey(id);

  const invoicePropertyDeleteInvoiceProperty =  useInvoicePropertyDeleteInvoicePropertyHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyDeleteInvoicePropertyHook>>>> = ({ signal }) => invoicePropertyDeleteInvoiceProperty(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyDeleteInvoicePropertyHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoicePropertyDeleteInvoicePropertyQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyDeleteInvoicePropertyHook>>>>
export type InvoicePropertyDeleteInvoicePropertyQueryError = unknown

export const useInvoicePropertyDeleteInvoiceProperty = <TData = Awaited<ReturnType<ReturnType<typeof useInvoicePropertyDeleteInvoicePropertyHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyDeleteInvoicePropertyHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoicePropertyDeleteInvoicePropertyQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoicePropertyGetInvoicePropertyDetailsByCustomerIDInvoiceIDHook = () => {
        const invoicePropertyGetInvoicePropertyDetailsByCustomerIDInvoiceID = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelVMInvoicePropertyDetails>();

        return (
    customerID: number,
    invoiceID: number,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return invoicePropertyGetInvoicePropertyDetailsByCustomerIDInvoiceID(
          {url: `/api/InvoiceProperty/GetInvoicePropertyDetailsByCustomerID_InvoiceID/${customerID}/${invoiceID}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoicePropertyGetInvoicePropertyDetailsByCustomerIDInvoiceIDQueryKey = (customerID: number,
    invoiceID: number,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/InvoiceProperty/GetInvoicePropertyDetailsByCustomerID_InvoiceID/${customerID}/${invoiceID}/${startIndex}/${endIndex}`] as const;
    }

    
export const useInvoicePropertyGetInvoicePropertyDetailsByCustomerIDInvoiceIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetInvoicePropertyDetailsByCustomerIDInvoiceIDHook>>>, TError = unknown>(customerID: number,
    invoiceID: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetInvoicePropertyDetailsByCustomerIDInvoiceIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoicePropertyGetInvoicePropertyDetailsByCustomerIDInvoiceIDQueryKey(customerID,invoiceID,startIndex,endIndex);

  const invoicePropertyGetInvoicePropertyDetailsByCustomerIDInvoiceID =  useInvoicePropertyGetInvoicePropertyDetailsByCustomerIDInvoiceIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetInvoicePropertyDetailsByCustomerIDInvoiceIDHook>>>> = ({ signal }) => invoicePropertyGetInvoicePropertyDetailsByCustomerIDInvoiceID(customerID,invoiceID,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerID && invoiceID && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetInvoicePropertyDetailsByCustomerIDInvoiceIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoicePropertyGetInvoicePropertyDetailsByCustomerIDInvoiceIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetInvoicePropertyDetailsByCustomerIDInvoiceIDHook>>>>
export type InvoicePropertyGetInvoicePropertyDetailsByCustomerIDInvoiceIDQueryError = unknown

export const useInvoicePropertyGetInvoicePropertyDetailsByCustomerIDInvoiceID = <TData = Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetInvoicePropertyDetailsByCustomerIDInvoiceIDHook>>>, TError = unknown>(
 customerID: number,
    invoiceID: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetInvoicePropertyDetailsByCustomerIDInvoiceIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoicePropertyGetInvoicePropertyDetailsByCustomerIDInvoiceIDQueryOptions(customerID,invoiceID,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoicePropertyAddInvoicePropertyDetailsByPropertyListInvoiceIDHook = () => {
        const invoicePropertyAddInvoicePropertyDetailsByPropertyListInvoiceID = useCustomInstance<boolean>();

        return (
    customerID: number,
    agentID: number,
 signal?: AbortSignal
) => {
        return invoicePropertyAddInvoicePropertyDetailsByPropertyListInvoiceID(
          {url: `/api/InvoiceProperty/AddInvoicePropertyDetailsByProperty/${customerID}/${agentID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoicePropertyAddInvoicePropertyDetailsByPropertyListInvoiceIDQueryKey = (customerID: number,
    agentID: number,) => {
    return [`/api/InvoiceProperty/AddInvoicePropertyDetailsByProperty/${customerID}/${agentID}`] as const;
    }

    
export const useInvoicePropertyAddInvoicePropertyDetailsByPropertyListInvoiceIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoicePropertyAddInvoicePropertyDetailsByPropertyListInvoiceIDHook>>>, TError = unknown>(customerID: number,
    agentID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyAddInvoicePropertyDetailsByPropertyListInvoiceIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoicePropertyAddInvoicePropertyDetailsByPropertyListInvoiceIDQueryKey(customerID,agentID);

  const invoicePropertyAddInvoicePropertyDetailsByPropertyListInvoiceID =  useInvoicePropertyAddInvoicePropertyDetailsByPropertyListInvoiceIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyAddInvoicePropertyDetailsByPropertyListInvoiceIDHook>>>> = ({ signal }) => invoicePropertyAddInvoicePropertyDetailsByPropertyListInvoiceID(customerID,agentID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerID && agentID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyAddInvoicePropertyDetailsByPropertyListInvoiceIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoicePropertyAddInvoicePropertyDetailsByPropertyListInvoiceIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyAddInvoicePropertyDetailsByPropertyListInvoiceIDHook>>>>
export type InvoicePropertyAddInvoicePropertyDetailsByPropertyListInvoiceIDQueryError = unknown

export const useInvoicePropertyAddInvoicePropertyDetailsByPropertyListInvoiceID = <TData = Awaited<ReturnType<ReturnType<typeof useInvoicePropertyAddInvoicePropertyDetailsByPropertyListInvoiceIDHook>>>, TError = unknown>(
 customerID: number,
    agentID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyAddInvoicePropertyDetailsByPropertyListInvoiceIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoicePropertyAddInvoicePropertyDetailsByPropertyListInvoiceIDQueryOptions(customerID,agentID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoicePropertyGetInvoicePropertyDetailsByInvoiceIDHook = () => {
        const invoicePropertyGetInvoicePropertyDetailsByInvoiceID = useCustomInstance<DomainModelBenchmarkInvoiceProperty[]>();

        return (
    invoiceID: number,
 signal?: AbortSignal
) => {
        return invoicePropertyGetInvoicePropertyDetailsByInvoiceID(
          {url: `/api/InvoiceProperty/GetInvoicePropertyByInvoiceID/${invoiceID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoicePropertyGetInvoicePropertyDetailsByInvoiceIDQueryKey = (invoiceID: number,) => {
    return [`/api/InvoiceProperty/GetInvoicePropertyByInvoiceID/${invoiceID}`] as const;
    }

    
export const useInvoicePropertyGetInvoicePropertyDetailsByInvoiceIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetInvoicePropertyDetailsByInvoiceIDHook>>>, TError = unknown>(invoiceID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetInvoicePropertyDetailsByInvoiceIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoicePropertyGetInvoicePropertyDetailsByInvoiceIDQueryKey(invoiceID);

  const invoicePropertyGetInvoicePropertyDetailsByInvoiceID =  useInvoicePropertyGetInvoicePropertyDetailsByInvoiceIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetInvoicePropertyDetailsByInvoiceIDHook>>>> = ({ signal }) => invoicePropertyGetInvoicePropertyDetailsByInvoiceID(invoiceID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(invoiceID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetInvoicePropertyDetailsByInvoiceIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoicePropertyGetInvoicePropertyDetailsByInvoiceIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetInvoicePropertyDetailsByInvoiceIDHook>>>>
export type InvoicePropertyGetInvoicePropertyDetailsByInvoiceIDQueryError = unknown

export const useInvoicePropertyGetInvoicePropertyDetailsByInvoiceID = <TData = Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetInvoicePropertyDetailsByInvoiceIDHook>>>, TError = unknown>(
 invoiceID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetInvoicePropertyDetailsByInvoiceIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoicePropertyGetInvoicePropertyDetailsByInvoiceIDQueryOptions(invoiceID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useInvoicePropertyGetPropertyDetailsByInvoiceIDHook = () => {
        const invoicePropertyGetPropertyDetailsByInvoiceID = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelVMPropertyDetails>();

        return (
    invoiceID: number,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return invoicePropertyGetPropertyDetailsByInvoiceID(
          {url: `/api/InvoiceProperty/GetPropertyDetailsByInvoiceID/${invoiceID}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getInvoicePropertyGetPropertyDetailsByInvoiceIDQueryKey = (invoiceID: number,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/InvoiceProperty/GetPropertyDetailsByInvoiceID/${invoiceID}/${startIndex}/${endIndex}`] as const;
    }

    
export const useInvoicePropertyGetPropertyDetailsByInvoiceIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetPropertyDetailsByInvoiceIDHook>>>, TError = unknown>(invoiceID: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetPropertyDetailsByInvoiceIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoicePropertyGetPropertyDetailsByInvoiceIDQueryKey(invoiceID,startIndex,endIndex);

  const invoicePropertyGetPropertyDetailsByInvoiceID =  useInvoicePropertyGetPropertyDetailsByInvoiceIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetPropertyDetailsByInvoiceIDHook>>>> = ({ signal }) => invoicePropertyGetPropertyDetailsByInvoiceID(invoiceID,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(invoiceID && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetPropertyDetailsByInvoiceIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type InvoicePropertyGetPropertyDetailsByInvoiceIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetPropertyDetailsByInvoiceIDHook>>>>
export type InvoicePropertyGetPropertyDetailsByInvoiceIDQueryError = unknown

export const useInvoicePropertyGetPropertyDetailsByInvoiceID = <TData = Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetPropertyDetailsByInvoiceIDHook>>>, TError = unknown>(
 invoiceID: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInvoicePropertyGetPropertyDetailsByInvoiceIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useInvoicePropertyGetPropertyDetailsByInvoiceIDQueryOptions(invoiceID,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useJournalGetAllJournalHook = () => {
        const journalGetAllJournal = useCustomInstance<DomainModelBenchmarkJournal[]>();

        return (
    
 signal?: AbortSignal
) => {
        return journalGetAllJournal(
          {url: `/api/Journal/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getJournalGetAllJournalQueryKey = () => {
    return [`/api/Journal/getAll`] as const;
    }

    
export const useJournalGetAllJournalQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useJournalGetAllJournalHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useJournalGetAllJournalHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getJournalGetAllJournalQueryKey();

  const journalGetAllJournal =  useJournalGetAllJournalHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useJournalGetAllJournalHook>>>> = ({ signal }) => journalGetAllJournal(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useJournalGetAllJournalHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type JournalGetAllJournalQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useJournalGetAllJournalHook>>>>
export type JournalGetAllJournalQueryError = unknown

export const useJournalGetAllJournal = <TData = Awaited<ReturnType<ReturnType<typeof useJournalGetAllJournalHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useJournalGetAllJournalHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useJournalGetAllJournalQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useJournalGetAllJournalByStatusHook = () => {
        const journalGetAllJournalByStatus = useCustomInstance<DomainModelBenchmarkJournal[]>();

        return (
    statusId: string,
    params: JournalGetAllJournalByStatusParams,
 signal?: AbortSignal
) => {
        return journalGetAllJournalByStatus(
          {url: `/api/statuses/${statusId}/Journal`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getJournalGetAllJournalByStatusQueryKey = (statusId: string,
    params: JournalGetAllJournalByStatusParams,) => {
    return [`/api/statuses/${statusId}/Journal`, ...(params ? [params]: [])] as const;
    }

    
export const useJournalGetAllJournalByStatusQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useJournalGetAllJournalByStatusHook>>>, TError = unknown>(statusId: string,
    params: JournalGetAllJournalByStatusParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useJournalGetAllJournalByStatusHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getJournalGetAllJournalByStatusQueryKey(statusId,params);

  const journalGetAllJournalByStatus =  useJournalGetAllJournalByStatusHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useJournalGetAllJournalByStatusHook>>>> = ({ signal }) => journalGetAllJournalByStatus(statusId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(statusId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useJournalGetAllJournalByStatusHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type JournalGetAllJournalByStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useJournalGetAllJournalByStatusHook>>>>
export type JournalGetAllJournalByStatusQueryError = unknown

export const useJournalGetAllJournalByStatus = <TData = Awaited<ReturnType<ReturnType<typeof useJournalGetAllJournalByStatusHook>>>, TError = unknown>(
 statusId: string,
    params: JournalGetAllJournalByStatusParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useJournalGetAllJournalByStatusHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useJournalGetAllJournalByStatusQueryOptions(statusId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useJournalGetInvoiceByCustomerIdHook = () => {
        const journalGetInvoiceByCustomerId = useCustomInstance<DomainModelBenchmarkJournal[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return journalGetInvoiceByCustomerId(
          {url: `/api/customers/${customerId}/Journal`, method: 'GET', signal
    },
          );
        }
      }
    

export const getJournalGetInvoiceByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/Journal`] as const;
    }

    
export const useJournalGetInvoiceByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useJournalGetInvoiceByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useJournalGetInvoiceByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getJournalGetInvoiceByCustomerIdQueryKey(customerId);

  const journalGetInvoiceByCustomerId =  useJournalGetInvoiceByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useJournalGetInvoiceByCustomerIdHook>>>> = ({ signal }) => journalGetInvoiceByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useJournalGetInvoiceByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type JournalGetInvoiceByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useJournalGetInvoiceByCustomerIdHook>>>>
export type JournalGetInvoiceByCustomerIdQueryError = unknown

export const useJournalGetInvoiceByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof useJournalGetInvoiceByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useJournalGetInvoiceByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useJournalGetInvoiceByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useJournalPostJournalHook = () => {
        const journalPostJournal = useCustomInstance<DomainModelBenchmarkJournal>();

        return (
    domainModelBenchmarkJournalBody: DomainModelBenchmarkJournalBody,
 ) => {
        return journalPostJournal(
          {url: `/api/Journal/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkJournalBody
    },
          );
        }
      }
    


export const useJournalPostJournalMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useJournalPostJournalHook>>>, TError,{data: DomainModelBenchmarkJournalBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useJournalPostJournalHook>>>, TError,{data: DomainModelBenchmarkJournalBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const journalPostJournal =  useJournalPostJournalHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useJournalPostJournalHook>>>, {data: DomainModelBenchmarkJournalBody}> = (props) => {
          const {data} = props ?? {};

          return  journalPostJournal(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type JournalPostJournalMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useJournalPostJournalHook>>>>
    export type JournalPostJournalMutationBody = DomainModelBenchmarkJournalBody
    export type JournalPostJournalMutationError = unknown

    export const useJournalPostJournal = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useJournalPostJournalHook>>>, TError,{data: DomainModelBenchmarkJournalBody}, TContext>, }
) => {

      const mutationOptions = useJournalPostJournalMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useJournalPutInvoiceHook = () => {
        const journalPutInvoice = useCustomInstance<boolean>();

        return (
    domainModelBenchmarkJournalBody: DomainModelBenchmarkJournalBody,
 ) => {
        return journalPutInvoice(
          {url: `/api/Journal/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkJournalBody
    },
          );
        }
      }
    


export const useJournalPutInvoiceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useJournalPutInvoiceHook>>>, TError,{data: DomainModelBenchmarkJournalBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useJournalPutInvoiceHook>>>, TError,{data: DomainModelBenchmarkJournalBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const journalPutInvoice =  useJournalPutInvoiceHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useJournalPutInvoiceHook>>>, {data: DomainModelBenchmarkJournalBody}> = (props) => {
          const {data} = props ?? {};

          return  journalPutInvoice(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type JournalPutInvoiceMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useJournalPutInvoiceHook>>>>
    export type JournalPutInvoiceMutationBody = DomainModelBenchmarkJournalBody
    export type JournalPutInvoiceMutationError = unknown

    export const useJournalPutInvoice = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useJournalPutInvoiceHook>>>, TError,{data: DomainModelBenchmarkJournalBody}, TContext>, }
) => {

      const mutationOptions = useJournalPutInvoiceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useJournalDeleteJournalHook = () => {
        const journalDeleteJournal = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return journalDeleteJournal(
          {url: `/api/Journal/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getJournalDeleteJournalQueryKey = (id: number,) => {
    return [`/api/Journal/delete/${id}`] as const;
    }

    
export const useJournalDeleteJournalQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useJournalDeleteJournalHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useJournalDeleteJournalHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getJournalDeleteJournalQueryKey(id);

  const journalDeleteJournal =  useJournalDeleteJournalHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useJournalDeleteJournalHook>>>> = ({ signal }) => journalDeleteJournal(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useJournalDeleteJournalHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type JournalDeleteJournalQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useJournalDeleteJournalHook>>>>
export type JournalDeleteJournalQueryError = unknown

export const useJournalDeleteJournal = <TData = Awaited<ReturnType<ReturnType<typeof useJournalDeleteJournalHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useJournalDeleteJournalHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useJournalDeleteJournalQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useJournalAddJournalsHook = () => {
        const journalAddJournals = useCustomInstance<boolean>();

        return (
    domainModelBenchmarkJournal: DomainModelBenchmarkJournal[],
 ) => {
        return journalAddJournals(
          {url: `/api/Journal/addJournals`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkJournal
    },
          );
        }
      }
    


export const useJournalAddJournalsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useJournalAddJournalsHook>>>, TError,{data: DomainModelBenchmarkJournal[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useJournalAddJournalsHook>>>, TError,{data: DomainModelBenchmarkJournal[]}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const journalAddJournals =  useJournalAddJournalsHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useJournalAddJournalsHook>>>, {data: DomainModelBenchmarkJournal[]}> = (props) => {
          const {data} = props ?? {};

          return  journalAddJournals(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type JournalAddJournalsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useJournalAddJournalsHook>>>>
    export type JournalAddJournalsMutationBody = DomainModelBenchmarkJournal[]
    export type JournalAddJournalsMutationError = unknown

    export const useJournalAddJournals = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useJournalAddJournalsHook>>>, TError,{data: DomainModelBenchmarkJournal[]}, TContext>, }
) => {

      const mutationOptions = useJournalAddJournalsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useJournalGetHook = () => {
        const journalGet = useCustomInstance<DomainModelBenchmarkJournal>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return journalGet(
          {url: `/api/Journal/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getJournalGetQueryKey = (id: number,) => {
    return [`/api/Journal/${id}`] as const;
    }

    
export const useJournalGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useJournalGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useJournalGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getJournalGetQueryKey(id);

  const journalGet =  useJournalGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useJournalGetHook>>>> = ({ signal }) => journalGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useJournalGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type JournalGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useJournalGetHook>>>>
export type JournalGetQueryError = unknown

export const useJournalGet = <TData = Awaited<ReturnType<ReturnType<typeof useJournalGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useJournalGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useJournalGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useJournalGetJournalByNameHook = () => {
        const journalGetJournalByName = useCustomInstance<DomainModelBenchmarkJournal[]>();

        return (
    params: JournalGetJournalByNameParams,
 signal?: AbortSignal
) => {
        return journalGetJournalByName(
          {url: `/api/Journal`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getJournalGetJournalByNameQueryKey = (params: JournalGetJournalByNameParams,) => {
    return [`/api/Journal`, ...(params ? [params]: [])] as const;
    }

    
export const useJournalGetJournalByNameQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useJournalGetJournalByNameHook>>>, TError = unknown>(params: JournalGetJournalByNameParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useJournalGetJournalByNameHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getJournalGetJournalByNameQueryKey(params);

  const journalGetJournalByName =  useJournalGetJournalByNameHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useJournalGetJournalByNameHook>>>> = ({ signal }) => journalGetJournalByName(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useJournalGetJournalByNameHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type JournalGetJournalByNameQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useJournalGetJournalByNameHook>>>>
export type JournalGetJournalByNameQueryError = unknown

export const useJournalGetJournalByName = <TData = Awaited<ReturnType<ReturnType<typeof useJournalGetJournalByNameHook>>>, TError = unknown>(
 params: JournalGetJournalByNameParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useJournalGetJournalByNameHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useJournalGetJournalByNameQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useMortgageeGetAllMortgageeHook = () => {
        const mortgageeGetAllMortgagee = useCustomInstance<DomainModelBenchmarkMortgagee[]>();

        return (
    
 signal?: AbortSignal
) => {
        return mortgageeGetAllMortgagee(
          {url: `/api/Mortgagee/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getMortgageeGetAllMortgageeQueryKey = () => {
    return [`/api/Mortgagee/getAll`] as const;
    }

    
export const useMortgageeGetAllMortgageeQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useMortgageeGetAllMortgageeHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeGetAllMortgageeHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMortgageeGetAllMortgageeQueryKey();

  const mortgageeGetAllMortgagee =  useMortgageeGetAllMortgageeHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useMortgageeGetAllMortgageeHook>>>> = ({ signal }) => mortgageeGetAllMortgagee(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeGetAllMortgageeHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type MortgageeGetAllMortgageeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useMortgageeGetAllMortgageeHook>>>>
export type MortgageeGetAllMortgageeQueryError = unknown

export const useMortgageeGetAllMortgagee = <TData = Awaited<ReturnType<ReturnType<typeof useMortgageeGetAllMortgageeHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeGetAllMortgageeHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useMortgageeGetAllMortgageeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useMortgageeGetAllUsersHook = () => {
        const mortgageeGetAllUsers = useCustomInstance<DomainModelUser[]>();

        return (
    
 signal?: AbortSignal
) => {
        return mortgageeGetAllUsers(
          {url: `/api/Mortgagee/users`, method: 'GET', signal
    },
          );
        }
      }
    

export const getMortgageeGetAllUsersQueryKey = () => {
    return [`/api/Mortgagee/users`] as const;
    }

    
export const useMortgageeGetAllUsersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useMortgageeGetAllUsersHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeGetAllUsersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMortgageeGetAllUsersQueryKey();

  const mortgageeGetAllUsers =  useMortgageeGetAllUsersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useMortgageeGetAllUsersHook>>>> = ({ signal }) => mortgageeGetAllUsers(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeGetAllUsersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type MortgageeGetAllUsersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useMortgageeGetAllUsersHook>>>>
export type MortgageeGetAllUsersQueryError = unknown

export const useMortgageeGetAllUsers = <TData = Awaited<ReturnType<ReturnType<typeof useMortgageeGetAllUsersHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeGetAllUsersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useMortgageeGetAllUsersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useMortgageeGetAllMortgageeByStatusHook = () => {
        const mortgageeGetAllMortgageeByStatus = useCustomInstance<DomainModelBenchmarkMortgagee[]>();

        return (
    statusId: number,
 signal?: AbortSignal
) => {
        return mortgageeGetAllMortgageeByStatus(
          {url: `/api/statuses/${statusId}/Mortgagee`, method: 'GET', signal
    },
          );
        }
      }
    

export const getMortgageeGetAllMortgageeByStatusQueryKey = (statusId: number,) => {
    return [`/api/statuses/${statusId}/Mortgagee`] as const;
    }

    
export const useMortgageeGetAllMortgageeByStatusQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useMortgageeGetAllMortgageeByStatusHook>>>, TError = unknown>(statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeGetAllMortgageeByStatusHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMortgageeGetAllMortgageeByStatusQueryKey(statusId);

  const mortgageeGetAllMortgageeByStatus =  useMortgageeGetAllMortgageeByStatusHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useMortgageeGetAllMortgageeByStatusHook>>>> = ({ signal }) => mortgageeGetAllMortgageeByStatus(statusId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(statusId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeGetAllMortgageeByStatusHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type MortgageeGetAllMortgageeByStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useMortgageeGetAllMortgageeByStatusHook>>>>
export type MortgageeGetAllMortgageeByStatusQueryError = unknown

export const useMortgageeGetAllMortgageeByStatus = <TData = Awaited<ReturnType<ReturnType<typeof useMortgageeGetAllMortgageeByStatusHook>>>, TError = unknown>(
 statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeGetAllMortgageeByStatusHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useMortgageeGetAllMortgageeByStatusQueryOptions(statusId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useMortgageeGetMortgageeByCustomerIdHook = () => {
        const mortgageeGetMortgageeByCustomerId = useCustomInstance<DomainModelBenchmarkMortgagee[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return mortgageeGetMortgageeByCustomerId(
          {url: `/api/customers/${customerId}/Mortgagee`, method: 'GET', signal
    },
          );
        }
      }
    

export const getMortgageeGetMortgageeByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/Mortgagee`] as const;
    }

    
export const useMortgageeGetMortgageeByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useMortgageeGetMortgageeByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeGetMortgageeByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMortgageeGetMortgageeByCustomerIdQueryKey(customerId);

  const mortgageeGetMortgageeByCustomerId =  useMortgageeGetMortgageeByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useMortgageeGetMortgageeByCustomerIdHook>>>> = ({ signal }) => mortgageeGetMortgageeByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeGetMortgageeByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type MortgageeGetMortgageeByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useMortgageeGetMortgageeByCustomerIdHook>>>>
export type MortgageeGetMortgageeByCustomerIdQueryError = unknown

export const useMortgageeGetMortgageeByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof useMortgageeGetMortgageeByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeGetMortgageeByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useMortgageeGetMortgageeByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useMortgageePostMortgageeHook = () => {
        const mortgageePostMortgagee = useCustomInstance<DomainModelBenchmarkMortgagee>();

        return (
    domainModelBenchmarkMortgageeBody: DomainModelBenchmarkMortgageeBody,
 ) => {
        return mortgageePostMortgagee(
          {url: `/api/Mortgagee/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkMortgageeBody
    },
          );
        }
      }
    


export const useMortgageePostMortgageeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useMortgageePostMortgageeHook>>>, TError,{data: DomainModelBenchmarkMortgageeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useMortgageePostMortgageeHook>>>, TError,{data: DomainModelBenchmarkMortgageeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const mortgageePostMortgagee =  useMortgageePostMortgageeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useMortgageePostMortgageeHook>>>, {data: DomainModelBenchmarkMortgageeBody}> = (props) => {
          const {data} = props ?? {};

          return  mortgageePostMortgagee(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type MortgageePostMortgageeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useMortgageePostMortgageeHook>>>>
    export type MortgageePostMortgageeMutationBody = DomainModelBenchmarkMortgageeBody
    export type MortgageePostMortgageeMutationError = unknown

    export const useMortgageePostMortgagee = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useMortgageePostMortgageeHook>>>, TError,{data: DomainModelBenchmarkMortgageeBody}, TContext>, }
) => {

      const mutationOptions = useMortgageePostMortgageeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useMortgageeRateMortgageeHook = () => {
        const mortgageeRateMortgagee = useCustomInstance<DomainModelBenchmarkMortgagee>();

        return (
    domainModelBenchmarkMortgageeBody: DomainModelBenchmarkMortgageeBody,
 ) => {
        return mortgageeRateMortgagee(
          {url: `/api/Mortgagee/rate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkMortgageeBody
    },
          );
        }
      }
    


export const useMortgageeRateMortgageeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeRateMortgageeHook>>>, TError,{data: DomainModelBenchmarkMortgageeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeRateMortgageeHook>>>, TError,{data: DomainModelBenchmarkMortgageeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const mortgageeRateMortgagee =  useMortgageeRateMortgageeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useMortgageeRateMortgageeHook>>>, {data: DomainModelBenchmarkMortgageeBody}> = (props) => {
          const {data} = props ?? {};

          return  mortgageeRateMortgagee(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type MortgageeRateMortgageeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useMortgageeRateMortgageeHook>>>>
    export type MortgageeRateMortgageeMutationBody = DomainModelBenchmarkMortgageeBody
    export type MortgageeRateMortgageeMutationError = unknown

    export const useMortgageeRateMortgagee = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeRateMortgageeHook>>>, TError,{data: DomainModelBenchmarkMortgageeBody}, TContext>, }
) => {

      const mutationOptions = useMortgageeRateMortgageeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useMortgageeEditMortgageeHook = () => {
        const mortgageeEditMortgagee = useCustomInstance<DomainModelBenchmarkMortgagee>();

        return (
    domainModelBenchmarkMortgageeBody: DomainModelBenchmarkMortgageeBody,
 ) => {
        return mortgageeEditMortgagee(
          {url: `/api/Mortgagee/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkMortgageeBody
    },
          );
        }
      }
    


export const useMortgageeEditMortgageeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeEditMortgageeHook>>>, TError,{data: DomainModelBenchmarkMortgageeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeEditMortgageeHook>>>, TError,{data: DomainModelBenchmarkMortgageeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const mortgageeEditMortgagee =  useMortgageeEditMortgageeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useMortgageeEditMortgageeHook>>>, {data: DomainModelBenchmarkMortgageeBody}> = (props) => {
          const {data} = props ?? {};

          return  mortgageeEditMortgagee(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type MortgageeEditMortgageeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useMortgageeEditMortgageeHook>>>>
    export type MortgageeEditMortgageeMutationBody = DomainModelBenchmarkMortgageeBody
    export type MortgageeEditMortgageeMutationError = unknown

    export const useMortgageeEditMortgagee = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeEditMortgageeHook>>>, TError,{data: DomainModelBenchmarkMortgageeBody}, TContext>, }
) => {

      const mutationOptions = useMortgageeEditMortgageeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useMortgageeEditMortgageeCompanyHook = () => {
        const mortgageeEditMortgageeCompany = useCustomInstance<DomainModelBenchmarkMortgagee>();

        return (
    domainModelBenchmarkMortgageeBody: DomainModelBenchmarkMortgageeBody,
 ) => {
        return mortgageeEditMortgageeCompany(
          {url: `/api/MortgageeCompany/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkMortgageeBody
    },
          );
        }
      }
    


export const useMortgageeEditMortgageeCompanyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeEditMortgageeCompanyHook>>>, TError,{data: DomainModelBenchmarkMortgageeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeEditMortgageeCompanyHook>>>, TError,{data: DomainModelBenchmarkMortgageeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const mortgageeEditMortgageeCompany =  useMortgageeEditMortgageeCompanyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useMortgageeEditMortgageeCompanyHook>>>, {data: DomainModelBenchmarkMortgageeBody}> = (props) => {
          const {data} = props ?? {};

          return  mortgageeEditMortgageeCompany(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type MortgageeEditMortgageeCompanyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useMortgageeEditMortgageeCompanyHook>>>>
    export type MortgageeEditMortgageeCompanyMutationBody = DomainModelBenchmarkMortgageeBody
    export type MortgageeEditMortgageeCompanyMutationError = unknown

    export const useMortgageeEditMortgageeCompany = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeEditMortgageeCompanyHook>>>, TError,{data: DomainModelBenchmarkMortgageeBody}, TContext>, }
) => {

      const mutationOptions = useMortgageeEditMortgageeCompanyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useMortgageeDeleteMortgageeHook = () => {
        const mortgageeDeleteMortgagee = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return mortgageeDeleteMortgagee(
          {url: `/api/Mortgagee/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getMortgageeDeleteMortgageeQueryKey = (id: number,) => {
    return [`/api/Mortgagee/delete/${id}`] as const;
    }

    
export const useMortgageeDeleteMortgageeQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useMortgageeDeleteMortgageeHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeDeleteMortgageeHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMortgageeDeleteMortgageeQueryKey(id);

  const mortgageeDeleteMortgagee =  useMortgageeDeleteMortgageeHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useMortgageeDeleteMortgageeHook>>>> = ({ signal }) => mortgageeDeleteMortgagee(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeDeleteMortgageeHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type MortgageeDeleteMortgageeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useMortgageeDeleteMortgageeHook>>>>
export type MortgageeDeleteMortgageeQueryError = unknown

export const useMortgageeDeleteMortgagee = <TData = Awaited<ReturnType<ReturnType<typeof useMortgageeDeleteMortgageeHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeDeleteMortgageeHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useMortgageeDeleteMortgageeQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useMortgageeUpdateMortgageeHook = () => {
        const mortgageeUpdateMortgagee = useCustomInstance<DomainModelBenchmarkMortgagee[]>();

        return (
    domainModelBenchmarkMortgagee: DomainModelBenchmarkMortgagee[],
 ) => {
        return mortgageeUpdateMortgagee(
          {url: `/api/Mortgagee/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkMortgagee
    },
          );
        }
      }
    


export const useMortgageeUpdateMortgageeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeUpdateMortgageeHook>>>, TError,{data: DomainModelBenchmarkMortgagee[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeUpdateMortgageeHook>>>, TError,{data: DomainModelBenchmarkMortgagee[]}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const mortgageeUpdateMortgagee =  useMortgageeUpdateMortgageeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useMortgageeUpdateMortgageeHook>>>, {data: DomainModelBenchmarkMortgagee[]}> = (props) => {
          const {data} = props ?? {};

          return  mortgageeUpdateMortgagee(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type MortgageeUpdateMortgageeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useMortgageeUpdateMortgageeHook>>>>
    export type MortgageeUpdateMortgageeMutationBody = DomainModelBenchmarkMortgagee[]
    export type MortgageeUpdateMortgageeMutationError = unknown

    export const useMortgageeUpdateMortgagee = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeUpdateMortgageeHook>>>, TError,{data: DomainModelBenchmarkMortgagee[]}, TContext>, }
) => {

      const mutationOptions = useMortgageeUpdateMortgageeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useMortgageeGetMortgageeByNameAddressHook = () => {
        const mortgageeGetMortgageeByNameAddress = useCustomInstance<DomainModelBenchmarkMortgagee[]>();

        return (
    params: MortgageeGetMortgageeByNameAddressParams,
 signal?: AbortSignal
) => {
        return mortgageeGetMortgageeByNameAddress(
          {url: `/api/Mortgagee`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getMortgageeGetMortgageeByNameAddressQueryKey = (params: MortgageeGetMortgageeByNameAddressParams,) => {
    return [`/api/Mortgagee`, ...(params ? [params]: [])] as const;
    }

    
export const useMortgageeGetMortgageeByNameAddressQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useMortgageeGetMortgageeByNameAddressHook>>>, TError = unknown>(params: MortgageeGetMortgageeByNameAddressParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeGetMortgageeByNameAddressHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMortgageeGetMortgageeByNameAddressQueryKey(params);

  const mortgageeGetMortgageeByNameAddress =  useMortgageeGetMortgageeByNameAddressHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useMortgageeGetMortgageeByNameAddressHook>>>> = ({ signal }) => mortgageeGetMortgageeByNameAddress(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeGetMortgageeByNameAddressHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type MortgageeGetMortgageeByNameAddressQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useMortgageeGetMortgageeByNameAddressHook>>>>
export type MortgageeGetMortgageeByNameAddressQueryError = unknown

export const useMortgageeGetMortgageeByNameAddress = <TData = Awaited<ReturnType<ReturnType<typeof useMortgageeGetMortgageeByNameAddressHook>>>, TError = unknown>(
 params: MortgageeGetMortgageeByNameAddressParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeGetMortgageeByNameAddressHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useMortgageeGetMortgageeByNameAddressQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useMortgageeGetHook = () => {
        const mortgageeGet = useCustomInstance<DomainModelBenchmarkMortgagee>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return mortgageeGet(
          {url: `/api/Mortgagee/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getMortgageeGetQueryKey = (id: number,) => {
    return [`/api/Mortgagee/${id}`] as const;
    }

    
export const useMortgageeGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useMortgageeGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMortgageeGetQueryKey(id);

  const mortgageeGet =  useMortgageeGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useMortgageeGetHook>>>> = ({ signal }) => mortgageeGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type MortgageeGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useMortgageeGetHook>>>>
export type MortgageeGetQueryError = unknown

export const useMortgageeGet = <TData = Awaited<ReturnType<ReturnType<typeof useMortgageeGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMortgageeGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useMortgageeGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useOccupancyTypeGetAllOccupancyTypeHook = () => {
        const occupancyTypeGetAllOccupancyType = useCustomInstance<DomainModelBenchmarkOccupancyType[]>();

        return (
    
 signal?: AbortSignal
) => {
        return occupancyTypeGetAllOccupancyType(
          {url: `/api/OccupancyType/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getOccupancyTypeGetAllOccupancyTypeQueryKey = () => {
    return [`/api/OccupancyType/getAll`] as const;
    }

    
export const useOccupancyTypeGetAllOccupancyTypeQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetAllOccupancyTypeHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetAllOccupancyTypeHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOccupancyTypeGetAllOccupancyTypeQueryKey();

  const occupancyTypeGetAllOccupancyType =  useOccupancyTypeGetAllOccupancyTypeHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetAllOccupancyTypeHook>>>> = ({ signal }) => occupancyTypeGetAllOccupancyType(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetAllOccupancyTypeHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type OccupancyTypeGetAllOccupancyTypeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetAllOccupancyTypeHook>>>>
export type OccupancyTypeGetAllOccupancyTypeQueryError = unknown

export const useOccupancyTypeGetAllOccupancyType = <TData = Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetAllOccupancyTypeHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetAllOccupancyTypeHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useOccupancyTypeGetAllOccupancyTypeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useOccupancyTypeGetHook = () => {
        const occupancyTypeGet = useCustomInstance<DomainModelBenchmarkOccupancyType>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return occupancyTypeGet(
          {url: `/api/OccupancyType/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getOccupancyTypeGetQueryKey = (id: number,) => {
    return [`/api/OccupancyType/get/${id}`] as const;
    }

    
export const useOccupancyTypeGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOccupancyTypeGetQueryKey(id);

  const occupancyTypeGet =  useOccupancyTypeGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetHook>>>> = ({ signal }) => occupancyTypeGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type OccupancyTypeGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetHook>>>>
export type OccupancyTypeGetQueryError = unknown

export const useOccupancyTypeGet = <TData = Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useOccupancyTypeGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useOccupancyTypeGetAllOccupancyTypeByStatusHook = () => {
        const occupancyTypeGetAllOccupancyTypeByStatus = useCustomInstance<DomainModelBenchmarkOccupancyType[]>();

        return (
    statusId: number,
 signal?: AbortSignal
) => {
        return occupancyTypeGetAllOccupancyTypeByStatus(
          {url: `/api/statuses/${statusId}/OccupancyType`, method: 'GET', signal
    },
          );
        }
      }
    

export const getOccupancyTypeGetAllOccupancyTypeByStatusQueryKey = (statusId: number,) => {
    return [`/api/statuses/${statusId}/OccupancyType`] as const;
    }

    
export const useOccupancyTypeGetAllOccupancyTypeByStatusQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetAllOccupancyTypeByStatusHook>>>, TError = unknown>(statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetAllOccupancyTypeByStatusHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOccupancyTypeGetAllOccupancyTypeByStatusQueryKey(statusId);

  const occupancyTypeGetAllOccupancyTypeByStatus =  useOccupancyTypeGetAllOccupancyTypeByStatusHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetAllOccupancyTypeByStatusHook>>>> = ({ signal }) => occupancyTypeGetAllOccupancyTypeByStatus(statusId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(statusId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetAllOccupancyTypeByStatusHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type OccupancyTypeGetAllOccupancyTypeByStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetAllOccupancyTypeByStatusHook>>>>
export type OccupancyTypeGetAllOccupancyTypeByStatusQueryError = unknown

export const useOccupancyTypeGetAllOccupancyTypeByStatus = <TData = Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetAllOccupancyTypeByStatusHook>>>, TError = unknown>(
 statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetAllOccupancyTypeByStatusHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useOccupancyTypeGetAllOccupancyTypeByStatusQueryOptions(statusId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useOccupancyTypeGetOccupancyTypeByCustomerIdHook = () => {
        const occupancyTypeGetOccupancyTypeByCustomerId = useCustomInstance<DomainModelBenchmarkOccupancyType[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return occupancyTypeGetOccupancyTypeByCustomerId(
          {url: `/api/customers/${customerId}/OccupancyType`, method: 'GET', signal
    },
          );
        }
      }
    

export const getOccupancyTypeGetOccupancyTypeByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/OccupancyType`] as const;
    }

    
export const useOccupancyTypeGetOccupancyTypeByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetOccupancyTypeByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetOccupancyTypeByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOccupancyTypeGetOccupancyTypeByCustomerIdQueryKey(customerId);

  const occupancyTypeGetOccupancyTypeByCustomerId =  useOccupancyTypeGetOccupancyTypeByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetOccupancyTypeByCustomerIdHook>>>> = ({ signal }) => occupancyTypeGetOccupancyTypeByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetOccupancyTypeByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type OccupancyTypeGetOccupancyTypeByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetOccupancyTypeByCustomerIdHook>>>>
export type OccupancyTypeGetOccupancyTypeByCustomerIdQueryError = unknown

export const useOccupancyTypeGetOccupancyTypeByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetOccupancyTypeByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetOccupancyTypeByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useOccupancyTypeGetOccupancyTypeByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useOccupancyTypePostOccupancyTypeHook = () => {
        const occupancyTypePostOccupancyType = useCustomInstance<DomainModelBenchmarkOccupancyType>();

        return (
    domainModelBenchmarkOccupancyTypeBody: DomainModelBenchmarkOccupancyTypeBody,
 ) => {
        return occupancyTypePostOccupancyType(
          {url: `/api/OccupancyType/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkOccupancyTypeBody
    },
          );
        }
      }
    


export const useOccupancyTypePostOccupancyTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypePostOccupancyTypeHook>>>, TError,{data: DomainModelBenchmarkOccupancyTypeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypePostOccupancyTypeHook>>>, TError,{data: DomainModelBenchmarkOccupancyTypeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const occupancyTypePostOccupancyType =  useOccupancyTypePostOccupancyTypeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useOccupancyTypePostOccupancyTypeHook>>>, {data: DomainModelBenchmarkOccupancyTypeBody}> = (props) => {
          const {data} = props ?? {};

          return  occupancyTypePostOccupancyType(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type OccupancyTypePostOccupancyTypeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useOccupancyTypePostOccupancyTypeHook>>>>
    export type OccupancyTypePostOccupancyTypeMutationBody = DomainModelBenchmarkOccupancyTypeBody
    export type OccupancyTypePostOccupancyTypeMutationError = unknown

    export const useOccupancyTypePostOccupancyType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypePostOccupancyTypeHook>>>, TError,{data: DomainModelBenchmarkOccupancyTypeBody}, TContext>, }
) => {

      const mutationOptions = useOccupancyTypePostOccupancyTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useOccupancyTypeRateOccupancyTypeHook = () => {
        const occupancyTypeRateOccupancyType = useCustomInstance<DomainModelBenchmarkOccupancyType>();

        return (
    domainModelBenchmarkOccupancyTypeBody: DomainModelBenchmarkOccupancyTypeBody,
 ) => {
        return occupancyTypeRateOccupancyType(
          {url: `/api/OccupancyType/rate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkOccupancyTypeBody
    },
          );
        }
      }
    


export const useOccupancyTypeRateOccupancyTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeRateOccupancyTypeHook>>>, TError,{data: DomainModelBenchmarkOccupancyTypeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeRateOccupancyTypeHook>>>, TError,{data: DomainModelBenchmarkOccupancyTypeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const occupancyTypeRateOccupancyType =  useOccupancyTypeRateOccupancyTypeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeRateOccupancyTypeHook>>>, {data: DomainModelBenchmarkOccupancyTypeBody}> = (props) => {
          const {data} = props ?? {};

          return  occupancyTypeRateOccupancyType(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type OccupancyTypeRateOccupancyTypeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeRateOccupancyTypeHook>>>>
    export type OccupancyTypeRateOccupancyTypeMutationBody = DomainModelBenchmarkOccupancyTypeBody
    export type OccupancyTypeRateOccupancyTypeMutationError = unknown

    export const useOccupancyTypeRateOccupancyType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeRateOccupancyTypeHook>>>, TError,{data: DomainModelBenchmarkOccupancyTypeBody}, TContext>, }
) => {

      const mutationOptions = useOccupancyTypeRateOccupancyTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useOccupancyTypePutOccupancyTypeHook = () => {
        const occupancyTypePutOccupancyType = useCustomInstance<DomainModelBenchmarkOccupancyType>();

        return (
    domainModelBenchmarkOccupancyTypeBody: DomainModelBenchmarkOccupancyTypeBody,
 ) => {
        return occupancyTypePutOccupancyType(
          {url: `/api/OccupancyType/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkOccupancyTypeBody
    },
          );
        }
      }
    


export const useOccupancyTypePutOccupancyTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypePutOccupancyTypeHook>>>, TError,{data: DomainModelBenchmarkOccupancyTypeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypePutOccupancyTypeHook>>>, TError,{data: DomainModelBenchmarkOccupancyTypeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const occupancyTypePutOccupancyType =  useOccupancyTypePutOccupancyTypeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useOccupancyTypePutOccupancyTypeHook>>>, {data: DomainModelBenchmarkOccupancyTypeBody}> = (props) => {
          const {data} = props ?? {};

          return  occupancyTypePutOccupancyType(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type OccupancyTypePutOccupancyTypeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useOccupancyTypePutOccupancyTypeHook>>>>
    export type OccupancyTypePutOccupancyTypeMutationBody = DomainModelBenchmarkOccupancyTypeBody
    export type OccupancyTypePutOccupancyTypeMutationError = unknown

    export const useOccupancyTypePutOccupancyType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypePutOccupancyTypeHook>>>, TError,{data: DomainModelBenchmarkOccupancyTypeBody}, TContext>, }
) => {

      const mutationOptions = useOccupancyTypePutOccupancyTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useOccupancyTypeDeleteOccupancyTypeHook = () => {
        const occupancyTypeDeleteOccupancyType = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return occupancyTypeDeleteOccupancyType(
          {url: `/api/OccupancyType/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getOccupancyTypeDeleteOccupancyTypeQueryKey = (id: number,) => {
    return [`/api/OccupancyType/delete/${id}`] as const;
    }

    
export const useOccupancyTypeDeleteOccupancyTypeQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useOccupancyTypeDeleteOccupancyTypeHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeDeleteOccupancyTypeHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOccupancyTypeDeleteOccupancyTypeQueryKey(id);

  const occupancyTypeDeleteOccupancyType =  useOccupancyTypeDeleteOccupancyTypeHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeDeleteOccupancyTypeHook>>>> = ({ signal }) => occupancyTypeDeleteOccupancyType(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeDeleteOccupancyTypeHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type OccupancyTypeDeleteOccupancyTypeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeDeleteOccupancyTypeHook>>>>
export type OccupancyTypeDeleteOccupancyTypeQueryError = unknown

export const useOccupancyTypeDeleteOccupancyType = <TData = Awaited<ReturnType<ReturnType<typeof useOccupancyTypeDeleteOccupancyTypeHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeDeleteOccupancyTypeHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useOccupancyTypeDeleteOccupancyTypeQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useOccupancyTypeUpdateOccupancyTypeHook = () => {
        const occupancyTypeUpdateOccupancyType = useCustomInstance<DomainModelBenchmarkOccupancyType[]>();

        return (
    domainModelBenchmarkOccupancyType: DomainModelBenchmarkOccupancyType[],
 ) => {
        return occupancyTypeUpdateOccupancyType(
          {url: `/api/OccupancyType/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkOccupancyType
    },
          );
        }
      }
    


export const useOccupancyTypeUpdateOccupancyTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeUpdateOccupancyTypeHook>>>, TError,{data: DomainModelBenchmarkOccupancyType[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeUpdateOccupancyTypeHook>>>, TError,{data: DomainModelBenchmarkOccupancyType[]}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const occupancyTypeUpdateOccupancyType =  useOccupancyTypeUpdateOccupancyTypeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeUpdateOccupancyTypeHook>>>, {data: DomainModelBenchmarkOccupancyType[]}> = (props) => {
          const {data} = props ?? {};

          return  occupancyTypeUpdateOccupancyType(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type OccupancyTypeUpdateOccupancyTypeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeUpdateOccupancyTypeHook>>>>
    export type OccupancyTypeUpdateOccupancyTypeMutationBody = DomainModelBenchmarkOccupancyType[]
    export type OccupancyTypeUpdateOccupancyTypeMutationError = unknown

    export const useOccupancyTypeUpdateOccupancyType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeUpdateOccupancyTypeHook>>>, TError,{data: DomainModelBenchmarkOccupancyType[]}, TContext>, }
) => {

      const mutationOptions = useOccupancyTypeUpdateOccupancyTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useOccupancyTypeGetAllOccupancyTypeWithFiltersHook = () => {
        const occupancyTypeGetAllOccupancyTypeWithFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkOccupancyType>();

        return (
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return occupancyTypeGetAllOccupancyTypeWithFilters(
          {url: `/api/OccupancyType/GetAllOccupancyTypeWithFilters/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getOccupancyTypeGetAllOccupancyTypeWithFiltersQueryKey = (startIndex: number,
    endIndex: number,) => {
    return [`/api/OccupancyType/GetAllOccupancyTypeWithFilters/${startIndex}/${endIndex}`] as const;
    }

    
export const useOccupancyTypeGetAllOccupancyTypeWithFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetAllOccupancyTypeWithFiltersHook>>>, TError = unknown>(startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetAllOccupancyTypeWithFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOccupancyTypeGetAllOccupancyTypeWithFiltersQueryKey(startIndex,endIndex);

  const occupancyTypeGetAllOccupancyTypeWithFilters =  useOccupancyTypeGetAllOccupancyTypeWithFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetAllOccupancyTypeWithFiltersHook>>>> = ({ signal }) => occupancyTypeGetAllOccupancyTypeWithFilters(startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetAllOccupancyTypeWithFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type OccupancyTypeGetAllOccupancyTypeWithFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetAllOccupancyTypeWithFiltersHook>>>>
export type OccupancyTypeGetAllOccupancyTypeWithFiltersQueryError = unknown

export const useOccupancyTypeGetAllOccupancyTypeWithFilters = <TData = Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetAllOccupancyTypeWithFiltersHook>>>, TError = unknown>(
 startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetAllOccupancyTypeWithFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useOccupancyTypeGetAllOccupancyTypeWithFiltersQueryOptions(startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useOccupancyTypeGetOccupancyTypeByNameHook = () => {
        const occupancyTypeGetOccupancyTypeByName = useCustomInstance<DomainModelBenchmarkOccupancyType>();

        return (
    params: OccupancyTypeGetOccupancyTypeByNameParams,
 signal?: AbortSignal
) => {
        return occupancyTypeGetOccupancyTypeByName(
          {url: `/api/OccupancyType`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getOccupancyTypeGetOccupancyTypeByNameQueryKey = (params: OccupancyTypeGetOccupancyTypeByNameParams,) => {
    return [`/api/OccupancyType`, ...(params ? [params]: [])] as const;
    }

    
export const useOccupancyTypeGetOccupancyTypeByNameQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetOccupancyTypeByNameHook>>>, TError = unknown>(params: OccupancyTypeGetOccupancyTypeByNameParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetOccupancyTypeByNameHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOccupancyTypeGetOccupancyTypeByNameQueryKey(params);

  const occupancyTypeGetOccupancyTypeByName =  useOccupancyTypeGetOccupancyTypeByNameHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetOccupancyTypeByNameHook>>>> = ({ signal }) => occupancyTypeGetOccupancyTypeByName(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetOccupancyTypeByNameHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type OccupancyTypeGetOccupancyTypeByNameQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetOccupancyTypeByNameHook>>>>
export type OccupancyTypeGetOccupancyTypeByNameQueryError = unknown

export const useOccupancyTypeGetOccupancyTypeByName = <TData = Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetOccupancyTypeByNameHook>>>, TError = unknown>(
 params: OccupancyTypeGetOccupancyTypeByNameParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useOccupancyTypeGetOccupancyTypeByNameHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useOccupancyTypeGetOccupancyTypeByNameQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePaymentMethodGetAllPaymentMethodsHook = () => {
        const paymentMethodGetAllPaymentMethods = useCustomInstance<DomainModelBenchmarkPaymentMethod[]>();

        return (
    
 signal?: AbortSignal
) => {
        return paymentMethodGetAllPaymentMethods(
          {url: `/api/PaymentMethod/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPaymentMethodGetAllPaymentMethodsQueryKey = () => {
    return [`/api/PaymentMethod/getAll`] as const;
    }

    
export const usePaymentMethodGetAllPaymentMethodsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePaymentMethodGetAllPaymentMethodsHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePaymentMethodGetAllPaymentMethodsHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPaymentMethodGetAllPaymentMethodsQueryKey();

  const paymentMethodGetAllPaymentMethods =  usePaymentMethodGetAllPaymentMethodsHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePaymentMethodGetAllPaymentMethodsHook>>>> = ({ signal }) => paymentMethodGetAllPaymentMethods(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePaymentMethodGetAllPaymentMethodsHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PaymentMethodGetAllPaymentMethodsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePaymentMethodGetAllPaymentMethodsHook>>>>
export type PaymentMethodGetAllPaymentMethodsQueryError = unknown

export const usePaymentMethodGetAllPaymentMethods = <TData = Awaited<ReturnType<ReturnType<typeof usePaymentMethodGetAllPaymentMethodsHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePaymentMethodGetAllPaymentMethodsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePaymentMethodGetAllPaymentMethodsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePaymentMethodPostPaymentMethodHook = () => {
        const paymentMethodPostPaymentMethod = useCustomInstance<DomainModelBenchmarkPaymentMethod>();

        return (
    domainModelBenchmarkPaymentMethodBody: DomainModelBenchmarkPaymentMethodBody,
 ) => {
        return paymentMethodPostPaymentMethod(
          {url: `/api/PaymentMethod/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPaymentMethodBody
    },
          );
        }
      }
    


export const usePaymentMethodPostPaymentMethodMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentMethodPostPaymentMethodHook>>>, TError,{data: DomainModelBenchmarkPaymentMethodBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentMethodPostPaymentMethodHook>>>, TError,{data: DomainModelBenchmarkPaymentMethodBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const paymentMethodPostPaymentMethod =  usePaymentMethodPostPaymentMethodHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePaymentMethodPostPaymentMethodHook>>>, {data: DomainModelBenchmarkPaymentMethodBody}> = (props) => {
          const {data} = props ?? {};

          return  paymentMethodPostPaymentMethod(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PaymentMethodPostPaymentMethodMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePaymentMethodPostPaymentMethodHook>>>>
    export type PaymentMethodPostPaymentMethodMutationBody = DomainModelBenchmarkPaymentMethodBody
    export type PaymentMethodPostPaymentMethodMutationError = unknown

    export const usePaymentMethodPostPaymentMethod = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentMethodPostPaymentMethodHook>>>, TError,{data: DomainModelBenchmarkPaymentMethodBody}, TContext>, }
) => {

      const mutationOptions = usePaymentMethodPostPaymentMethodMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePaymentMethodPutPaymentMethodHook = () => {
        const paymentMethodPutPaymentMethod = useCustomInstance<DomainModelBenchmarkPaymentMethod>();

        return (
    domainModelBenchmarkPaymentMethodBody: DomainModelBenchmarkPaymentMethodBody,
 ) => {
        return paymentMethodPutPaymentMethod(
          {url: `/api/PaymentMethod/edit`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPaymentMethodBody
    },
          );
        }
      }
    


export const usePaymentMethodPutPaymentMethodMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentMethodPutPaymentMethodHook>>>, TError,{data: DomainModelBenchmarkPaymentMethodBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentMethodPutPaymentMethodHook>>>, TError,{data: DomainModelBenchmarkPaymentMethodBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const paymentMethodPutPaymentMethod =  usePaymentMethodPutPaymentMethodHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePaymentMethodPutPaymentMethodHook>>>, {data: DomainModelBenchmarkPaymentMethodBody}> = (props) => {
          const {data} = props ?? {};

          return  paymentMethodPutPaymentMethod(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PaymentMethodPutPaymentMethodMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePaymentMethodPutPaymentMethodHook>>>>
    export type PaymentMethodPutPaymentMethodMutationBody = DomainModelBenchmarkPaymentMethodBody
    export type PaymentMethodPutPaymentMethodMutationError = unknown

    export const usePaymentMethodPutPaymentMethod = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentMethodPutPaymentMethodHook>>>, TError,{data: DomainModelBenchmarkPaymentMethodBody}, TContext>, }
) => {

      const mutationOptions = usePaymentMethodPutPaymentMethodMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePaymentMethodDeletePaymentMethodHook = () => {
        const paymentMethodDeletePaymentMethod = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return paymentMethodDeletePaymentMethod(
          {url: `/api/PaymentMethod/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPaymentMethodDeletePaymentMethodQueryKey = (id: number,) => {
    return [`/api/PaymentMethod/delete/${id}`] as const;
    }

    
export const usePaymentMethodDeletePaymentMethodQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePaymentMethodDeletePaymentMethodHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePaymentMethodDeletePaymentMethodHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPaymentMethodDeletePaymentMethodQueryKey(id);

  const paymentMethodDeletePaymentMethod =  usePaymentMethodDeletePaymentMethodHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePaymentMethodDeletePaymentMethodHook>>>> = ({ signal }) => paymentMethodDeletePaymentMethod(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePaymentMethodDeletePaymentMethodHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PaymentMethodDeletePaymentMethodQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePaymentMethodDeletePaymentMethodHook>>>>
export type PaymentMethodDeletePaymentMethodQueryError = unknown

export const usePaymentMethodDeletePaymentMethod = <TData = Awaited<ReturnType<ReturnType<typeof usePaymentMethodDeletePaymentMethodHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePaymentMethodDeletePaymentMethodHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePaymentMethodDeletePaymentMethodQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePaymentMethodGetHook = () => {
        const paymentMethodGet = useCustomInstance<DomainModelBenchmarkPaymentMethod>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return paymentMethodGet(
          {url: `/api/PaymentMethod/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPaymentMethodGetQueryKey = (id: number,) => {
    return [`/api/PaymentMethod/${id}`] as const;
    }

    
export const usePaymentMethodGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePaymentMethodGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePaymentMethodGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPaymentMethodGetQueryKey(id);

  const paymentMethodGet =  usePaymentMethodGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePaymentMethodGetHook>>>> = ({ signal }) => paymentMethodGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePaymentMethodGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PaymentMethodGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePaymentMethodGetHook>>>>
export type PaymentMethodGetQueryError = unknown

export const usePaymentMethodGet = <TData = Awaited<ReturnType<ReturnType<typeof usePaymentMethodGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePaymentMethodGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePaymentMethodGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePaymentProcessingAuthorizePaymentCreditCardHook = () => {
        const paymentProcessingAuthorizePaymentCreditCard = useCustomInstance<string>();

        return (
    agentId: number,
    customerID: number,
    tokenId: string,
    domainModelPaymentProcessBody: DomainModelPaymentProcessBody,
 ) => {
        return paymentProcessingAuthorizePaymentCreditCard(
          {url: `/api/PaymentProcessing/AuthorizePaymentCreditCard/${agentId}/${customerID}/${tokenId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelPaymentProcessBody
    },
          );
        }
      }
    


export const usePaymentProcessingAuthorizePaymentCreditCardMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingAuthorizePaymentCreditCardHook>>>, TError,{agentId: number;customerID: number;tokenId: string;data: DomainModelPaymentProcessBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingAuthorizePaymentCreditCardHook>>>, TError,{agentId: number;customerID: number;tokenId: string;data: DomainModelPaymentProcessBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const paymentProcessingAuthorizePaymentCreditCard =  usePaymentProcessingAuthorizePaymentCreditCardHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingAuthorizePaymentCreditCardHook>>>, {agentId: number;customerID: number;tokenId: string;data: DomainModelPaymentProcessBody}> = (props) => {
          const {agentId,customerID,tokenId,data} = props ?? {};

          return  paymentProcessingAuthorizePaymentCreditCard(agentId,customerID,tokenId,data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PaymentProcessingAuthorizePaymentCreditCardMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingAuthorizePaymentCreditCardHook>>>>
    export type PaymentProcessingAuthorizePaymentCreditCardMutationBody = DomainModelPaymentProcessBody
    export type PaymentProcessingAuthorizePaymentCreditCardMutationError = unknown

    export const usePaymentProcessingAuthorizePaymentCreditCard = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingAuthorizePaymentCreditCardHook>>>, TError,{agentId: number;customerID: number;tokenId: string;data: DomainModelPaymentProcessBody}, TContext>, }
) => {

      const mutationOptions = usePaymentProcessingAuthorizePaymentCreditCardMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePaymentProcessingCustomerInsureInvestorsPaymentCreditCardHook = () => {
        const paymentProcessingCustomerInsureInvestorsPaymentCreditCard = useCustomInstance<string>();

        return (
    domainModelPaymentProcessBody: DomainModelPaymentProcessBody,
 ) => {
        return paymentProcessingCustomerInsureInvestorsPaymentCreditCard(
          {url: `/api/PaymentProcessing/CustomerInsureInvestorsPaymentCreditCard`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelPaymentProcessBody
    },
          );
        }
      }
    


export const usePaymentProcessingCustomerInsureInvestorsPaymentCreditCardMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingCustomerInsureInvestorsPaymentCreditCardHook>>>, TError,{data: DomainModelPaymentProcessBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingCustomerInsureInvestorsPaymentCreditCardHook>>>, TError,{data: DomainModelPaymentProcessBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const paymentProcessingCustomerInsureInvestorsPaymentCreditCard =  usePaymentProcessingCustomerInsureInvestorsPaymentCreditCardHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingCustomerInsureInvestorsPaymentCreditCardHook>>>, {data: DomainModelPaymentProcessBody}> = (props) => {
          const {data} = props ?? {};

          return  paymentProcessingCustomerInsureInvestorsPaymentCreditCard(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PaymentProcessingCustomerInsureInvestorsPaymentCreditCardMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingCustomerInsureInvestorsPaymentCreditCardHook>>>>
    export type PaymentProcessingCustomerInsureInvestorsPaymentCreditCardMutationBody = DomainModelPaymentProcessBody
    export type PaymentProcessingCustomerInsureInvestorsPaymentCreditCardMutationError = unknown

    export const usePaymentProcessingCustomerInsureInvestorsPaymentCreditCard = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingCustomerInsureInvestorsPaymentCreditCardHook>>>, TError,{data: DomainModelPaymentProcessBody}, TContext>, }
) => {

      const mutationOptions = usePaymentProcessingCustomerInsureInvestorsPaymentCreditCardMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePaymentProcessingCustomerInsureInvestorsPaymentBankAccountHook = () => {
        const paymentProcessingCustomerInsureInvestorsPaymentBankAccount = useCustomInstance<string>();

        return (
    domainModelPaymentProcessBody: DomainModelPaymentProcessBody,
 ) => {
        return paymentProcessingCustomerInsureInvestorsPaymentBankAccount(
          {url: `/api/PaymentProcessing/CustomerInsureInvestorsPaymentBankAccount`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelPaymentProcessBody
    },
          );
        }
      }
    


export const usePaymentProcessingCustomerInsureInvestorsPaymentBankAccountMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingCustomerInsureInvestorsPaymentBankAccountHook>>>, TError,{data: DomainModelPaymentProcessBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingCustomerInsureInvestorsPaymentBankAccountHook>>>, TError,{data: DomainModelPaymentProcessBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const paymentProcessingCustomerInsureInvestorsPaymentBankAccount =  usePaymentProcessingCustomerInsureInvestorsPaymentBankAccountHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingCustomerInsureInvestorsPaymentBankAccountHook>>>, {data: DomainModelPaymentProcessBody}> = (props) => {
          const {data} = props ?? {};

          return  paymentProcessingCustomerInsureInvestorsPaymentBankAccount(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PaymentProcessingCustomerInsureInvestorsPaymentBankAccountMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingCustomerInsureInvestorsPaymentBankAccountHook>>>>
    export type PaymentProcessingCustomerInsureInvestorsPaymentBankAccountMutationBody = DomainModelPaymentProcessBody
    export type PaymentProcessingCustomerInsureInvestorsPaymentBankAccountMutationError = unknown

    export const usePaymentProcessingCustomerInsureInvestorsPaymentBankAccount = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingCustomerInsureInvestorsPaymentBankAccountHook>>>, TError,{data: DomainModelPaymentProcessBody}, TContext>, }
) => {

      const mutationOptions = usePaymentProcessingCustomerInsureInvestorsPaymentBankAccountMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePaymentProcessingAuthorizePaymentCreditCardCustomerHook = () => {
        const paymentProcessingAuthorizePaymentCreditCardCustomer = useCustomInstance<string>();

        return (
    customerID: number,
    tokenId: string,
    domainModelPaymentProcessBody: DomainModelPaymentProcessBody,
 ) => {
        return paymentProcessingAuthorizePaymentCreditCardCustomer(
          {url: `/api/PaymentProcessing/AuthorizePaymentCreditCardCustomer/${customerID}/${tokenId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelPaymentProcessBody
    },
          );
        }
      }
    


export const usePaymentProcessingAuthorizePaymentCreditCardCustomerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingAuthorizePaymentCreditCardCustomerHook>>>, TError,{customerID: number;tokenId: string;data: DomainModelPaymentProcessBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingAuthorizePaymentCreditCardCustomerHook>>>, TError,{customerID: number;tokenId: string;data: DomainModelPaymentProcessBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const paymentProcessingAuthorizePaymentCreditCardCustomer =  usePaymentProcessingAuthorizePaymentCreditCardCustomerHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingAuthorizePaymentCreditCardCustomerHook>>>, {customerID: number;tokenId: string;data: DomainModelPaymentProcessBody}> = (props) => {
          const {customerID,tokenId,data} = props ?? {};

          return  paymentProcessingAuthorizePaymentCreditCardCustomer(customerID,tokenId,data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PaymentProcessingAuthorizePaymentCreditCardCustomerMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingAuthorizePaymentCreditCardCustomerHook>>>>
    export type PaymentProcessingAuthorizePaymentCreditCardCustomerMutationBody = DomainModelPaymentProcessBody
    export type PaymentProcessingAuthorizePaymentCreditCardCustomerMutationError = unknown

    export const usePaymentProcessingAuthorizePaymentCreditCardCustomer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingAuthorizePaymentCreditCardCustomerHook>>>, TError,{customerID: number;tokenId: string;data: DomainModelPaymentProcessBody}, TContext>, }
) => {

      const mutationOptions = usePaymentProcessingAuthorizePaymentCreditCardCustomerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePaymentProcessingAuthorizePaymentBankAccountHook = () => {
        const paymentProcessingAuthorizePaymentBankAccount = useCustomInstance<string>();

        return (
    agentId: number,
    customerID: number,
    tokenId: string,
    domainModelPaymentProcessBody: DomainModelPaymentProcessBody,
 ) => {
        return paymentProcessingAuthorizePaymentBankAccount(
          {url: `/api/PaymentProcessing/AuthorizePaymentBankAccount/${agentId}/${customerID}/${tokenId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelPaymentProcessBody
    },
          );
        }
      }
    


export const usePaymentProcessingAuthorizePaymentBankAccountMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingAuthorizePaymentBankAccountHook>>>, TError,{agentId: number;customerID: number;tokenId: string;data: DomainModelPaymentProcessBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingAuthorizePaymentBankAccountHook>>>, TError,{agentId: number;customerID: number;tokenId: string;data: DomainModelPaymentProcessBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const paymentProcessingAuthorizePaymentBankAccount =  usePaymentProcessingAuthorizePaymentBankAccountHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingAuthorizePaymentBankAccountHook>>>, {agentId: number;customerID: number;tokenId: string;data: DomainModelPaymentProcessBody}> = (props) => {
          const {agentId,customerID,tokenId,data} = props ?? {};

          return  paymentProcessingAuthorizePaymentBankAccount(agentId,customerID,tokenId,data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PaymentProcessingAuthorizePaymentBankAccountMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingAuthorizePaymentBankAccountHook>>>>
    export type PaymentProcessingAuthorizePaymentBankAccountMutationBody = DomainModelPaymentProcessBody
    export type PaymentProcessingAuthorizePaymentBankAccountMutationError = unknown

    export const usePaymentProcessingAuthorizePaymentBankAccount = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingAuthorizePaymentBankAccountHook>>>, TError,{agentId: number;customerID: number;tokenId: string;data: DomainModelPaymentProcessBody}, TContext>, }
) => {

      const mutationOptions = usePaymentProcessingAuthorizePaymentBankAccountMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePaymentProcessingAuthorizePaymentCustomerBankAccountHook = () => {
        const paymentProcessingAuthorizePaymentCustomerBankAccount = useCustomInstance<string>();

        return (
    customerID: number,
    tokenId: string,
    domainModelPaymentProcessBody: DomainModelPaymentProcessBody,
 ) => {
        return paymentProcessingAuthorizePaymentCustomerBankAccount(
          {url: `/api/PaymentProcessing/AuthorizePaymentCustomerBankAccount/${customerID}/${tokenId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelPaymentProcessBody
    },
          );
        }
      }
    


export const usePaymentProcessingAuthorizePaymentCustomerBankAccountMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingAuthorizePaymentCustomerBankAccountHook>>>, TError,{customerID: number;tokenId: string;data: DomainModelPaymentProcessBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingAuthorizePaymentCustomerBankAccountHook>>>, TError,{customerID: number;tokenId: string;data: DomainModelPaymentProcessBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const paymentProcessingAuthorizePaymentCustomerBankAccount =  usePaymentProcessingAuthorizePaymentCustomerBankAccountHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingAuthorizePaymentCustomerBankAccountHook>>>, {customerID: number;tokenId: string;data: DomainModelPaymentProcessBody}> = (props) => {
          const {customerID,tokenId,data} = props ?? {};

          return  paymentProcessingAuthorizePaymentCustomerBankAccount(customerID,tokenId,data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PaymentProcessingAuthorizePaymentCustomerBankAccountMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingAuthorizePaymentCustomerBankAccountHook>>>>
    export type PaymentProcessingAuthorizePaymentCustomerBankAccountMutationBody = DomainModelPaymentProcessBody
    export type PaymentProcessingAuthorizePaymentCustomerBankAccountMutationError = unknown

    export const usePaymentProcessingAuthorizePaymentCustomerBankAccount = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingAuthorizePaymentCustomerBankAccountHook>>>, TError,{customerID: number;tokenId: string;data: DomainModelPaymentProcessBody}, TContext>, }
) => {

      const mutationOptions = usePaymentProcessingAuthorizePaymentCustomerBankAccountMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePaymentProcessingRecurringPaymentCreateSubscriptionHook = () => {
        const paymentProcessingRecurringPaymentCreateSubscription = useCustomInstance<string>();

        return (
    agentId: number,
    customerID: number,
    domainModelRecurringSubscriptionBody: DomainModelRecurringSubscriptionBody,
 ) => {
        return paymentProcessingRecurringPaymentCreateSubscription(
          {url: `/api/PaymentProcessing/RecurringPaymentCreateSubscription/${agentId}/${customerID}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelRecurringSubscriptionBody
    },
          );
        }
      }
    


export const usePaymentProcessingRecurringPaymentCreateSubscriptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingRecurringPaymentCreateSubscriptionHook>>>, TError,{agentId: number;customerID: number;data: DomainModelRecurringSubscriptionBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingRecurringPaymentCreateSubscriptionHook>>>, TError,{agentId: number;customerID: number;data: DomainModelRecurringSubscriptionBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const paymentProcessingRecurringPaymentCreateSubscription =  usePaymentProcessingRecurringPaymentCreateSubscriptionHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingRecurringPaymentCreateSubscriptionHook>>>, {agentId: number;customerID: number;data: DomainModelRecurringSubscriptionBody}> = (props) => {
          const {agentId,customerID,data} = props ?? {};

          return  paymentProcessingRecurringPaymentCreateSubscription(agentId,customerID,data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PaymentProcessingRecurringPaymentCreateSubscriptionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingRecurringPaymentCreateSubscriptionHook>>>>
    export type PaymentProcessingRecurringPaymentCreateSubscriptionMutationBody = DomainModelRecurringSubscriptionBody
    export type PaymentProcessingRecurringPaymentCreateSubscriptionMutationError = unknown

    export const usePaymentProcessingRecurringPaymentCreateSubscription = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingRecurringPaymentCreateSubscriptionHook>>>, TError,{agentId: number;customerID: number;data: DomainModelRecurringSubscriptionBody}, TContext>, }
) => {

      const mutationOptions = usePaymentProcessingRecurringPaymentCreateSubscriptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePaymentProcessingRecurringPaymentCreateSubscriptionBankAccountHook = () => {
        const paymentProcessingRecurringPaymentCreateSubscriptionBankAccount = useCustomInstance<string>();

        return (
    agentId: number,
    customerID: number,
    domainModelRecurringSubscriptionBody: DomainModelRecurringSubscriptionBody,
 ) => {
        return paymentProcessingRecurringPaymentCreateSubscriptionBankAccount(
          {url: `/api/PaymentProcessing/RecurringPaymentCreateSubscriptionBankAccount/${agentId}/${customerID}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelRecurringSubscriptionBody
    },
          );
        }
      }
    


export const usePaymentProcessingRecurringPaymentCreateSubscriptionBankAccountMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingRecurringPaymentCreateSubscriptionBankAccountHook>>>, TError,{agentId: number;customerID: number;data: DomainModelRecurringSubscriptionBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingRecurringPaymentCreateSubscriptionBankAccountHook>>>, TError,{agentId: number;customerID: number;data: DomainModelRecurringSubscriptionBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const paymentProcessingRecurringPaymentCreateSubscriptionBankAccount =  usePaymentProcessingRecurringPaymentCreateSubscriptionBankAccountHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingRecurringPaymentCreateSubscriptionBankAccountHook>>>, {agentId: number;customerID: number;data: DomainModelRecurringSubscriptionBody}> = (props) => {
          const {agentId,customerID,data} = props ?? {};

          return  paymentProcessingRecurringPaymentCreateSubscriptionBankAccount(agentId,customerID,data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PaymentProcessingRecurringPaymentCreateSubscriptionBankAccountMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingRecurringPaymentCreateSubscriptionBankAccountHook>>>>
    export type PaymentProcessingRecurringPaymentCreateSubscriptionBankAccountMutationBody = DomainModelRecurringSubscriptionBody
    export type PaymentProcessingRecurringPaymentCreateSubscriptionBankAccountMutationError = unknown

    export const usePaymentProcessingRecurringPaymentCreateSubscriptionBankAccount = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingRecurringPaymentCreateSubscriptionBankAccountHook>>>, TError,{agentId: number;customerID: number;data: DomainModelRecurringSubscriptionBody}, TContext>, }
) => {

      const mutationOptions = usePaymentProcessingRecurringPaymentCreateSubscriptionBankAccountMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePaymentProcessingRefundTransactionHook = () => {
        const paymentProcessingRefundTransaction = useCustomInstance<string>();

        return (
    domainModelPaymentProcessTransactionBody: DomainModelPaymentProcessTransactionBody,
 ) => {
        return paymentProcessingRefundTransaction(
          {url: `/api/PaymentProcessing/RefundTransaction`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelPaymentProcessTransactionBody
    },
          );
        }
      }
    


export const usePaymentProcessingRefundTransactionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingRefundTransactionHook>>>, TError,{data: DomainModelPaymentProcessTransactionBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingRefundTransactionHook>>>, TError,{data: DomainModelPaymentProcessTransactionBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const paymentProcessingRefundTransaction =  usePaymentProcessingRefundTransactionHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingRefundTransactionHook>>>, {data: DomainModelPaymentProcessTransactionBody}> = (props) => {
          const {data} = props ?? {};

          return  paymentProcessingRefundTransaction(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PaymentProcessingRefundTransactionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingRefundTransactionHook>>>>
    export type PaymentProcessingRefundTransactionMutationBody = DomainModelPaymentProcessTransactionBody
    export type PaymentProcessingRefundTransactionMutationError = unknown

    export const usePaymentProcessingRefundTransaction = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingRefundTransactionHook>>>, TError,{data: DomainModelPaymentProcessTransactionBody}, TContext>, }
) => {

      const mutationOptions = usePaymentProcessingRefundTransactionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePaymentProcessingCurrentPaymentMethodTransactionHook = () => {
        const paymentProcessingCurrentPaymentMethodTransaction = useCustomInstance<string>();

        return (
    agentId: number,
    customerID: number,
    tokenId: string,
    recurringID: string,
    domainModelPaymentProcessBody: DomainModelPaymentProcessBody,
 ) => {
        return paymentProcessingCurrentPaymentMethodTransaction(
          {url: `/api/PaymentProcessing/CurrentPaymentMethodTransaction/${agentId}/${customerID}/${tokenId}/${recurringID}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelPaymentProcessBody
    },
          );
        }
      }
    


export const usePaymentProcessingCurrentPaymentMethodTransactionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingCurrentPaymentMethodTransactionHook>>>, TError,{agentId: number;customerID: number;tokenId: string;recurringID: string;data: DomainModelPaymentProcessBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingCurrentPaymentMethodTransactionHook>>>, TError,{agentId: number;customerID: number;tokenId: string;recurringID: string;data: DomainModelPaymentProcessBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const paymentProcessingCurrentPaymentMethodTransaction =  usePaymentProcessingCurrentPaymentMethodTransactionHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingCurrentPaymentMethodTransactionHook>>>, {agentId: number;customerID: number;tokenId: string;recurringID: string;data: DomainModelPaymentProcessBody}> = (props) => {
          const {agentId,customerID,tokenId,recurringID,data} = props ?? {};

          return  paymentProcessingCurrentPaymentMethodTransaction(agentId,customerID,tokenId,recurringID,data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PaymentProcessingCurrentPaymentMethodTransactionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingCurrentPaymentMethodTransactionHook>>>>
    export type PaymentProcessingCurrentPaymentMethodTransactionMutationBody = DomainModelPaymentProcessBody
    export type PaymentProcessingCurrentPaymentMethodTransactionMutationError = unknown

    export const usePaymentProcessingCurrentPaymentMethodTransaction = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingCurrentPaymentMethodTransactionHook>>>, TError,{agentId: number;customerID: number;tokenId: string;recurringID: string;data: DomainModelPaymentProcessBody}, TContext>, }
) => {

      const mutationOptions = usePaymentProcessingCurrentPaymentMethodTransactionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePaymentProcessingThanksEmailTemplateHook = () => {
        const paymentProcessingThanksEmailTemplate = useCustomInstance<string>();

        return (
    params: PaymentProcessingThanksEmailTemplateParams,
 ) => {
        return paymentProcessingThanksEmailTemplate(
          {url: `/api/PaymentProcessing`, method: 'POST',
        params
    },
          );
        }
      }
    


export const usePaymentProcessingThanksEmailTemplateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingThanksEmailTemplateHook>>>, TError,{params: PaymentProcessingThanksEmailTemplateParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingThanksEmailTemplateHook>>>, TError,{params: PaymentProcessingThanksEmailTemplateParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const paymentProcessingThanksEmailTemplate =  usePaymentProcessingThanksEmailTemplateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingThanksEmailTemplateHook>>>, {params: PaymentProcessingThanksEmailTemplateParams}> = (props) => {
          const {params} = props ?? {};

          return  paymentProcessingThanksEmailTemplate(params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PaymentProcessingThanksEmailTemplateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingThanksEmailTemplateHook>>>>
    
    export type PaymentProcessingThanksEmailTemplateMutationError = unknown

    export const usePaymentProcessingThanksEmailTemplate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePaymentProcessingThanksEmailTemplateHook>>>, TError,{params: PaymentProcessingThanksEmailTemplateParams}, TContext>, }
) => {

      const mutationOptions = usePaymentProcessingThanksEmailTemplateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePDFCreatorApplicationCompleteHook = () => {
        const pDFCreatorApplicationComplete = useCustomInstance<PDFCreatorApplicationComplete200One | PDFCreatorApplicationComplete200Two | PDFCreatorApplicationComplete200Three | PDFCreatorApplicationComplete200Four>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return pDFCreatorApplicationComplete(
          {url: `/api/PDFCreator/ApplicationComplete/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorApplicationCompleteQueryKey = (customerId: number,) => {
    return [`/api/PDFCreator/ApplicationComplete/${customerId}`] as const;
    }

    
export const usePDFCreatorApplicationCompleteQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorApplicationCompleteHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorApplicationCompleteHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorApplicationCompleteQueryKey(customerId);

  const pDFCreatorApplicationComplete =  usePDFCreatorApplicationCompleteHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorApplicationCompleteHook>>>> = ({ signal }) => pDFCreatorApplicationComplete(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorApplicationCompleteHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorApplicationCompleteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorApplicationCompleteHook>>>>
export type PDFCreatorApplicationCompleteQueryError = unknown

export const usePDFCreatorApplicationComplete = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorApplicationCompleteHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorApplicationCompleteHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorApplicationCompleteQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorWebApplicationCompleteGenerateAndSendHook = () => {
        const pDFCreatorWebApplicationCompleteGenerateAndSend = useCustomInstance<PDFCreatorWebApplicationCompleteGenerateAndSend200One | PDFCreatorWebApplicationCompleteGenerateAndSend200Two | PDFCreatorWebApplicationCompleteGenerateAndSend200Three | PDFCreatorWebApplicationCompleteGenerateAndSend200Four>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return pDFCreatorWebApplicationCompleteGenerateAndSend(
          {url: `/api/PDFCreator/WebApplicationComplete/GeneratePropposal/Send/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorWebApplicationCompleteGenerateAndSendQueryKey = (customerId: number,) => {
    return [`/api/PDFCreator/WebApplicationComplete/GeneratePropposal/Send/${customerId}`] as const;
    }

    
export const usePDFCreatorWebApplicationCompleteGenerateAndSendQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorWebApplicationCompleteGenerateAndSendHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorWebApplicationCompleteGenerateAndSendHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorWebApplicationCompleteGenerateAndSendQueryKey(customerId);

  const pDFCreatorWebApplicationCompleteGenerateAndSend =  usePDFCreatorWebApplicationCompleteGenerateAndSendHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorWebApplicationCompleteGenerateAndSendHook>>>> = ({ signal }) => pDFCreatorWebApplicationCompleteGenerateAndSend(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorWebApplicationCompleteGenerateAndSendHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorWebApplicationCompleteGenerateAndSendQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorWebApplicationCompleteGenerateAndSendHook>>>>
export type PDFCreatorWebApplicationCompleteGenerateAndSendQueryError = unknown

export const usePDFCreatorWebApplicationCompleteGenerateAndSend = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorWebApplicationCompleteGenerateAndSendHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorWebApplicationCompleteGenerateAndSendHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorWebApplicationCompleteGenerateAndSendQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorCancellationOfCoverageHook = () => {
        const pDFCreatorCancellationOfCoverage = useCustomInstance<PDFCreatorCancellationOfCoverage200One | PDFCreatorCancellationOfCoverage200Two | PDFCreatorCancellationOfCoverage200Three | PDFCreatorCancellationOfCoverage200Four>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return pDFCreatorCancellationOfCoverage(
          {url: `/api/PDFCreator/CancellationOfCoverage/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorCancellationOfCoverageQueryKey = (customerId: number,) => {
    return [`/api/PDFCreator/CancellationOfCoverage/${customerId}`] as const;
    }

    
export const usePDFCreatorCancellationOfCoverageQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorCancellationOfCoverageHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCancellationOfCoverageHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorCancellationOfCoverageQueryKey(customerId);

  const pDFCreatorCancellationOfCoverage =  usePDFCreatorCancellationOfCoverageHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCancellationOfCoverageHook>>>> = ({ signal }) => pDFCreatorCancellationOfCoverage(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCancellationOfCoverageHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorCancellationOfCoverageQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCancellationOfCoverageHook>>>>
export type PDFCreatorCancellationOfCoverageQueryError = unknown

export const usePDFCreatorCancellationOfCoverage = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorCancellationOfCoverageHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCancellationOfCoverageHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorCancellationOfCoverageQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorCustomerWelcomeHook = () => {
        const pDFCreatorCustomerWelcome = useCustomInstance<PDFCreatorCustomerWelcome200One | PDFCreatorCustomerWelcome200Two | PDFCreatorCustomerWelcome200Three | PDFCreatorCustomerWelcome200Four>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return pDFCreatorCustomerWelcome(
          {url: `/api/PDFCreator/CustomerWelcome/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorCustomerWelcomeQueryKey = (customerId: number,) => {
    return [`/api/PDFCreator/CustomerWelcome/${customerId}`] as const;
    }

    
export const usePDFCreatorCustomerWelcomeQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorCustomerWelcomeHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCustomerWelcomeHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorCustomerWelcomeQueryKey(customerId);

  const pDFCreatorCustomerWelcome =  usePDFCreatorCustomerWelcomeHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCustomerWelcomeHook>>>> = ({ signal }) => pDFCreatorCustomerWelcome(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCustomerWelcomeHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorCustomerWelcomeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCustomerWelcomeHook>>>>
export type PDFCreatorCustomerWelcomeQueryError = unknown

export const usePDFCreatorCustomerWelcome = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorCustomerWelcomeHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCustomerWelcomeHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorCustomerWelcomeQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorEndorsementCompletionHook = () => {
        const pDFCreatorEndorsementCompletion = useCustomInstance<PDFCreatorEndorsementCompletion200One | PDFCreatorEndorsementCompletion200Two | PDFCreatorEndorsementCompletion200Three | PDFCreatorEndorsementCompletion200Four>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return pDFCreatorEndorsementCompletion(
          {url: `/api/PDFCreator/EndorsementCompletion/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorEndorsementCompletionQueryKey = (customerId: number,) => {
    return [`/api/PDFCreator/EndorsementCompletion/${customerId}`] as const;
    }

    
export const usePDFCreatorEndorsementCompletionQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorEndorsementCompletionHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorEndorsementCompletionHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorEndorsementCompletionQueryKey(customerId);

  const pDFCreatorEndorsementCompletion =  usePDFCreatorEndorsementCompletionHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorEndorsementCompletionHook>>>> = ({ signal }) => pDFCreatorEndorsementCompletion(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorEndorsementCompletionHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorEndorsementCompletionQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorEndorsementCompletionHook>>>>
export type PDFCreatorEndorsementCompletionQueryError = unknown

export const usePDFCreatorEndorsementCompletion = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorEndorsementCompletionHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorEndorsementCompletionHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorEndorsementCompletionQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorNewLeadHook = () => {
        const pDFCreatorNewLead = useCustomInstance<PDFCreatorNewLead200One | PDFCreatorNewLead200Two | PDFCreatorNewLead200Three | PDFCreatorNewLead200Four>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return pDFCreatorNewLead(
          {url: `/api/PDFCreator/NewLead/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorNewLeadQueryKey = (customerId: number,) => {
    return [`/api/PDFCreator/NewLead/${customerId}`] as const;
    }

    
export const usePDFCreatorNewLeadQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorNewLeadHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorNewLeadHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorNewLeadQueryKey(customerId);

  const pDFCreatorNewLead =  usePDFCreatorNewLeadHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorNewLeadHook>>>> = ({ signal }) => pDFCreatorNewLead(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorNewLeadHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorNewLeadQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorNewLeadHook>>>>
export type PDFCreatorNewLeadQueryError = unknown

export const usePDFCreatorNewLead = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorNewLeadHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorNewLeadHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorNewLeadQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorNewQuoteRequestHook = () => {
        const pDFCreatorNewQuoteRequest = useCustomInstance<PDFCreatorNewQuoteRequest200One | PDFCreatorNewQuoteRequest200Two | PDFCreatorNewQuoteRequest200Three | PDFCreatorNewQuoteRequest200Four>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return pDFCreatorNewQuoteRequest(
          {url: `/api/PDFCreator/NewQuoteRequest/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorNewQuoteRequestQueryKey = (customerId: number,) => {
    return [`/api/PDFCreator/NewQuoteRequest/${customerId}`] as const;
    }

    
export const usePDFCreatorNewQuoteRequestQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorNewQuoteRequestHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorNewQuoteRequestHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorNewQuoteRequestQueryKey(customerId);

  const pDFCreatorNewQuoteRequest =  usePDFCreatorNewQuoteRequestHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorNewQuoteRequestHook>>>> = ({ signal }) => pDFCreatorNewQuoteRequest(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorNewQuoteRequestHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorNewQuoteRequestQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorNewQuoteRequestHook>>>>
export type PDFCreatorNewQuoteRequestQueryError = unknown

export const usePDFCreatorNewQuoteRequest = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorNewQuoteRequestHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorNewQuoteRequestHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorNewQuoteRequestQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorQuoteIntroToClientHook = () => {
        const pDFCreatorQuoteIntroToClient = useCustomInstance<PDFCreatorQuoteIntroToClient200One | PDFCreatorQuoteIntroToClient200Two | PDFCreatorQuoteIntroToClient200Three | PDFCreatorQuoteIntroToClient200Four>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return pDFCreatorQuoteIntroToClient(
          {url: `/api/PDFCreator/QuoteIntroToClient/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorQuoteIntroToClientQueryKey = (customerId: number,) => {
    return [`/api/PDFCreator/QuoteIntroToClient/${customerId}`] as const;
    }

    
export const usePDFCreatorQuoteIntroToClientQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorQuoteIntroToClientHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorQuoteIntroToClientHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorQuoteIntroToClientQueryKey(customerId);

  const pDFCreatorQuoteIntroToClient =  usePDFCreatorQuoteIntroToClientHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorQuoteIntroToClientHook>>>> = ({ signal }) => pDFCreatorQuoteIntroToClient(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorQuoteIntroToClientHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorQuoteIntroToClientQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorQuoteIntroToClientHook>>>>
export type PDFCreatorQuoteIntroToClientQueryError = unknown

export const usePDFCreatorQuoteIntroToClient = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorQuoteIntroToClientHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorQuoteIntroToClientHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorQuoteIntroToClientQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorQuoteRequestUnderWriterHook = () => {
        const pDFCreatorQuoteRequestUnderWriter = useCustomInstance<PDFCreatorQuoteRequestUnderWriter200One | PDFCreatorQuoteRequestUnderWriter200Two | PDFCreatorQuoteRequestUnderWriter200Three | PDFCreatorQuoteRequestUnderWriter200Four>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return pDFCreatorQuoteRequestUnderWriter(
          {url: `/api/PDFCreator/QuoteRequestUnderWriter/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorQuoteRequestUnderWriterQueryKey = (customerId: number,) => {
    return [`/api/PDFCreator/QuoteRequestUnderWriter/${customerId}`] as const;
    }

    
export const usePDFCreatorQuoteRequestUnderWriterQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorQuoteRequestUnderWriterHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorQuoteRequestUnderWriterHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorQuoteRequestUnderWriterQueryKey(customerId);

  const pDFCreatorQuoteRequestUnderWriter =  usePDFCreatorQuoteRequestUnderWriterHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorQuoteRequestUnderWriterHook>>>> = ({ signal }) => pDFCreatorQuoteRequestUnderWriter(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorQuoteRequestUnderWriterHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorQuoteRequestUnderWriterQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorQuoteRequestUnderWriterHook>>>>
export type PDFCreatorQuoteRequestUnderWriterQueryError = unknown

export const usePDFCreatorQuoteRequestUnderWriter = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorQuoteRequestUnderWriterHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorQuoteRequestUnderWriterHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorQuoteRequestUnderWriterQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorGenericEmailTemplateHook = () => {
        const pDFCreatorGenericEmailTemplate = useCustomInstance<PDFCreatorGenericEmailTemplate200One | PDFCreatorGenericEmailTemplate200Two | PDFCreatorGenericEmailTemplate200Three | PDFCreatorGenericEmailTemplate200Four>();

        return (
    customerId: number,
    title: string,
    params?: PDFCreatorGenericEmailTemplateParams,
 signal?: AbortSignal
) => {
        return pDFCreatorGenericEmailTemplate(
          {url: `/api/PDFCreator/GenericEmailTemplate/${customerId}/${title}`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getPDFCreatorGenericEmailTemplateQueryKey = (customerId: number,
    title: string,
    params?: PDFCreatorGenericEmailTemplateParams,) => {
    return [`/api/PDFCreator/GenericEmailTemplate/${customerId}/${title}`, ...(params ? [params]: [])] as const;
    }

    
export const usePDFCreatorGenericEmailTemplateQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorGenericEmailTemplateHook>>>, TError = unknown>(customerId: number,
    title: string,
    params?: PDFCreatorGenericEmailTemplateParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGenericEmailTemplateHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorGenericEmailTemplateQueryKey(customerId,title,params);

  const pDFCreatorGenericEmailTemplate =  usePDFCreatorGenericEmailTemplateHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGenericEmailTemplateHook>>>> = ({ signal }) => pDFCreatorGenericEmailTemplate(customerId,title,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && title), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGenericEmailTemplateHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorGenericEmailTemplateQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGenericEmailTemplateHook>>>>
export type PDFCreatorGenericEmailTemplateQueryError = unknown

export const usePDFCreatorGenericEmailTemplate = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorGenericEmailTemplateHook>>>, TError = unknown>(
 customerId: number,
    title: string,
    params?: PDFCreatorGenericEmailTemplateParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGenericEmailTemplateHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorGenericEmailTemplateQueryOptions(customerId,title,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorGenericEmailTemplateByCustomerInfoHook = () => {
        const pDFCreatorGenericEmailTemplateByCustomerInfo = useCustomInstance<PDFCreatorGenericEmailTemplateByCustomerInfo200One | PDFCreatorGenericEmailTemplateByCustomerInfo200Two | PDFCreatorGenericEmailTemplateByCustomerInfo200Three | PDFCreatorGenericEmailTemplateByCustomerInfo200Four>();

        return (
    params: PDFCreatorGenericEmailTemplateByCustomerInfoParams,
 signal?: AbortSignal
) => {
        return pDFCreatorGenericEmailTemplateByCustomerInfo(
          {url: `/api/PDFCreator/GenericEmailTemplate/CustomerInfo`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getPDFCreatorGenericEmailTemplateByCustomerInfoQueryKey = (params: PDFCreatorGenericEmailTemplateByCustomerInfoParams,) => {
    return [`/api/PDFCreator/GenericEmailTemplate/CustomerInfo`, ...(params ? [params]: [])] as const;
    }

    
export const usePDFCreatorGenericEmailTemplateByCustomerInfoQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorGenericEmailTemplateByCustomerInfoHook>>>, TError = unknown>(params: PDFCreatorGenericEmailTemplateByCustomerInfoParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGenericEmailTemplateByCustomerInfoHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorGenericEmailTemplateByCustomerInfoQueryKey(params);

  const pDFCreatorGenericEmailTemplateByCustomerInfo =  usePDFCreatorGenericEmailTemplateByCustomerInfoHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGenericEmailTemplateByCustomerInfoHook>>>> = ({ signal }) => pDFCreatorGenericEmailTemplateByCustomerInfo(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGenericEmailTemplateByCustomerInfoHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorGenericEmailTemplateByCustomerInfoQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGenericEmailTemplateByCustomerInfoHook>>>>
export type PDFCreatorGenericEmailTemplateByCustomerInfoQueryError = unknown

export const usePDFCreatorGenericEmailTemplateByCustomerInfo = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorGenericEmailTemplateByCustomerInfoHook>>>, TError = unknown>(
 params: PDFCreatorGenericEmailTemplateByCustomerInfoParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGenericEmailTemplateByCustomerInfoHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorGenericEmailTemplateByCustomerInfoQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorMonthlyInvoiceTemplateHook = () => {
        const pDFCreatorMonthlyInvoiceTemplate = useCustomInstance<PDFCreatorMonthlyInvoiceTemplate200One | PDFCreatorMonthlyInvoiceTemplate200Two | PDFCreatorMonthlyInvoiceTemplate200Three | PDFCreatorMonthlyInvoiceTemplate200Four>();

        return (
    customerId: number,
    month: string,
 signal?: AbortSignal
) => {
        return pDFCreatorMonthlyInvoiceTemplate(
          {url: `/api/PDFCreator/MonthlyInvoiceTemplate/${customerId}/${month}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorMonthlyInvoiceTemplateQueryKey = (customerId: number,
    month: string,) => {
    return [`/api/PDFCreator/MonthlyInvoiceTemplate/${customerId}/${month}`] as const;
    }

    
export const usePDFCreatorMonthlyInvoiceTemplateQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorMonthlyInvoiceTemplateHook>>>, TError = unknown>(customerId: number,
    month: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorMonthlyInvoiceTemplateHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorMonthlyInvoiceTemplateQueryKey(customerId,month);

  const pDFCreatorMonthlyInvoiceTemplate =  usePDFCreatorMonthlyInvoiceTemplateHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorMonthlyInvoiceTemplateHook>>>> = ({ signal }) => pDFCreatorMonthlyInvoiceTemplate(customerId,month, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && month), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorMonthlyInvoiceTemplateHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorMonthlyInvoiceTemplateQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorMonthlyInvoiceTemplateHook>>>>
export type PDFCreatorMonthlyInvoiceTemplateQueryError = unknown

export const usePDFCreatorMonthlyInvoiceTemplate = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorMonthlyInvoiceTemplateHook>>>, TError = unknown>(
 customerId: number,
    month: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorMonthlyInvoiceTemplateHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorMonthlyInvoiceTemplateQueryOptions(customerId,month,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorDownloadAllDocumentsZipFileHook = () => {
        const pDFCreatorDownloadAllDocumentsZipFile = useCustomInstance<PDFCreatorDownloadAllDocumentsZipFile200One | PDFCreatorDownloadAllDocumentsZipFile200Two | PDFCreatorDownloadAllDocumentsZipFile200Three | PDFCreatorDownloadAllDocumentsZipFile200Four>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return pDFCreatorDownloadAllDocumentsZipFile(
          {url: `/api/PDFCreator/DownloadAllDocumentsZipFile/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorDownloadAllDocumentsZipFileQueryKey = (customerId: number,) => {
    return [`/api/PDFCreator/DownloadAllDocumentsZipFile/${customerId}`] as const;
    }

    
export const usePDFCreatorDownloadAllDocumentsZipFileQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorDownloadAllDocumentsZipFileHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorDownloadAllDocumentsZipFileHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorDownloadAllDocumentsZipFileQueryKey(customerId);

  const pDFCreatorDownloadAllDocumentsZipFile =  usePDFCreatorDownloadAllDocumentsZipFileHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorDownloadAllDocumentsZipFileHook>>>> = ({ signal }) => pDFCreatorDownloadAllDocumentsZipFile(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorDownloadAllDocumentsZipFileHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorDownloadAllDocumentsZipFileQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorDownloadAllDocumentsZipFileHook>>>>
export type PDFCreatorDownloadAllDocumentsZipFileQueryError = unknown

export const usePDFCreatorDownloadAllDocumentsZipFile = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorDownloadAllDocumentsZipFileHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorDownloadAllDocumentsZipFileHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorDownloadAllDocumentsZipFileQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorSendDocumentHook = () => {
        const pDFCreatorSendDocument = useCustomInstance<PDFCreatorSendDocument200One | PDFCreatorSendDocument200Two | PDFCreatorSendDocument200Three | PDFCreatorSendDocument200Four>();

        return (
    documentAction: string,
 signal?: AbortSignal
) => {
        return pDFCreatorSendDocument(
          {url: `/api/PDFCreator/SendDocument/${documentAction}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorSendDocumentQueryKey = (documentAction: string,) => {
    return [`/api/PDFCreator/SendDocument/${documentAction}`] as const;
    }

    
export const usePDFCreatorSendDocumentQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendDocumentHook>>>, TError = unknown>(documentAction: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendDocumentHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorSendDocumentQueryKey(documentAction);

  const pDFCreatorSendDocument =  usePDFCreatorSendDocumentHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendDocumentHook>>>> = ({ signal }) => pDFCreatorSendDocument(documentAction, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(documentAction), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendDocumentHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorSendDocumentQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendDocumentHook>>>>
export type PDFCreatorSendDocumentQueryError = unknown

export const usePDFCreatorSendDocument = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendDocumentHook>>>, TError = unknown>(
 documentAction: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendDocumentHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorSendDocumentQueryOptions(documentAction,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorPDFProposalCreatorforSignHook = () => {
        const pDFCreatorPDFProposalCreatorforSign = useCustomInstance<PDFCreatorPDFProposalCreatorforSign200One | PDFCreatorPDFProposalCreatorforSign200Two | PDFCreatorPDFProposalCreatorforSign200Three | PDFCreatorPDFProposalCreatorforSign200Four>();

        return (
    customerId: number,
    imagUrl: string,
 signal?: AbortSignal
) => {
        return pDFCreatorPDFProposalCreatorforSign(
          {url: `/api/PDFCreator/ProposalForSign/${customerId}/${imagUrl}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorPDFProposalCreatorforSignQueryKey = (customerId: number,
    imagUrl: string,) => {
    return [`/api/PDFCreator/ProposalForSign/${customerId}/${imagUrl}`] as const;
    }

    
export const usePDFCreatorPDFProposalCreatorforSignQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFProposalCreatorforSignHook>>>, TError = unknown>(customerId: number,
    imagUrl: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFProposalCreatorforSignHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorPDFProposalCreatorforSignQueryKey(customerId,imagUrl);

  const pDFCreatorPDFProposalCreatorforSign =  usePDFCreatorPDFProposalCreatorforSignHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFProposalCreatorforSignHook>>>> = ({ signal }) => pDFCreatorPDFProposalCreatorforSign(customerId,imagUrl, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && imagUrl), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFProposalCreatorforSignHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorPDFProposalCreatorforSignQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFProposalCreatorforSignHook>>>>
export type PDFCreatorPDFProposalCreatorforSignQueryError = unknown

export const usePDFCreatorPDFProposalCreatorforSign = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFProposalCreatorforSignHook>>>, TError = unknown>(
 customerId: number,
    imagUrl: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFProposalCreatorforSignHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorPDFProposalCreatorforSignQueryOptions(customerId,imagUrl,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorPDFProposalCreatorHook = () => {
        const pDFCreatorPDFProposalCreator = useCustomInstance<PDFCreatorPDFProposalCreator200One | PDFCreatorPDFProposalCreator200Two | PDFCreatorPDFProposalCreator200Three | PDFCreatorPDFProposalCreator200Four>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return pDFCreatorPDFProposalCreator(
          {url: `/api/PDFCreator/Proposal/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorPDFProposalCreatorQueryKey = (customerId: number,) => {
    return [`/api/PDFCreator/Proposal/${customerId}`] as const;
    }

    
export const usePDFCreatorPDFProposalCreatorQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFProposalCreatorHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFProposalCreatorHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorPDFProposalCreatorQueryKey(customerId);

  const pDFCreatorPDFProposalCreator =  usePDFCreatorPDFProposalCreatorHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFProposalCreatorHook>>>> = ({ signal }) => pDFCreatorPDFProposalCreator(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFProposalCreatorHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorPDFProposalCreatorQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFProposalCreatorHook>>>>
export type PDFCreatorPDFProposalCreatorQueryError = unknown

export const usePDFCreatorPDFProposalCreator = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFProposalCreatorHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFProposalCreatorHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorPDFProposalCreatorQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorPDFWebProposalCreatorHook = () => {
        const pDFCreatorPDFWebProposalCreator = useCustomInstance<PDFCreatorPDFWebProposalCreator200One | PDFCreatorPDFWebProposalCreator200Two | PDFCreatorPDFWebProposalCreator200Three | PDFCreatorPDFWebProposalCreator200Four>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return pDFCreatorPDFWebProposalCreator(
          {url: `/api/PDFCreator/Web/Proposal/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorPDFWebProposalCreatorQueryKey = (customerId: number,) => {
    return [`/api/PDFCreator/Web/Proposal/${customerId}`] as const;
    }

    
export const usePDFCreatorPDFWebProposalCreatorQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFWebProposalCreatorHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFWebProposalCreatorHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorPDFWebProposalCreatorQueryKey(customerId);

  const pDFCreatorPDFWebProposalCreator =  usePDFCreatorPDFWebProposalCreatorHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFWebProposalCreatorHook>>>> = ({ signal }) => pDFCreatorPDFWebProposalCreator(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFWebProposalCreatorHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorPDFWebProposalCreatorQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFWebProposalCreatorHook>>>>
export type PDFCreatorPDFWebProposalCreatorQueryError = unknown

export const usePDFCreatorPDFWebProposalCreator = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFWebProposalCreatorHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFWebProposalCreatorHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorPDFWebProposalCreatorQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorGenerateMonthlyInvoiceHook = () => {
        const pDFCreatorGenerateMonthlyInvoice = useCustomInstance<PDFCreatorGenerateMonthlyInvoice200One | PDFCreatorGenerateMonthlyInvoice200Two | PDFCreatorGenerateMonthlyInvoice200Three | PDFCreatorGenerateMonthlyInvoice200Four>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return pDFCreatorGenerateMonthlyInvoice(
          {url: `/api/PDFCreator/GenerateMonthlyInvoice/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorGenerateMonthlyInvoiceQueryKey = (customerId: number,) => {
    return [`/api/PDFCreator/GenerateMonthlyInvoice/${customerId}`] as const;
    }

    
export const usePDFCreatorGenerateMonthlyInvoiceQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorGenerateMonthlyInvoiceHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGenerateMonthlyInvoiceHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorGenerateMonthlyInvoiceQueryKey(customerId);

  const pDFCreatorGenerateMonthlyInvoice =  usePDFCreatorGenerateMonthlyInvoiceHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGenerateMonthlyInvoiceHook>>>> = ({ signal }) => pDFCreatorGenerateMonthlyInvoice(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGenerateMonthlyInvoiceHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorGenerateMonthlyInvoiceQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGenerateMonthlyInvoiceHook>>>>
export type PDFCreatorGenerateMonthlyInvoiceQueryError = unknown

export const usePDFCreatorGenerateMonthlyInvoice = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorGenerateMonthlyInvoiceHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGenerateMonthlyInvoiceHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorGenerateMonthlyInvoiceQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorPDFProposalCreatorTestHook = () => {
        const pDFCreatorPDFProposalCreatorTest = useCustomInstance<PDFCreatorPDFProposalCreatorTest200One | PDFCreatorPDFProposalCreatorTest200Two | PDFCreatorPDFProposalCreatorTest200Three | PDFCreatorPDFProposalCreatorTest200Four>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return pDFCreatorPDFProposalCreatorTest(
          {url: `/api/PDFCreator/Proposal/test/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorPDFProposalCreatorTestQueryKey = (customerId: number,) => {
    return [`/api/PDFCreator/Proposal/test/${customerId}`] as const;
    }

    
export const usePDFCreatorPDFProposalCreatorTestQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFProposalCreatorTestHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFProposalCreatorTestHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorPDFProposalCreatorTestQueryKey(customerId);

  const pDFCreatorPDFProposalCreatorTest =  usePDFCreatorPDFProposalCreatorTestHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFProposalCreatorTestHook>>>> = ({ signal }) => pDFCreatorPDFProposalCreatorTest(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFProposalCreatorTestHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorPDFProposalCreatorTestQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFProposalCreatorTestHook>>>>
export type PDFCreatorPDFProposalCreatorTestQueryError = unknown

export const usePDFCreatorPDFProposalCreatorTest = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFProposalCreatorTestHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPDFProposalCreatorTestHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorPDFProposalCreatorTestQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorCancellationRequestFormHook = () => {
        const pDFCreatorCancellationRequestForm = useCustomInstance<PDFCreatorCancellationRequestForm200One | PDFCreatorCancellationRequestForm200Two | PDFCreatorCancellationRequestForm200Three | PDFCreatorCancellationRequestForm200Four>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return pDFCreatorCancellationRequestForm(
          {url: `/api/PDFCreator/CancellationRequestForm/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorCancellationRequestFormQueryKey = (customerId: number,) => {
    return [`/api/PDFCreator/CancellationRequestForm/${customerId}`] as const;
    }

    
export const usePDFCreatorCancellationRequestFormQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorCancellationRequestFormHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCancellationRequestFormHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorCancellationRequestFormQueryKey(customerId);

  const pDFCreatorCancellationRequestForm =  usePDFCreatorCancellationRequestFormHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCancellationRequestFormHook>>>> = ({ signal }) => pDFCreatorCancellationRequestForm(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCancellationRequestFormHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorCancellationRequestFormQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCancellationRequestFormHook>>>>
export type PDFCreatorCancellationRequestFormQueryError = unknown

export const usePDFCreatorCancellationRequestForm = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorCancellationRequestFormHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCancellationRequestFormHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorCancellationRequestFormQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorPolicyChangeRequestFormHook = () => {
        const pDFCreatorPolicyChangeRequestForm = useCustomInstance<PDFCreatorPolicyChangeRequestForm200One | PDFCreatorPolicyChangeRequestForm200Two | PDFCreatorPolicyChangeRequestForm200Three | PDFCreatorPolicyChangeRequestForm200Four>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return pDFCreatorPolicyChangeRequestForm(
          {url: `/api/PDFCreator/PolicyChangeRequestForm/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorPolicyChangeRequestFormQueryKey = (customerId: number,) => {
    return [`/api/PDFCreator/PolicyChangeRequestForm/${customerId}`] as const;
    }

    
export const usePDFCreatorPolicyChangeRequestFormQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorPolicyChangeRequestFormHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPolicyChangeRequestFormHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorPolicyChangeRequestFormQueryKey(customerId);

  const pDFCreatorPolicyChangeRequestForm =  usePDFCreatorPolicyChangeRequestFormHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPolicyChangeRequestFormHook>>>> = ({ signal }) => pDFCreatorPolicyChangeRequestForm(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPolicyChangeRequestFormHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorPolicyChangeRequestFormQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPolicyChangeRequestFormHook>>>>
export type PDFCreatorPolicyChangeRequestFormQueryError = unknown

export const usePDFCreatorPolicyChangeRequestForm = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorPolicyChangeRequestFormHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPolicyChangeRequestFormHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorPolicyChangeRequestFormQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorCreateMonthlyStatementHook = () => {
        const pDFCreatorCreateMonthlyStatement = useCustomInstance<string>();

        return (
    customerId: number,
    month: string,
 signal?: AbortSignal
) => {
        return pDFCreatorCreateMonthlyStatement(
          {url: `/api/PDFCreator/MonthlyStatement/${customerId}/${month}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorCreateMonthlyStatementQueryKey = (customerId: number,
    month: string,) => {
    return [`/api/PDFCreator/MonthlyStatement/${customerId}/${month}`] as const;
    }

    
export const usePDFCreatorCreateMonthlyStatementQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorCreateMonthlyStatementHook>>>, TError = unknown>(customerId: number,
    month: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCreateMonthlyStatementHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorCreateMonthlyStatementQueryKey(customerId,month);

  const pDFCreatorCreateMonthlyStatement =  usePDFCreatorCreateMonthlyStatementHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCreateMonthlyStatementHook>>>> = ({ signal }) => pDFCreatorCreateMonthlyStatement(customerId,month, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && month), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCreateMonthlyStatementHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorCreateMonthlyStatementQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCreateMonthlyStatementHook>>>>
export type PDFCreatorCreateMonthlyStatementQueryError = unknown

export const usePDFCreatorCreateMonthlyStatement = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorCreateMonthlyStatementHook>>>, TError = unknown>(
 customerId: number,
    month: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCreateMonthlyStatementHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorCreateMonthlyStatementQueryOptions(customerId,month,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorNewAcordForm140Hook = () => {
        const pDFCreatorNewAcordForm140 = useCustomInstance<PDFCreatorNewAcordForm140200One | PDFCreatorNewAcordForm140200Two | PDFCreatorNewAcordForm140200Three | PDFCreatorNewAcordForm140200Four>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return pDFCreatorNewAcordForm140(
          {url: `/api/PDFCreator/NewAcordForm140/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorNewAcordForm140QueryKey = (customerId: number,) => {
    return [`/api/PDFCreator/NewAcordForm140/${customerId}`] as const;
    }

    
export const usePDFCreatorNewAcordForm140QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorNewAcordForm140Hook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorNewAcordForm140Hook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorNewAcordForm140QueryKey(customerId);

  const pDFCreatorNewAcordForm140 =  usePDFCreatorNewAcordForm140Hook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorNewAcordForm140Hook>>>> = ({ signal }) => pDFCreatorNewAcordForm140(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorNewAcordForm140Hook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorNewAcordForm140QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorNewAcordForm140Hook>>>>
export type PDFCreatorNewAcordForm140QueryError = unknown

export const usePDFCreatorNewAcordForm140 = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorNewAcordForm140Hook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorNewAcordForm140Hook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorNewAcordForm140QueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorCustomerWelcomeEmailWithClientPortalAccessHook = () => {
        const pDFCreatorCustomerWelcomeEmailWithClientPortalAccess = useCustomInstance<PDFCreatorCustomerWelcomeEmailWithClientPortalAccess200One | PDFCreatorCustomerWelcomeEmailWithClientPortalAccess200Two | PDFCreatorCustomerWelcomeEmailWithClientPortalAccess200Three | PDFCreatorCustomerWelcomeEmailWithClientPortalAccess200Four>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return pDFCreatorCustomerWelcomeEmailWithClientPortalAccess(
          {url: `/api/PDFCreator/CustomerWelcomeEmailWithClientPortalAccess/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorCustomerWelcomeEmailWithClientPortalAccessQueryKey = (customerId: number,) => {
    return [`/api/PDFCreator/CustomerWelcomeEmailWithClientPortalAccess/${customerId}`] as const;
    }

    
export const usePDFCreatorCustomerWelcomeEmailWithClientPortalAccessQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorCustomerWelcomeEmailWithClientPortalAccessHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCustomerWelcomeEmailWithClientPortalAccessHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorCustomerWelcomeEmailWithClientPortalAccessQueryKey(customerId);

  const pDFCreatorCustomerWelcomeEmailWithClientPortalAccess =  usePDFCreatorCustomerWelcomeEmailWithClientPortalAccessHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCustomerWelcomeEmailWithClientPortalAccessHook>>>> = ({ signal }) => pDFCreatorCustomerWelcomeEmailWithClientPortalAccess(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCustomerWelcomeEmailWithClientPortalAccessHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorCustomerWelcomeEmailWithClientPortalAccessQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCustomerWelcomeEmailWithClientPortalAccessHook>>>>
export type PDFCreatorCustomerWelcomeEmailWithClientPortalAccessQueryError = unknown

export const usePDFCreatorCustomerWelcomeEmailWithClientPortalAccess = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorCustomerWelcomeEmailWithClientPortalAccessHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorCustomerWelcomeEmailWithClientPortalAccessHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorCustomerWelcomeEmailWithClientPortalAccessQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorSendToActiveCustomerHook = () => {
        const pDFCreatorSendToActiveCustomer = useCustomInstance<PDFCreatorSendToActiveCustomer200One | PDFCreatorSendToActiveCustomer200Two | PDFCreatorSendToActiveCustomer200Three | PDFCreatorSendToActiveCustomer200Four>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return pDFCreatorSendToActiveCustomer(
          {url: `/api/PDFCreator/SendToActiveCustomer/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorSendToActiveCustomerQueryKey = (customerId: number,) => {
    return [`/api/PDFCreator/SendToActiveCustomer/${customerId}`] as const;
    }

    
export const usePDFCreatorSendToActiveCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendToActiveCustomerHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendToActiveCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorSendToActiveCustomerQueryKey(customerId);

  const pDFCreatorSendToActiveCustomer =  usePDFCreatorSendToActiveCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendToActiveCustomerHook>>>> = ({ signal }) => pDFCreatorSendToActiveCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendToActiveCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorSendToActiveCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendToActiveCustomerHook>>>>
export type PDFCreatorSendToActiveCustomerQueryError = unknown

export const usePDFCreatorSendToActiveCustomer = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendToActiveCustomerHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendToActiveCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorSendToActiveCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorSendPaymnetConfirmationHook = () => {
        const pDFCreatorSendPaymnetConfirmation = useCustomInstance<PDFCreatorSendPaymnetConfirmation200One | PDFCreatorSendPaymnetConfirmation200Two | PDFCreatorSendPaymnetConfirmation200Three | PDFCreatorSendPaymnetConfirmation200Four>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return pDFCreatorSendPaymnetConfirmation(
          {url: `/api/PDFCreator/SendPaymnetConfirmation/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorSendPaymnetConfirmationQueryKey = (customerId: number,) => {
    return [`/api/PDFCreator/SendPaymnetConfirmation/${customerId}`] as const;
    }

    
export const usePDFCreatorSendPaymnetConfirmationQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendPaymnetConfirmationHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendPaymnetConfirmationHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorSendPaymnetConfirmationQueryKey(customerId);

  const pDFCreatorSendPaymnetConfirmation =  usePDFCreatorSendPaymnetConfirmationHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendPaymnetConfirmationHook>>>> = ({ signal }) => pDFCreatorSendPaymnetConfirmation(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendPaymnetConfirmationHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorSendPaymnetConfirmationQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendPaymnetConfirmationHook>>>>
export type PDFCreatorSendPaymnetConfirmationQueryError = unknown

export const usePDFCreatorSendPaymnetConfirmation = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendPaymnetConfirmationHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendPaymnetConfirmationHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorSendPaymnetConfirmationQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorSendRecurringPaymnetScheduleConfirmationHook = () => {
        const pDFCreatorSendRecurringPaymnetScheduleConfirmation = useCustomInstance<PDFCreatorSendRecurringPaymnetScheduleConfirmation200One | PDFCreatorSendRecurringPaymnetScheduleConfirmation200Two | PDFCreatorSendRecurringPaymnetScheduleConfirmation200Three | PDFCreatorSendRecurringPaymnetScheduleConfirmation200Four>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return pDFCreatorSendRecurringPaymnetScheduleConfirmation(
          {url: `/api/PDFCreator/SendRecurringPaymnetScheduleConfirmation/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorSendRecurringPaymnetScheduleConfirmationQueryKey = (customerId: number,) => {
    return [`/api/PDFCreator/SendRecurringPaymnetScheduleConfirmation/${customerId}`] as const;
    }

    
export const usePDFCreatorSendRecurringPaymnetScheduleConfirmationQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendRecurringPaymnetScheduleConfirmationHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendRecurringPaymnetScheduleConfirmationHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorSendRecurringPaymnetScheduleConfirmationQueryKey(customerId);

  const pDFCreatorSendRecurringPaymnetScheduleConfirmation =  usePDFCreatorSendRecurringPaymnetScheduleConfirmationHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendRecurringPaymnetScheduleConfirmationHook>>>> = ({ signal }) => pDFCreatorSendRecurringPaymnetScheduleConfirmation(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendRecurringPaymnetScheduleConfirmationHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorSendRecurringPaymnetScheduleConfirmationQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendRecurringPaymnetScheduleConfirmationHook>>>>
export type PDFCreatorSendRecurringPaymnetScheduleConfirmationQueryError = unknown

export const usePDFCreatorSendRecurringPaymnetScheduleConfirmation = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendRecurringPaymnetScheduleConfirmationHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendRecurringPaymnetScheduleConfirmationHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorSendRecurringPaymnetScheduleConfirmationQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorREOMonthlyBillingReportHook = () => {
        const pDFCreatorREOMonthlyBillingReport = useCustomInstance<PDFCreatorREOMonthlyBillingReport200One | PDFCreatorREOMonthlyBillingReport200Two | PDFCreatorREOMonthlyBillingReport200Three | PDFCreatorREOMonthlyBillingReport200Four>();

        return (
    startDate: string,
    endDate: string,
    propertyType: string,
 signal?: AbortSignal
) => {
        return pDFCreatorREOMonthlyBillingReport(
          {url: `/api/PDFCreator/REOMonthlyBillingReport/${startDate}/${endDate}/${propertyType}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorREOMonthlyBillingReportQueryKey = (startDate: string,
    endDate: string,
    propertyType: string,) => {
    return [`/api/PDFCreator/REOMonthlyBillingReport/${startDate}/${endDate}/${propertyType}`] as const;
    }

    
export const usePDFCreatorREOMonthlyBillingReportQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorREOMonthlyBillingReportHook>>>, TError = unknown>(startDate: string,
    endDate: string,
    propertyType: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorREOMonthlyBillingReportHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorREOMonthlyBillingReportQueryKey(startDate,endDate,propertyType);

  const pDFCreatorREOMonthlyBillingReport =  usePDFCreatorREOMonthlyBillingReportHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorREOMonthlyBillingReportHook>>>> = ({ signal }) => pDFCreatorREOMonthlyBillingReport(startDate,endDate,propertyType, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(startDate && endDate && propertyType), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorREOMonthlyBillingReportHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorREOMonthlyBillingReportQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorREOMonthlyBillingReportHook>>>>
export type PDFCreatorREOMonthlyBillingReportQueryError = unknown

export const usePDFCreatorREOMonthlyBillingReport = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorREOMonthlyBillingReportHook>>>, TError = unknown>(
 startDate: string,
    endDate: string,
    propertyType: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorREOMonthlyBillingReportHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorREOMonthlyBillingReportQueryOptions(startDate,endDate,propertyType,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorPaymentEntryReportHook = () => {
        const pDFCreatorPaymentEntryReport = useCustomInstance<PDFCreatorPaymentEntryReport200One | PDFCreatorPaymentEntryReport200Two | PDFCreatorPaymentEntryReport200Three | PDFCreatorPaymentEntryReport200Four>();

        return (
    
 signal?: AbortSignal
) => {
        return pDFCreatorPaymentEntryReport(
          {url: `/api/PDFCreator/PaymentEntryReport`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorPaymentEntryReportQueryKey = () => {
    return [`/api/PDFCreator/PaymentEntryReport`] as const;
    }

    
export const usePDFCreatorPaymentEntryReportQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorPaymentEntryReportHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPaymentEntryReportHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorPaymentEntryReportQueryKey();

  const pDFCreatorPaymentEntryReport =  usePDFCreatorPaymentEntryReportHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPaymentEntryReportHook>>>> = ({ signal }) => pDFCreatorPaymentEntryReport(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPaymentEntryReportHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorPaymentEntryReportQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPaymentEntryReportHook>>>>
export type PDFCreatorPaymentEntryReportQueryError = unknown

export const usePDFCreatorPaymentEntryReport = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorPaymentEntryReportHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorPaymentEntryReportHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorPaymentEntryReportQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorGeneratePendingPropertyExcelHook = () => {
        const pDFCreatorGeneratePendingPropertyExcel = useCustomInstance<PDFCreatorGeneratePendingPropertyExcel200One | PDFCreatorGeneratePendingPropertyExcel200Two | PDFCreatorGeneratePendingPropertyExcel200Three | PDFCreatorGeneratePendingPropertyExcel200Four>();

        return (
    customerID: number,
 signal?: AbortSignal
) => {
        return pDFCreatorGeneratePendingPropertyExcel(
          {url: `/api/PDFCreator/GeneratePendingPropertyExcel/${customerID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorGeneratePendingPropertyExcelQueryKey = (customerID: number,) => {
    return [`/api/PDFCreator/GeneratePendingPropertyExcel/${customerID}`] as const;
    }

    
export const usePDFCreatorGeneratePendingPropertyExcelQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorGeneratePendingPropertyExcelHook>>>, TError = unknown>(customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGeneratePendingPropertyExcelHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorGeneratePendingPropertyExcelQueryKey(customerID);

  const pDFCreatorGeneratePendingPropertyExcel =  usePDFCreatorGeneratePendingPropertyExcelHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGeneratePendingPropertyExcelHook>>>> = ({ signal }) => pDFCreatorGeneratePendingPropertyExcel(customerID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGeneratePendingPropertyExcelHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorGeneratePendingPropertyExcelQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGeneratePendingPropertyExcelHook>>>>
export type PDFCreatorGeneratePendingPropertyExcelQueryError = unknown

export const usePDFCreatorGeneratePendingPropertyExcel = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorGeneratePendingPropertyExcelHook>>>, TError = unknown>(
 customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGeneratePendingPropertyExcelHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorGeneratePendingPropertyExcelQueryOptions(customerID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorSendToCustomerHook = () => {
        const pDFCreatorSendToCustomer = useCustomInstance<PDFCreatorSendToCustomer200One | PDFCreatorSendToCustomer200Two | PDFCreatorSendToCustomer200Three | PDFCreatorSendToCustomer200Four>();

        return (
    pDFCreatorSendToCustomerDataBody: PDFCreatorSendToCustomerDataBody,
 ) => {
        return pDFCreatorSendToCustomer(
          {url: `/api/PDFCreator/SendToCustomer`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: pDFCreatorSendToCustomerDataBody
    },
          );
        }
      }
    


export const usePDFCreatorSendToCustomerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendToCustomerHook>>>, TError,{data: PDFCreatorSendToCustomerDataBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendToCustomerHook>>>, TError,{data: PDFCreatorSendToCustomerDataBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const pDFCreatorSendToCustomer =  usePDFCreatorSendToCustomerHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendToCustomerHook>>>, {data: PDFCreatorSendToCustomerDataBody}> = (props) => {
          const {data} = props ?? {};

          return  pDFCreatorSendToCustomer(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PDFCreatorSendToCustomerMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendToCustomerHook>>>>
    export type PDFCreatorSendToCustomerMutationBody = PDFCreatorSendToCustomerDataBody
    export type PDFCreatorSendToCustomerMutationError = unknown

    export const usePDFCreatorSendToCustomer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendToCustomerHook>>>, TError,{data: PDFCreatorSendToCustomerDataBody}, TContext>, }
) => {

      const mutationOptions = usePDFCreatorSendToCustomerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePDFCreatorSendToPayeeHook = () => {
        const pDFCreatorSendToPayee = useCustomInstance<PDFCreatorSendToPayee200One | PDFCreatorSendToPayee200Two | PDFCreatorSendToPayee200Three | PDFCreatorSendToPayee200Four>();

        return (
    pDFCreatorSendToCustomerDataBody: PDFCreatorSendToCustomerDataBody,
 ) => {
        return pDFCreatorSendToPayee(
          {url: `/api/PDFCreator/SendToPayee`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: pDFCreatorSendToCustomerDataBody
    },
          );
        }
      }
    


export const usePDFCreatorSendToPayeeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendToPayeeHook>>>, TError,{data: PDFCreatorSendToCustomerDataBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendToPayeeHook>>>, TError,{data: PDFCreatorSendToCustomerDataBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const pDFCreatorSendToPayee =  usePDFCreatorSendToPayeeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendToPayeeHook>>>, {data: PDFCreatorSendToCustomerDataBody}> = (props) => {
          const {data} = props ?? {};

          return  pDFCreatorSendToPayee(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PDFCreatorSendToPayeeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendToPayeeHook>>>>
    export type PDFCreatorSendToPayeeMutationBody = PDFCreatorSendToCustomerDataBody
    export type PDFCreatorSendToPayeeMutationError = unknown

    export const usePDFCreatorSendToPayee = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSendToPayeeHook>>>, TError,{data: PDFCreatorSendToCustomerDataBody}, TContext>, }
) => {

      const mutationOptions = usePDFCreatorSendToPayeeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePDFCreatorGetCreateEvidenceOfInsuranceHook = () => {
        const pDFCreatorGetCreateEvidenceOfInsurance = useCustomInstance<string>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return pDFCreatorGetCreateEvidenceOfInsurance(
          {url: `/api/Get/Create/EvidenceOfInsurance/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPDFCreatorGetCreateEvidenceOfInsuranceQueryKey = (customerId: number,) => {
    return [`/api/Get/Create/EvidenceOfInsurance/${customerId}`] as const;
    }

    
export const usePDFCreatorGetCreateEvidenceOfInsuranceQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorGetCreateEvidenceOfInsuranceHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGetCreateEvidenceOfInsuranceHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPDFCreatorGetCreateEvidenceOfInsuranceQueryKey(customerId);

  const pDFCreatorGetCreateEvidenceOfInsurance =  usePDFCreatorGetCreateEvidenceOfInsuranceHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGetCreateEvidenceOfInsuranceHook>>>> = ({ signal }) => pDFCreatorGetCreateEvidenceOfInsurance(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGetCreateEvidenceOfInsuranceHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PDFCreatorGetCreateEvidenceOfInsuranceQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGetCreateEvidenceOfInsuranceHook>>>>
export type PDFCreatorGetCreateEvidenceOfInsuranceQueryError = unknown

export const usePDFCreatorGetCreateEvidenceOfInsurance = <TData = Awaited<ReturnType<ReturnType<typeof usePDFCreatorGetCreateEvidenceOfInsuranceHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorGetCreateEvidenceOfInsuranceHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePDFCreatorGetCreateEvidenceOfInsuranceQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePDFCreatorSetteledTransactionSendThankMessageHook = () => {
        const pDFCreatorSetteledTransactionSendThankMessage = useCustomInstance<string>();

        return (
    params: PDFCreatorSetteledTransactionSendThankMessageParams,
 ) => {
        return pDFCreatorSetteledTransactionSendThankMessage(
          {url: `/api/PDFCreator`, method: 'POST',
        params
    },
          );
        }
      }
    


export const usePDFCreatorSetteledTransactionSendThankMessageMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSetteledTransactionSendThankMessageHook>>>, TError,{params: PDFCreatorSetteledTransactionSendThankMessageParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSetteledTransactionSendThankMessageHook>>>, TError,{params: PDFCreatorSetteledTransactionSendThankMessageParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const pDFCreatorSetteledTransactionSendThankMessage =  usePDFCreatorSetteledTransactionSendThankMessageHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSetteledTransactionSendThankMessageHook>>>, {params: PDFCreatorSetteledTransactionSendThankMessageParams}> = (props) => {
          const {params} = props ?? {};

          return  pDFCreatorSetteledTransactionSendThankMessage(params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PDFCreatorSetteledTransactionSendThankMessageMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSetteledTransactionSendThankMessageHook>>>>
    
    export type PDFCreatorSetteledTransactionSendThankMessageMutationError = unknown

    export const usePDFCreatorSetteledTransactionSendThankMessage = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePDFCreatorSetteledTransactionSendThankMessageHook>>>, TError,{params: PDFCreatorSetteledTransactionSendThankMessageParams}, TContext>, }
) => {

      const mutationOptions = usePDFCreatorSetteledTransactionSendThankMessageMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePoliciesGetAllPoliciesHook = () => {
        const policiesGetAllPolicies = useCustomInstance<DomainModelBenchmarkPolicy[]>();

        return (
    
 signal?: AbortSignal
) => {
        return policiesGetAllPolicies(
          {url: `/api/Policy/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPoliciesGetAllPoliciesQueryKey = () => {
    return [`/api/Policy/getAll`] as const;
    }

    
export const usePoliciesGetAllPoliciesQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePoliciesGetAllPoliciesHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesGetAllPoliciesHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPoliciesGetAllPoliciesQueryKey();

  const policiesGetAllPolicies =  usePoliciesGetAllPoliciesHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePoliciesGetAllPoliciesHook>>>> = ({ signal }) => policiesGetAllPolicies(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesGetAllPoliciesHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PoliciesGetAllPoliciesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePoliciesGetAllPoliciesHook>>>>
export type PoliciesGetAllPoliciesQueryError = unknown

export const usePoliciesGetAllPolicies = <TData = Awaited<ReturnType<ReturnType<typeof usePoliciesGetAllPoliciesHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesGetAllPoliciesHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePoliciesGetAllPoliciesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePoliciesGetHook = () => {
        const policiesGet = useCustomInstance<DomainModelBenchmarkPolicy>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return policiesGet(
          {url: `/api/Policy/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPoliciesGetQueryKey = (id: number,) => {
    return [`/api/Policy/get/${id}`] as const;
    }

    
export const usePoliciesGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePoliciesGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPoliciesGetQueryKey(id);

  const policiesGet =  usePoliciesGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePoliciesGetHook>>>> = ({ signal }) => policiesGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PoliciesGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePoliciesGetHook>>>>
export type PoliciesGetQueryError = unknown

export const usePoliciesGet = <TData = Awaited<ReturnType<ReturnType<typeof usePoliciesGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePoliciesGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePoliciesPostPoliciesHook = () => {
        const policiesPostPolicies = useCustomInstance<DomainModelBenchmarkPolicy>();

        return (
    domainModelBenchmarkPolicyBody: DomainModelBenchmarkPolicyBody,
 ) => {
        return policiesPostPolicies(
          {url: `/api/Policy/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPolicyBody
    },
          );
        }
      }
    


export const usePoliciesPostPoliciesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesPostPoliciesHook>>>, TError,{data: DomainModelBenchmarkPolicyBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesPostPoliciesHook>>>, TError,{data: DomainModelBenchmarkPolicyBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const policiesPostPolicies =  usePoliciesPostPoliciesHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePoliciesPostPoliciesHook>>>, {data: DomainModelBenchmarkPolicyBody}> = (props) => {
          const {data} = props ?? {};

          return  policiesPostPolicies(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PoliciesPostPoliciesMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePoliciesPostPoliciesHook>>>>
    export type PoliciesPostPoliciesMutationBody = DomainModelBenchmarkPolicyBody
    export type PoliciesPostPoliciesMutationError = unknown

    export const usePoliciesPostPolicies = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesPostPoliciesHook>>>, TError,{data: DomainModelBenchmarkPolicyBody}, TContext>, }
) => {

      const mutationOptions = usePoliciesPostPoliciesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePoliciesPutPoliciesHook = () => {
        const policiesPutPolicies = useCustomInstance<DomainModelBenchmarkPolicy>();

        return (
    domainModelBenchmarkPolicyBody: DomainModelBenchmarkPolicyBody,
 ) => {
        return policiesPutPolicies(
          {url: `/api/Policy/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPolicyBody
    },
          );
        }
      }
    


export const usePoliciesPutPoliciesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesPutPoliciesHook>>>, TError,{data: DomainModelBenchmarkPolicyBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesPutPoliciesHook>>>, TError,{data: DomainModelBenchmarkPolicyBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const policiesPutPolicies =  usePoliciesPutPoliciesHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePoliciesPutPoliciesHook>>>, {data: DomainModelBenchmarkPolicyBody}> = (props) => {
          const {data} = props ?? {};

          return  policiesPutPolicies(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PoliciesPutPoliciesMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePoliciesPutPoliciesHook>>>>
    export type PoliciesPutPoliciesMutationBody = DomainModelBenchmarkPolicyBody
    export type PoliciesPutPoliciesMutationError = unknown

    export const usePoliciesPutPolicies = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesPutPoliciesHook>>>, TError,{data: DomainModelBenchmarkPolicyBody}, TContext>, }
) => {

      const mutationOptions = usePoliciesPutPoliciesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePoliciesDeletePoliciesHook = () => {
        const policiesDeletePolicies = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return policiesDeletePolicies(
          {url: `/api/Policy/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPoliciesDeletePoliciesQueryKey = (id: number,) => {
    return [`/api/Policy/delete/${id}`] as const;
    }

    
export const usePoliciesDeletePoliciesQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePoliciesDeletePoliciesHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesDeletePoliciesHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPoliciesDeletePoliciesQueryKey(id);

  const policiesDeletePolicies =  usePoliciesDeletePoliciesHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePoliciesDeletePoliciesHook>>>> = ({ signal }) => policiesDeletePolicies(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesDeletePoliciesHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PoliciesDeletePoliciesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePoliciesDeletePoliciesHook>>>>
export type PoliciesDeletePoliciesQueryError = unknown

export const usePoliciesDeletePolicies = <TData = Awaited<ReturnType<ReturnType<typeof usePoliciesDeletePoliciesHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesDeletePoliciesHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePoliciesDeletePoliciesQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePoliciesGetPolicyStaticsByCustomerHook = () => {
        const policiesGetPolicyStaticsByCustomer = useCustomInstance<DomainModelBenchmarkPolicyStatsByCustomerDTO>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return policiesGetPolicyStaticsByCustomer(
          {url: `/api/Policy/GetPolicyStaticsByCustomer/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPoliciesGetPolicyStaticsByCustomerQueryKey = (customerId: number,) => {
    return [`/api/Policy/GetPolicyStaticsByCustomer/${customerId}`] as const;
    }

    
export const usePoliciesGetPolicyStaticsByCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePoliciesGetPolicyStaticsByCustomerHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesGetPolicyStaticsByCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPoliciesGetPolicyStaticsByCustomerQueryKey(customerId);

  const policiesGetPolicyStaticsByCustomer =  usePoliciesGetPolicyStaticsByCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePoliciesGetPolicyStaticsByCustomerHook>>>> = ({ signal }) => policiesGetPolicyStaticsByCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesGetPolicyStaticsByCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PoliciesGetPolicyStaticsByCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePoliciesGetPolicyStaticsByCustomerHook>>>>
export type PoliciesGetPolicyStaticsByCustomerQueryError = unknown

export const usePoliciesGetPolicyStaticsByCustomer = <TData = Awaited<ReturnType<ReturnType<typeof usePoliciesGetPolicyStaticsByCustomerHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesGetPolicyStaticsByCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePoliciesGetPolicyStaticsByCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePoliciesGetPoliciesByCustomerHook = () => {
        const policiesGetPoliciesByCustomer = useCustomInstance<DomainModelBenchmarkPolicyByCustomerDTO[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return policiesGetPoliciesByCustomer(
          {url: `/api/Policy/GetPoliciesByCustomer/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPoliciesGetPoliciesByCustomerQueryKey = (customerId: number,) => {
    return [`/api/Policy/GetPoliciesByCustomer/${customerId}`] as const;
    }

    
export const usePoliciesGetPoliciesByCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePoliciesGetPoliciesByCustomerHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesGetPoliciesByCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPoliciesGetPoliciesByCustomerQueryKey(customerId);

  const policiesGetPoliciesByCustomer =  usePoliciesGetPoliciesByCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePoliciesGetPoliciesByCustomerHook>>>> = ({ signal }) => policiesGetPoliciesByCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesGetPoliciesByCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PoliciesGetPoliciesByCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePoliciesGetPoliciesByCustomerHook>>>>
export type PoliciesGetPoliciesByCustomerQueryError = unknown

export const usePoliciesGetPoliciesByCustomer = <TData = Awaited<ReturnType<ReturnType<typeof usePoliciesGetPoliciesByCustomerHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesGetPoliciesByCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePoliciesGetPoliciesByCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePoliciesGetPendingQuoteByCustomerHook = () => {
        const policiesGetPendingQuoteByCustomer = useCustomInstance<DomainModelBenchmarkPolicyByCustomerDTO[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return policiesGetPendingQuoteByCustomer(
          {url: `/api/Policy/GetPendingQuoteByCustomer/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPoliciesGetPendingQuoteByCustomerQueryKey = (customerId: number,) => {
    return [`/api/Policy/GetPendingQuoteByCustomer/${customerId}`] as const;
    }

    
export const usePoliciesGetPendingQuoteByCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePoliciesGetPendingQuoteByCustomerHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesGetPendingQuoteByCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPoliciesGetPendingQuoteByCustomerQueryKey(customerId);

  const policiesGetPendingQuoteByCustomer =  usePoliciesGetPendingQuoteByCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePoliciesGetPendingQuoteByCustomerHook>>>> = ({ signal }) => policiesGetPendingQuoteByCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesGetPendingQuoteByCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PoliciesGetPendingQuoteByCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePoliciesGetPendingQuoteByCustomerHook>>>>
export type PoliciesGetPendingQuoteByCustomerQueryError = unknown

export const usePoliciesGetPendingQuoteByCustomer = <TData = Awaited<ReturnType<ReturnType<typeof usePoliciesGetPendingQuoteByCustomerHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesGetPendingQuoteByCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePoliciesGetPendingQuoteByCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePoliciesGetApplicationsByCustomerHook = () => {
        const policiesGetApplicationsByCustomer = useCustomInstance<DomainModelBenchmarkPolicyByCustomerDTO[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return policiesGetApplicationsByCustomer(
          {url: `/api/Policy/GetApplicationsByCustomer/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPoliciesGetApplicationsByCustomerQueryKey = (customerId: number,) => {
    return [`/api/Policy/GetApplicationsByCustomer/${customerId}`] as const;
    }

    
export const usePoliciesGetApplicationsByCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePoliciesGetApplicationsByCustomerHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesGetApplicationsByCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPoliciesGetApplicationsByCustomerQueryKey(customerId);

  const policiesGetApplicationsByCustomer =  usePoliciesGetApplicationsByCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePoliciesGetApplicationsByCustomerHook>>>> = ({ signal }) => policiesGetApplicationsByCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesGetApplicationsByCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PoliciesGetApplicationsByCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePoliciesGetApplicationsByCustomerHook>>>>
export type PoliciesGetApplicationsByCustomerQueryError = unknown

export const usePoliciesGetApplicationsByCustomer = <TData = Awaited<ReturnType<ReturnType<typeof usePoliciesGetApplicationsByCustomerHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesGetApplicationsByCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePoliciesGetApplicationsByCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePoliciesGetPolicySubmissionsByCustomerHook = () => {
        const policiesGetPolicySubmissionsByCustomer = useCustomInstance<DomainModelBenchmarkPolicyByCustomerDTO[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return policiesGetPolicySubmissionsByCustomer(
          {url: `/api/Policy/GetPolicySubmissionsByCustomer/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPoliciesGetPolicySubmissionsByCustomerQueryKey = (customerId: number,) => {
    return [`/api/Policy/GetPolicySubmissionsByCustomer/${customerId}`] as const;
    }

    
export const usePoliciesGetPolicySubmissionsByCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePoliciesGetPolicySubmissionsByCustomerHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesGetPolicySubmissionsByCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPoliciesGetPolicySubmissionsByCustomerQueryKey(customerId);

  const policiesGetPolicySubmissionsByCustomer =  usePoliciesGetPolicySubmissionsByCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePoliciesGetPolicySubmissionsByCustomerHook>>>> = ({ signal }) => policiesGetPolicySubmissionsByCustomer(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesGetPolicySubmissionsByCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PoliciesGetPolicySubmissionsByCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePoliciesGetPolicySubmissionsByCustomerHook>>>>
export type PoliciesGetPolicySubmissionsByCustomerQueryError = unknown

export const usePoliciesGetPolicySubmissionsByCustomer = <TData = Awaited<ReturnType<ReturnType<typeof usePoliciesGetPolicySubmissionsByCustomerHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePoliciesGetPolicySubmissionsByCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePoliciesGetPolicySubmissionsByCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePolicyPolicyProcessGenerateInvoiceHook = () => {
        const policyPolicyProcessGenerateInvoice = useCustomInstance<DomainModelBenchmarkInvoice>();

        return (
    customerID: number,
 signal?: AbortSignal
) => {
        return policyPolicyProcessGenerateInvoice(
          {url: `/api/QuoteProcess/PolicyProcessGenerateInvoice/${customerID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPolicyPolicyProcessGenerateInvoiceQueryKey = (customerID: number,) => {
    return [`/api/QuoteProcess/PolicyProcessGenerateInvoice/${customerID}`] as const;
    }

    
export const usePolicyPolicyProcessGenerateInvoiceQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePolicyPolicyProcessGenerateInvoiceHook>>>, TError = unknown>(customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyPolicyProcessGenerateInvoiceHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPolicyPolicyProcessGenerateInvoiceQueryKey(customerID);

  const policyPolicyProcessGenerateInvoice =  usePolicyPolicyProcessGenerateInvoiceHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePolicyPolicyProcessGenerateInvoiceHook>>>> = ({ signal }) => policyPolicyProcessGenerateInvoice(customerID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyPolicyProcessGenerateInvoiceHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PolicyPolicyProcessGenerateInvoiceQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePolicyPolicyProcessGenerateInvoiceHook>>>>
export type PolicyPolicyProcessGenerateInvoiceQueryError = unknown

export const usePolicyPolicyProcessGenerateInvoice = <TData = Awaited<ReturnType<ReturnType<typeof usePolicyPolicyProcessGenerateInvoiceHook>>>, TError = unknown>(
 customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyPolicyProcessGenerateInvoiceHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePolicyPolicyProcessGenerateInvoiceQueryOptions(customerID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePolicyPolicyProcessAddNewPropertyChangeRequestHook = () => {
        const policyPolicyProcessAddNewPropertyChangeRequest = useCustomInstance<DomainModelBenchmarkInvoice>();

        return (
    customerID: number,
 signal?: AbortSignal
) => {
        return policyPolicyProcessAddNewPropertyChangeRequest(
          {url: `/api/PolicyProcess/Add/NewProperty/${customerID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPolicyPolicyProcessAddNewPropertyChangeRequestQueryKey = (customerID: number,) => {
    return [`/api/PolicyProcess/Add/NewProperty/${customerID}`] as const;
    }

    
export const usePolicyPolicyProcessAddNewPropertyChangeRequestQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePolicyPolicyProcessAddNewPropertyChangeRequestHook>>>, TError = unknown>(customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyPolicyProcessAddNewPropertyChangeRequestHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPolicyPolicyProcessAddNewPropertyChangeRequestQueryKey(customerID);

  const policyPolicyProcessAddNewPropertyChangeRequest =  usePolicyPolicyProcessAddNewPropertyChangeRequestHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePolicyPolicyProcessAddNewPropertyChangeRequestHook>>>> = ({ signal }) => policyPolicyProcessAddNewPropertyChangeRequest(customerID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyPolicyProcessAddNewPropertyChangeRequestHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PolicyPolicyProcessAddNewPropertyChangeRequestQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePolicyPolicyProcessAddNewPropertyChangeRequestHook>>>>
export type PolicyPolicyProcessAddNewPropertyChangeRequestQueryError = unknown

export const usePolicyPolicyProcessAddNewPropertyChangeRequest = <TData = Awaited<ReturnType<ReturnType<typeof usePolicyPolicyProcessAddNewPropertyChangeRequestHook>>>, TError = unknown>(
 customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyPolicyProcessAddNewPropertyChangeRequestHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePolicyPolicyProcessAddNewPropertyChangeRequestQueryOptions(customerID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePolicyDetailsGetAllPolicyDetailsHook = () => {
        const policyDetailsGetAllPolicyDetails = useCustomInstance<DomainModelBenchmarkPolicyDetail[]>();

        return (
    
 signal?: AbortSignal
) => {
        return policyDetailsGetAllPolicyDetails(
          {url: `/api/PolicyDetails/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPolicyDetailsGetAllPolicyDetailsQueryKey = () => {
    return [`/api/PolicyDetails/getAll`] as const;
    }

    
export const usePolicyDetailsGetAllPolicyDetailsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePolicyDetailsGetAllPolicyDetailsHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsGetAllPolicyDetailsHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPolicyDetailsGetAllPolicyDetailsQueryKey();

  const policyDetailsGetAllPolicyDetails =  usePolicyDetailsGetAllPolicyDetailsHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsGetAllPolicyDetailsHook>>>> = ({ signal }) => policyDetailsGetAllPolicyDetails(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsGetAllPolicyDetailsHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PolicyDetailsGetAllPolicyDetailsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsGetAllPolicyDetailsHook>>>>
export type PolicyDetailsGetAllPolicyDetailsQueryError = unknown

export const usePolicyDetailsGetAllPolicyDetails = <TData = Awaited<ReturnType<ReturnType<typeof usePolicyDetailsGetAllPolicyDetailsHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsGetAllPolicyDetailsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePolicyDetailsGetAllPolicyDetailsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePolicyDetailsGetHook = () => {
        const policyDetailsGet = useCustomInstance<DomainModelBenchmarkPolicyDetail>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return policyDetailsGet(
          {url: `/api/PolicyDetails/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPolicyDetailsGetQueryKey = (id: number,) => {
    return [`/api/PolicyDetails/get/${id}`] as const;
    }

    
export const usePolicyDetailsGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePolicyDetailsGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPolicyDetailsGetQueryKey(id);

  const policyDetailsGet =  usePolicyDetailsGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsGetHook>>>> = ({ signal }) => policyDetailsGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PolicyDetailsGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsGetHook>>>>
export type PolicyDetailsGetQueryError = unknown

export const usePolicyDetailsGet = <TData = Awaited<ReturnType<ReturnType<typeof usePolicyDetailsGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePolicyDetailsGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePolicyDetailsPostPoliciesHook = () => {
        const policyDetailsPostPolicies = useCustomInstance<DomainModelBenchmarkPolicyDetail>();

        return (
    domainModelBenchmarkPolicyDetailBody: DomainModelBenchmarkPolicyDetailBody,
 ) => {
        return policyDetailsPostPolicies(
          {url: `/api/PolicyDetails/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPolicyDetailBody
    },
          );
        }
      }
    


export const usePolicyDetailsPostPoliciesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsPostPoliciesHook>>>, TError,{data: DomainModelBenchmarkPolicyDetailBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsPostPoliciesHook>>>, TError,{data: DomainModelBenchmarkPolicyDetailBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const policyDetailsPostPolicies =  usePolicyDetailsPostPoliciesHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsPostPoliciesHook>>>, {data: DomainModelBenchmarkPolicyDetailBody}> = (props) => {
          const {data} = props ?? {};

          return  policyDetailsPostPolicies(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PolicyDetailsPostPoliciesMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsPostPoliciesHook>>>>
    export type PolicyDetailsPostPoliciesMutationBody = DomainModelBenchmarkPolicyDetailBody
    export type PolicyDetailsPostPoliciesMutationError = unknown

    export const usePolicyDetailsPostPolicies = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsPostPoliciesHook>>>, TError,{data: DomainModelBenchmarkPolicyDetailBody}, TContext>, }
) => {

      const mutationOptions = usePolicyDetailsPostPoliciesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePolicyDetailsPutPoliciesHook = () => {
        const policyDetailsPutPolicies = useCustomInstance<DomainModelBenchmarkPolicyDetail>();

        return (
    domainModelBenchmarkPolicyDetailBody: DomainModelBenchmarkPolicyDetailBody,
 ) => {
        return policyDetailsPutPolicies(
          {url: `/api/PolicyDetails/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPolicyDetailBody
    },
          );
        }
      }
    


export const usePolicyDetailsPutPoliciesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsPutPoliciesHook>>>, TError,{data: DomainModelBenchmarkPolicyDetailBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsPutPoliciesHook>>>, TError,{data: DomainModelBenchmarkPolicyDetailBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const policyDetailsPutPolicies =  usePolicyDetailsPutPoliciesHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsPutPoliciesHook>>>, {data: DomainModelBenchmarkPolicyDetailBody}> = (props) => {
          const {data} = props ?? {};

          return  policyDetailsPutPolicies(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PolicyDetailsPutPoliciesMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsPutPoliciesHook>>>>
    export type PolicyDetailsPutPoliciesMutationBody = DomainModelBenchmarkPolicyDetailBody
    export type PolicyDetailsPutPoliciesMutationError = unknown

    export const usePolicyDetailsPutPolicies = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsPutPoliciesHook>>>, TError,{data: DomainModelBenchmarkPolicyDetailBody}, TContext>, }
) => {

      const mutationOptions = usePolicyDetailsPutPoliciesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePolicyDetailsDeletePoliciesHook = () => {
        const policyDetailsDeletePolicies = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return policyDetailsDeletePolicies(
          {url: `/api/PolicyDetails/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPolicyDetailsDeletePoliciesQueryKey = (id: number,) => {
    return [`/api/PolicyDetails/delete/${id}`] as const;
    }

    
export const usePolicyDetailsDeletePoliciesQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePolicyDetailsDeletePoliciesHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsDeletePoliciesHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPolicyDetailsDeletePoliciesQueryKey(id);

  const policyDetailsDeletePolicies =  usePolicyDetailsDeletePoliciesHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsDeletePoliciesHook>>>> = ({ signal }) => policyDetailsDeletePolicies(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsDeletePoliciesHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PolicyDetailsDeletePoliciesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsDeletePoliciesHook>>>>
export type PolicyDetailsDeletePoliciesQueryError = unknown

export const usePolicyDetailsDeletePolicies = <TData = Awaited<ReturnType<ReturnType<typeof usePolicyDetailsDeletePoliciesHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyDetailsDeletePoliciesHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePolicyDetailsDeletePoliciesQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePolicyTypesGetAllPolicyDetailsHook = () => {
        const policyTypesGetAllPolicyDetails = useCustomInstance<DomainModelBenchmarkPolicyType[]>();

        return (
    
 signal?: AbortSignal
) => {
        return policyTypesGetAllPolicyDetails(
          {url: `/api/PolicyTypes/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPolicyTypesGetAllPolicyDetailsQueryKey = () => {
    return [`/api/PolicyTypes/getAll`] as const;
    }

    
export const usePolicyTypesGetAllPolicyDetailsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePolicyTypesGetAllPolicyDetailsHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyTypesGetAllPolicyDetailsHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPolicyTypesGetAllPolicyDetailsQueryKey();

  const policyTypesGetAllPolicyDetails =  usePolicyTypesGetAllPolicyDetailsHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePolicyTypesGetAllPolicyDetailsHook>>>> = ({ signal }) => policyTypesGetAllPolicyDetails(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyTypesGetAllPolicyDetailsHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PolicyTypesGetAllPolicyDetailsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePolicyTypesGetAllPolicyDetailsHook>>>>
export type PolicyTypesGetAllPolicyDetailsQueryError = unknown

export const usePolicyTypesGetAllPolicyDetails = <TData = Awaited<ReturnType<ReturnType<typeof usePolicyTypesGetAllPolicyDetailsHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyTypesGetAllPolicyDetailsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePolicyTypesGetAllPolicyDetailsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePolicyTypesGetHook = () => {
        const policyTypesGet = useCustomInstance<DomainModelBenchmarkPolicyType>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return policyTypesGet(
          {url: `/api/PolicyTypes/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPolicyTypesGetQueryKey = (id: number,) => {
    return [`/api/PolicyTypes/get/${id}`] as const;
    }

    
export const usePolicyTypesGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePolicyTypesGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyTypesGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPolicyTypesGetQueryKey(id);

  const policyTypesGet =  usePolicyTypesGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePolicyTypesGetHook>>>> = ({ signal }) => policyTypesGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyTypesGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PolicyTypesGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePolicyTypesGetHook>>>>
export type PolicyTypesGetQueryError = unknown

export const usePolicyTypesGet = <TData = Awaited<ReturnType<ReturnType<typeof usePolicyTypesGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyTypesGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePolicyTypesGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePolicyTypesPostPoliciesHook = () => {
        const policyTypesPostPolicies = useCustomInstance<DomainModelBenchmarkPolicyType>();

        return (
    domainModelBenchmarkPolicyTypeBody: DomainModelBenchmarkPolicyTypeBody,
 ) => {
        return policyTypesPostPolicies(
          {url: `/api/PolicyTypes/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPolicyTypeBody
    },
          );
        }
      }
    


export const usePolicyTypesPostPoliciesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePolicyTypesPostPoliciesHook>>>, TError,{data: DomainModelBenchmarkPolicyTypeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePolicyTypesPostPoliciesHook>>>, TError,{data: DomainModelBenchmarkPolicyTypeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const policyTypesPostPolicies =  usePolicyTypesPostPoliciesHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePolicyTypesPostPoliciesHook>>>, {data: DomainModelBenchmarkPolicyTypeBody}> = (props) => {
          const {data} = props ?? {};

          return  policyTypesPostPolicies(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PolicyTypesPostPoliciesMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePolicyTypesPostPoliciesHook>>>>
    export type PolicyTypesPostPoliciesMutationBody = DomainModelBenchmarkPolicyTypeBody
    export type PolicyTypesPostPoliciesMutationError = unknown

    export const usePolicyTypesPostPolicies = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePolicyTypesPostPoliciesHook>>>, TError,{data: DomainModelBenchmarkPolicyTypeBody}, TContext>, }
) => {

      const mutationOptions = usePolicyTypesPostPoliciesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePolicyTypesPutPoliciesHook = () => {
        const policyTypesPutPolicies = useCustomInstance<DomainModelBenchmarkPolicyType>();

        return (
    domainModelBenchmarkPolicyTypeBody: DomainModelBenchmarkPolicyTypeBody,
 ) => {
        return policyTypesPutPolicies(
          {url: `/api/PolicyTypes/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPolicyTypeBody
    },
          );
        }
      }
    


export const usePolicyTypesPutPoliciesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePolicyTypesPutPoliciesHook>>>, TError,{data: DomainModelBenchmarkPolicyTypeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePolicyTypesPutPoliciesHook>>>, TError,{data: DomainModelBenchmarkPolicyTypeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const policyTypesPutPolicies =  usePolicyTypesPutPoliciesHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePolicyTypesPutPoliciesHook>>>, {data: DomainModelBenchmarkPolicyTypeBody}> = (props) => {
          const {data} = props ?? {};

          return  policyTypesPutPolicies(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PolicyTypesPutPoliciesMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePolicyTypesPutPoliciesHook>>>>
    export type PolicyTypesPutPoliciesMutationBody = DomainModelBenchmarkPolicyTypeBody
    export type PolicyTypesPutPoliciesMutationError = unknown

    export const usePolicyTypesPutPolicies = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePolicyTypesPutPoliciesHook>>>, TError,{data: DomainModelBenchmarkPolicyTypeBody}, TContext>, }
) => {

      const mutationOptions = usePolicyTypesPutPoliciesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePolicyTypesDeletePoliciesHook = () => {
        const policyTypesDeletePolicies = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return policyTypesDeletePolicies(
          {url: `/api/PolicyTypes/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPolicyTypesDeletePoliciesQueryKey = (id: number,) => {
    return [`/api/PolicyTypes/delete/${id}`] as const;
    }

    
export const usePolicyTypesDeletePoliciesQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePolicyTypesDeletePoliciesHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyTypesDeletePoliciesHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPolicyTypesDeletePoliciesQueryKey(id);

  const policyTypesDeletePolicies =  usePolicyTypesDeletePoliciesHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePolicyTypesDeletePoliciesHook>>>> = ({ signal }) => policyTypesDeletePolicies(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyTypesDeletePoliciesHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PolicyTypesDeletePoliciesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePolicyTypesDeletePoliciesHook>>>>
export type PolicyTypesDeletePoliciesQueryError = unknown

export const usePolicyTypesDeletePolicies = <TData = Awaited<ReturnType<ReturnType<typeof usePolicyTypesDeletePoliciesHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePolicyTypesDeletePoliciesHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePolicyTypesDeletePoliciesQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useProductMarketFinderHook = () => {
        const productMarketFinder = useCustomInstance<DomainModelWritingCompanyProduct[]>();

        return (
    
 signal?: AbortSignal
) => {
        return productMarketFinder(
          {url: `/api/Product/MarketFinder`, method: 'GET', signal
    },
          );
        }
      }
    

export const getProductMarketFinderQueryKey = () => {
    return [`/api/Product/MarketFinder`] as const;
    }

    
export const useProductMarketFinderQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useProductMarketFinderHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductMarketFinderHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProductMarketFinderQueryKey();

  const productMarketFinder =  useProductMarketFinderHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useProductMarketFinderHook>>>> = ({ signal }) => productMarketFinder(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductMarketFinderHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ProductMarketFinderQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProductMarketFinderHook>>>>
export type ProductMarketFinderQueryError = unknown

export const useProductMarketFinder = <TData = Awaited<ReturnType<ReturnType<typeof useProductMarketFinderHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductMarketFinderHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useProductMarketFinderQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useProductGetAllProductHook = () => {
        const productGetAllProduct = useCustomInstance<DomainModelBenchmarkProduct[]>();

        return (
    
 signal?: AbortSignal
) => {
        return productGetAllProduct(
          {url: `/api/Product/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getProductGetAllProductQueryKey = () => {
    return [`/api/Product/getAll`] as const;
    }

    
export const useProductGetAllProductQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useProductGetAllProductHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductGetAllProductHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProductGetAllProductQueryKey();

  const productGetAllProduct =  useProductGetAllProductHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useProductGetAllProductHook>>>> = ({ signal }) => productGetAllProduct(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductGetAllProductHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ProductGetAllProductQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProductGetAllProductHook>>>>
export type ProductGetAllProductQueryError = unknown

export const useProductGetAllProduct = <TData = Awaited<ReturnType<ReturnType<typeof useProductGetAllProductHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductGetAllProductHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useProductGetAllProductQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useProductGetHook = () => {
        const productGet = useCustomInstance<DomainModelBenchmarkProduct>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return productGet(
          {url: `/api/Product/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getProductGetQueryKey = (id: number,) => {
    return [`/api/Product/get/${id}`] as const;
    }

    
export const useProductGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useProductGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProductGetQueryKey(id);

  const productGet =  useProductGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useProductGetHook>>>> = ({ signal }) => productGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ProductGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProductGetHook>>>>
export type ProductGetQueryError = unknown

export const useProductGet = <TData = Awaited<ReturnType<ReturnType<typeof useProductGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useProductGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useProductPostProductHook = () => {
        const productPostProduct = useCustomInstance<DomainModelBenchmarkProduct>();

        return (
    domainModelBenchmarkProductBody: DomainModelBenchmarkProductBody,
 ) => {
        return productPostProduct(
          {url: `/api/Product/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkProductBody
    },
          );
        }
      }
    


export const useProductPostProductMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useProductPostProductHook>>>, TError,{data: DomainModelBenchmarkProductBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useProductPostProductHook>>>, TError,{data: DomainModelBenchmarkProductBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const productPostProduct =  useProductPostProductHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useProductPostProductHook>>>, {data: DomainModelBenchmarkProductBody}> = (props) => {
          const {data} = props ?? {};

          return  productPostProduct(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ProductPostProductMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProductPostProductHook>>>>
    export type ProductPostProductMutationBody = DomainModelBenchmarkProductBody
    export type ProductPostProductMutationError = unknown

    export const useProductPostProduct = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useProductPostProductHook>>>, TError,{data: DomainModelBenchmarkProductBody}, TContext>, }
) => {

      const mutationOptions = useProductPostProductMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useProductPutProductHook = () => {
        const productPutProduct = useCustomInstance<DomainModelBenchmarkProduct>();

        return (
    domainModelBenchmarkProductBody: DomainModelBenchmarkProductBody,
 ) => {
        return productPutProduct(
          {url: `/api/Product/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkProductBody
    },
          );
        }
      }
    


export const useProductPutProductMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useProductPutProductHook>>>, TError,{data: DomainModelBenchmarkProductBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useProductPutProductHook>>>, TError,{data: DomainModelBenchmarkProductBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const productPutProduct =  useProductPutProductHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useProductPutProductHook>>>, {data: DomainModelBenchmarkProductBody}> = (props) => {
          const {data} = props ?? {};

          return  productPutProduct(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ProductPutProductMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProductPutProductHook>>>>
    export type ProductPutProductMutationBody = DomainModelBenchmarkProductBody
    export type ProductPutProductMutationError = unknown

    export const useProductPutProduct = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useProductPutProductHook>>>, TError,{data: DomainModelBenchmarkProductBody}, TContext>, }
) => {

      const mutationOptions = useProductPutProductMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useProductDeleteProductHook = () => {
        const productDeleteProduct = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return productDeleteProduct(
          {url: `/api/Product/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getProductDeleteProductQueryKey = (id: number,) => {
    return [`/api/Product/delete/${id}`] as const;
    }

    
export const useProductDeleteProductQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useProductDeleteProductHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductDeleteProductHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProductDeleteProductQueryKey(id);

  const productDeleteProduct =  useProductDeleteProductHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useProductDeleteProductHook>>>> = ({ signal }) => productDeleteProduct(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductDeleteProductHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ProductDeleteProductQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProductDeleteProductHook>>>>
export type ProductDeleteProductQueryError = unknown

export const useProductDeleteProduct = <TData = Awaited<ReturnType<ReturnType<typeof useProductDeleteProductHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductDeleteProductHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useProductDeleteProductQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useProductGetAllBrokerDetailsHook = () => {
        const productGetAllBrokerDetails = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkProduct>();

        return (
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return productGetAllBrokerDetails(
          {url: `/api/ProductsDetails/GetAllProductDetails/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getProductGetAllBrokerDetailsQueryKey = (startIndex: number,
    endIndex: number,) => {
    return [`/api/ProductsDetails/GetAllProductDetails/${startIndex}/${endIndex}`] as const;
    }

    
export const useProductGetAllBrokerDetailsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useProductGetAllBrokerDetailsHook>>>, TError = unknown>(startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductGetAllBrokerDetailsHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProductGetAllBrokerDetailsQueryKey(startIndex,endIndex);

  const productGetAllBrokerDetails =  useProductGetAllBrokerDetailsHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useProductGetAllBrokerDetailsHook>>>> = ({ signal }) => productGetAllBrokerDetails(startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductGetAllBrokerDetailsHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ProductGetAllBrokerDetailsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProductGetAllBrokerDetailsHook>>>>
export type ProductGetAllBrokerDetailsQueryError = unknown

export const useProductGetAllBrokerDetails = <TData = Awaited<ReturnType<ReturnType<typeof useProductGetAllBrokerDetailsHook>>>, TError = unknown>(
 startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductGetAllBrokerDetailsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useProductGetAllBrokerDetailsQueryOptions(startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useProductGetProductsByWritingCompanyIDHook = () => {
        const productGetProductsByWritingCompanyID = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkProduct>();

        return (
    writingCompanyID: number,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return productGetProductsByWritingCompanyID(
          {url: `/api/ProductsDetails/GetProductsByWritingCompanyID/${writingCompanyID}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getProductGetProductsByWritingCompanyIDQueryKey = (writingCompanyID: number,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/ProductsDetails/GetProductsByWritingCompanyID/${writingCompanyID}/${startIndex}/${endIndex}`] as const;
    }

    
export const useProductGetProductsByWritingCompanyIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useProductGetProductsByWritingCompanyIDHook>>>, TError = unknown>(writingCompanyID: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductGetProductsByWritingCompanyIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProductGetProductsByWritingCompanyIDQueryKey(writingCompanyID,startIndex,endIndex);

  const productGetProductsByWritingCompanyID =  useProductGetProductsByWritingCompanyIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useProductGetProductsByWritingCompanyIDHook>>>> = ({ signal }) => productGetProductsByWritingCompanyID(writingCompanyID,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(writingCompanyID && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductGetProductsByWritingCompanyIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ProductGetProductsByWritingCompanyIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProductGetProductsByWritingCompanyIDHook>>>>
export type ProductGetProductsByWritingCompanyIDQueryError = unknown

export const useProductGetProductsByWritingCompanyID = <TData = Awaited<ReturnType<ReturnType<typeof useProductGetProductsByWritingCompanyIDHook>>>, TError = unknown>(
 writingCompanyID: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductGetProductsByWritingCompanyIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useProductGetProductsByWritingCompanyIDQueryOptions(writingCompanyID,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useProductiondividerGetAllPropertyHook = () => {
        const productiondividerGetAllProperty = useCustomInstance<DomainModelProductionDivider[]>();

        return (
    
 signal?: AbortSignal
) => {
        return productiondividerGetAllProperty(
          {url: `/api/ProductionDivider/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getProductiondividerGetAllPropertyQueryKey = () => {
    return [`/api/ProductionDivider/getAll`] as const;
    }

    
export const useProductiondividerGetAllPropertyQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useProductiondividerGetAllPropertyHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductiondividerGetAllPropertyHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProductiondividerGetAllPropertyQueryKey();

  const productiondividerGetAllProperty =  useProductiondividerGetAllPropertyHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useProductiondividerGetAllPropertyHook>>>> = ({ signal }) => productiondividerGetAllProperty(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductiondividerGetAllPropertyHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ProductiondividerGetAllPropertyQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProductiondividerGetAllPropertyHook>>>>
export type ProductiondividerGetAllPropertyQueryError = unknown

export const useProductiondividerGetAllProperty = <TData = Awaited<ReturnType<ReturnType<typeof useProductiondividerGetAllPropertyHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductiondividerGetAllPropertyHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useProductiondividerGetAllPropertyQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useProductiondividerGetBusinessProducerProductionHook = () => {
        const productiondividerGetBusinessProducerProduction = useCustomInstance<DomainModelBusinessProducerProduction[]>();

        return (
    
 signal?: AbortSignal
) => {
        return productiondividerGetBusinessProducerProduction(
          {url: `/api/NewBusinessProducerProduction/BusinessProducerProduction`, method: 'GET', signal
    },
          );
        }
      }
    

export const getProductiondividerGetBusinessProducerProductionQueryKey = () => {
    return [`/api/NewBusinessProducerProduction/BusinessProducerProduction`] as const;
    }

    
export const useProductiondividerGetBusinessProducerProductionQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useProductiondividerGetBusinessProducerProductionHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductiondividerGetBusinessProducerProductionHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProductiondividerGetBusinessProducerProductionQueryKey();

  const productiondividerGetBusinessProducerProduction =  useProductiondividerGetBusinessProducerProductionHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useProductiondividerGetBusinessProducerProductionHook>>>> = ({ signal }) => productiondividerGetBusinessProducerProduction(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductiondividerGetBusinessProducerProductionHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ProductiondividerGetBusinessProducerProductionQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProductiondividerGetBusinessProducerProductionHook>>>>
export type ProductiondividerGetBusinessProducerProductionQueryError = unknown

export const useProductiondividerGetBusinessProducerProduction = <TData = Awaited<ReturnType<ReturnType<typeof useProductiondividerGetBusinessProducerProductionHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductiondividerGetBusinessProducerProductionHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useProductiondividerGetBusinessProducerProductionQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useProductiondividerGetProductionHook = () => {
        const productiondividerGetProduction = useCustomInstance<DomainModelProductionDivider[]>();

        return (
    
 signal?: AbortSignal
) => {
        return productiondividerGetProduction(
          {url: `/api/NewBusinessProducerProduction/Production`, method: 'GET', signal
    },
          );
        }
      }
    

export const getProductiondividerGetProductionQueryKey = () => {
    return [`/api/NewBusinessProducerProduction/Production`] as const;
    }

    
export const useProductiondividerGetProductionQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useProductiondividerGetProductionHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductiondividerGetProductionHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProductiondividerGetProductionQueryKey();

  const productiondividerGetProduction =  useProductiondividerGetProductionHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useProductiondividerGetProductionHook>>>> = ({ signal }) => productiondividerGetProduction(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductiondividerGetProductionHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ProductiondividerGetProductionQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProductiondividerGetProductionHook>>>>
export type ProductiondividerGetProductionQueryError = unknown

export const useProductiondividerGetProduction = <TData = Awaited<ReturnType<ReturnType<typeof useProductiondividerGetProductionHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductiondividerGetProductionHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useProductiondividerGetProductionQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useProductiondividerGetProducerProductionHook = () => {
        const productiondividerGetProducerProduction = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelProductionDivider>();

        return (
    startIndex: number,
    endIndex: number,
    searchFilter: string,
    sortColumn: string,
    sortingOrder: string,
 signal?: AbortSignal
) => {
        return productiondividerGetProducerProduction(
          {url: `/api/NewBusinessProducerProduction/ProducerProduction/${startIndex}/${endIndex}/${searchFilter}/${sortColumn}/${sortingOrder}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getProductiondividerGetProducerProductionQueryKey = (startIndex: number,
    endIndex: number,
    searchFilter: string,
    sortColumn: string,
    sortingOrder: string,) => {
    return [`/api/NewBusinessProducerProduction/ProducerProduction/${startIndex}/${endIndex}/${searchFilter}/${sortColumn}/${sortingOrder}`] as const;
    }

    
export const useProductiondividerGetProducerProductionQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useProductiondividerGetProducerProductionHook>>>, TError = unknown>(startIndex: number,
    endIndex: number,
    searchFilter: string,
    sortColumn: string,
    sortingOrder: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductiondividerGetProducerProductionHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProductiondividerGetProducerProductionQueryKey(startIndex,endIndex,searchFilter,sortColumn,sortingOrder);

  const productiondividerGetProducerProduction =  useProductiondividerGetProducerProductionHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useProductiondividerGetProducerProductionHook>>>> = ({ signal }) => productiondividerGetProducerProduction(startIndex,endIndex,searchFilter,sortColumn,sortingOrder, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(startIndex && endIndex && searchFilter && sortColumn && sortingOrder), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductiondividerGetProducerProductionHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ProductiondividerGetProducerProductionQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProductiondividerGetProducerProductionHook>>>>
export type ProductiondividerGetProducerProductionQueryError = unknown

export const useProductiondividerGetProducerProduction = <TData = Awaited<ReturnType<ReturnType<typeof useProductiondividerGetProducerProductionHook>>>, TError = unknown>(
 startIndex: number,
    endIndex: number,
    searchFilter: string,
    sortColumn: string,
    sortingOrder: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProductiondividerGetProducerProductionHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useProductiondividerGetProducerProductionQueryOptions(startIndex,endIndex,searchFilter,sortColumn,sortingOrder,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetAllPropertyHook = () => {
        const propertyGetAllProperty = useCustomInstance<DomainModelBenchmarkProperty[]>();

        return (
    
 signal?: AbortSignal
) => {
        return propertyGetAllProperty(
          {url: `/api/Property/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetAllPropertyQueryKey = () => {
    return [`/api/Property/getAll`] as const;
    }

    
export const usePropertyGetAllPropertyQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPropertyHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPropertyHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetAllPropertyQueryKey();

  const propertyGetAllProperty =  usePropertyGetAllPropertyHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPropertyHook>>>> = ({ signal }) => propertyGetAllProperty(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPropertyHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetAllPropertyQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPropertyHook>>>>
export type PropertyGetAllPropertyQueryError = unknown

export const usePropertyGetAllProperty = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPropertyHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPropertyHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetAllPropertyQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetAllActivePropertiesByAgentIDHook = () => {
        const propertyGetAllActivePropertiesByAgentID = useCustomInstance<DomainModelBenchmarkProperty[]>();

        return (
    agentID: number,
 signal?: AbortSignal
) => {
        return propertyGetAllActivePropertiesByAgentID(
          {url: `/api/Agent/Property/Active/${agentID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetAllActivePropertiesByAgentIDQueryKey = (agentID: number,) => {
    return [`/api/Agent/Property/Active/${agentID}`] as const;
    }

    
export const usePropertyGetAllActivePropertiesByAgentIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetAllActivePropertiesByAgentIDHook>>>, TError = unknown>(agentID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllActivePropertiesByAgentIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetAllActivePropertiesByAgentIDQueryKey(agentID);

  const propertyGetAllActivePropertiesByAgentID =  usePropertyGetAllActivePropertiesByAgentIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllActivePropertiesByAgentIDHook>>>> = ({ signal }) => propertyGetAllActivePropertiesByAgentID(agentID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(agentID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllActivePropertiesByAgentIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetAllActivePropertiesByAgentIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllActivePropertiesByAgentIDHook>>>>
export type PropertyGetAllActivePropertiesByAgentIDQueryError = unknown

export const usePropertyGetAllActivePropertiesByAgentID = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetAllActivePropertiesByAgentIDHook>>>, TError = unknown>(
 agentID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllActivePropertiesByAgentIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetAllActivePropertiesByAgentIDQueryOptions(agentID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetAllPendingPropertiesByAgentIDHook = () => {
        const propertyGetAllPendingPropertiesByAgentID = useCustomInstance<DomainModelBenchmarkProperty[]>();

        return (
    agentID: number,
 signal?: AbortSignal
) => {
        return propertyGetAllPendingPropertiesByAgentID(
          {url: `/api/Agent/Property/Pending/${agentID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetAllPendingPropertiesByAgentIDQueryKey = (agentID: number,) => {
    return [`/api/Agent/Property/Pending/${agentID}`] as const;
    }

    
export const usePropertyGetAllPendingPropertiesByAgentIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPendingPropertiesByAgentIDHook>>>, TError = unknown>(agentID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPendingPropertiesByAgentIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetAllPendingPropertiesByAgentIDQueryKey(agentID);

  const propertyGetAllPendingPropertiesByAgentID =  usePropertyGetAllPendingPropertiesByAgentIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPendingPropertiesByAgentIDHook>>>> = ({ signal }) => propertyGetAllPendingPropertiesByAgentID(agentID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(agentID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPendingPropertiesByAgentIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetAllPendingPropertiesByAgentIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPendingPropertiesByAgentIDHook>>>>
export type PropertyGetAllPendingPropertiesByAgentIDQueryError = unknown

export const usePropertyGetAllPendingPropertiesByAgentID = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPendingPropertiesByAgentIDHook>>>, TError = unknown>(
 agentID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPendingPropertiesByAgentIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetAllPendingPropertiesByAgentIDQueryOptions(agentID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetPropertyTypePropertyUnitByCustomerIdHook = () => {
        const propertyGetPropertyTypePropertyUnitByCustomerId = useCustomInstance<DomainModelBenchmarkProperty[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return propertyGetPropertyTypePropertyUnitByCustomerId(
          {url: `/api/Property/Get/PropertyTypePropertyUnitByCustomerId/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetPropertyTypePropertyUnitByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/Property/Get/PropertyTypePropertyUnitByCustomerId/${customerId}`] as const;
    }

    
export const usePropertyGetPropertyTypePropertyUnitByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyTypePropertyUnitByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyTypePropertyUnitByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetPropertyTypePropertyUnitByCustomerIdQueryKey(customerId);

  const propertyGetPropertyTypePropertyUnitByCustomerId =  usePropertyGetPropertyTypePropertyUnitByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyTypePropertyUnitByCustomerIdHook>>>> = ({ signal }) => propertyGetPropertyTypePropertyUnitByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyTypePropertyUnitByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetPropertyTypePropertyUnitByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyTypePropertyUnitByCustomerIdHook>>>>
export type PropertyGetPropertyTypePropertyUnitByCustomerIdQueryError = unknown

export const usePropertyGetPropertyTypePropertyUnitByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyTypePropertyUnitByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyTypePropertyUnitByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetPropertyTypePropertyUnitByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetHook = () => {
        const propertyGet = useCustomInstance<DomainModelBenchmarkProperty>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return propertyGet(
          {url: `/api/Property/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetQueryKey = (id: number,) => {
    return [`/api/Property/get/${id}`] as const;
    }

    
export const usePropertyGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetQueryKey(id);

  const propertyGet =  usePropertyGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetHook>>>> = ({ signal }) => propertyGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetHook>>>>
export type PropertyGetQueryError = unknown

export const usePropertyGet = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetAllUsersHook = () => {
        const propertyGetAllUsers = useCustomInstance<DomainModelUser[]>();

        return (
    
 signal?: AbortSignal
) => {
        return propertyGetAllUsers(
          {url: `/api/Property/users`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetAllUsersQueryKey = () => {
    return [`/api/Property/users`] as const;
    }

    
export const usePropertyGetAllUsersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetAllUsersHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllUsersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetAllUsersQueryKey();

  const propertyGetAllUsers =  usePropertyGetAllUsersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllUsersHook>>>> = ({ signal }) => propertyGetAllUsers(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllUsersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetAllUsersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllUsersHook>>>>
export type PropertyGetAllUsersQueryError = unknown

export const usePropertyGetAllUsers = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetAllUsersHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllUsersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetAllUsersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetAllPropertyByStatusHook = () => {
        const propertyGetAllPropertyByStatus = useCustomInstance<DomainModelBenchmarkProperty[]>();

        return (
    statusId: number,
 signal?: AbortSignal
) => {
        return propertyGetAllPropertyByStatus(
          {url: `/api/statuses/${statusId}/Property`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetAllPropertyByStatusQueryKey = (statusId: number,) => {
    return [`/api/statuses/${statusId}/Property`] as const;
    }

    
export const usePropertyGetAllPropertyByStatusQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPropertyByStatusHook>>>, TError = unknown>(statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPropertyByStatusHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetAllPropertyByStatusQueryKey(statusId);

  const propertyGetAllPropertyByStatus =  usePropertyGetAllPropertyByStatusHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPropertyByStatusHook>>>> = ({ signal }) => propertyGetAllPropertyByStatus(statusId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(statusId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPropertyByStatusHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetAllPropertyByStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPropertyByStatusHook>>>>
export type PropertyGetAllPropertyByStatusQueryError = unknown

export const usePropertyGetAllPropertyByStatus = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPropertyByStatusHook>>>, TError = unknown>(
 statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPropertyByStatusHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetAllPropertyByStatusQueryOptions(statusId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetPropertyByCustomerIdHook = () => {
        const propertyGetPropertyByCustomerId = useCustomInstance<DomainModelBenchmarkProperty[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return propertyGetPropertyByCustomerId(
          {url: `/api/customers/${customerId}/Property`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetPropertyByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/Property`] as const;
    }

    
export const usePropertyGetPropertyByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetPropertyByCustomerIdQueryKey(customerId);

  const propertyGetPropertyByCustomerId =  usePropertyGetPropertyByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyByCustomerIdHook>>>> = ({ signal }) => propertyGetPropertyByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetPropertyByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyByCustomerIdHook>>>>
export type PropertyGetPropertyByCustomerIdQueryError = unknown

export const usePropertyGetPropertyByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetPropertyByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetAllPropertyByCustomerIdHook = () => {
        const propertyGetAllPropertyByCustomerId = useCustomInstance<DomainModelBenchmarkProperty[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return propertyGetAllPropertyByCustomerId(
          {url: `/api/customers/${customerId}/Property/all`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetAllPropertyByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/Property/all`] as const;
    }

    
export const usePropertyGetAllPropertyByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPropertyByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPropertyByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetAllPropertyByCustomerIdQueryKey(customerId);

  const propertyGetAllPropertyByCustomerId =  usePropertyGetAllPropertyByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPropertyByCustomerIdHook>>>> = ({ signal }) => propertyGetAllPropertyByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPropertyByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetAllPropertyByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPropertyByCustomerIdHook>>>>
export type PropertyGetAllPropertyByCustomerIdQueryError = unknown

export const usePropertyGetAllPropertyByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPropertyByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllPropertyByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetAllPropertyByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetActivePropertyByCustomerIdHook = () => {
        const propertyGetActivePropertyByCustomerId = useCustomInstance<DomainModelBenchmarkProperty[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return propertyGetActivePropertyByCustomerId(
          {url: `/api/customers/${customerId}/ActiveProperty`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetActivePropertyByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/ActiveProperty`] as const;
    }

    
export const usePropertyGetActivePropertyByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetActivePropertyByCustomerIdQueryKey(customerId);

  const propertyGetActivePropertyByCustomerId =  usePropertyGetActivePropertyByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyByCustomerIdHook>>>> = ({ signal }) => propertyGetActivePropertyByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetActivePropertyByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyByCustomerIdHook>>>>
export type PropertyGetActivePropertyByCustomerIdQueryError = unknown

export const usePropertyGetActivePropertyByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetActivePropertyByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetActivePropertyModelByCustomerIdHook = () => {
        const propertyGetActivePropertyModelByCustomerId = useCustomInstance<DomainModelBenchmarkProperty[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return propertyGetActivePropertyModelByCustomerId(
          {url: `/api/customers/${customerId}/GetActivePropertyModelByCustomerId`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetActivePropertyModelByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/GetActivePropertyModelByCustomerId`] as const;
    }

    
export const usePropertyGetActivePropertyModelByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyModelByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyModelByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetActivePropertyModelByCustomerIdQueryKey(customerId);

  const propertyGetActivePropertyModelByCustomerId =  usePropertyGetActivePropertyModelByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyModelByCustomerIdHook>>>> = ({ signal }) => propertyGetActivePropertyModelByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyModelByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetActivePropertyModelByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyModelByCustomerIdHook>>>>
export type PropertyGetActivePropertyModelByCustomerIdQueryError = unknown

export const usePropertyGetActivePropertyModelByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyModelByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyModelByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetActivePropertyModelByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetPendingPropertyByCustomerIdHook = () => {
        const propertyGetPendingPropertyByCustomerId = useCustomInstance<DomainModelBenchmarkProperty[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return propertyGetPendingPropertyByCustomerId(
          {url: `/api/customers/${customerId}/PendingProperty`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetPendingPropertyByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/PendingProperty`] as const;
    }

    
export const usePropertyGetPendingPropertyByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetPendingPropertyByCustomerIdQueryKey(customerId);

  const propertyGetPendingPropertyByCustomerId =  usePropertyGetPendingPropertyByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyByCustomerIdHook>>>> = ({ signal }) => propertyGetPendingPropertyByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetPendingPropertyByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyByCustomerIdHook>>>>
export type PropertyGetPendingPropertyByCustomerIdQueryError = unknown

export const usePropertyGetPendingPropertyByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetPendingPropertyByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetPendingPropertyListInsuredNameByCustomerIDHook = () => {
        const propertyGetPendingPropertyListInsuredNameByCustomerID = useCustomInstance<DomainModelBenchmarkProperty[]>();

        return (
    customerId: number,
    insuredName: string,
 signal?: AbortSignal
) => {
        return propertyGetPendingPropertyListInsuredNameByCustomerID(
          {url: `/api/customers/${customerId}/${insuredName}/GetPendingPropertyListInsuredNameByCustomerID`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetPendingPropertyListInsuredNameByCustomerIDQueryKey = (customerId: number,
    insuredName: string,) => {
    return [`/api/customers/${customerId}/${insuredName}/GetPendingPropertyListInsuredNameByCustomerID`] as const;
    }

    
export const usePropertyGetPendingPropertyListInsuredNameByCustomerIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyListInsuredNameByCustomerIDHook>>>, TError = unknown>(customerId: number,
    insuredName: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyListInsuredNameByCustomerIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetPendingPropertyListInsuredNameByCustomerIDQueryKey(customerId,insuredName);

  const propertyGetPendingPropertyListInsuredNameByCustomerID =  usePropertyGetPendingPropertyListInsuredNameByCustomerIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyListInsuredNameByCustomerIDHook>>>> = ({ signal }) => propertyGetPendingPropertyListInsuredNameByCustomerID(customerId,insuredName, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && insuredName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyListInsuredNameByCustomerIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetPendingPropertyListInsuredNameByCustomerIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyListInsuredNameByCustomerIDHook>>>>
export type PropertyGetPendingPropertyListInsuredNameByCustomerIDQueryError = unknown

export const usePropertyGetPendingPropertyListInsuredNameByCustomerID = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyListInsuredNameByCustomerIDHook>>>, TError = unknown>(
 customerId: number,
    insuredName: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyListInsuredNameByCustomerIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetPendingPropertyListInsuredNameByCustomerIDQueryOptions(customerId,insuredName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyPostPropertyHook = () => {
        const propertyPostProperty = useCustomInstance<DomainModelBenchmarkProperty>();

        return (
    domainModelBenchmarkPropertyBody: DomainModelBenchmarkPropertyBody,
 ) => {
        return propertyPostProperty(
          {url: `/api/Property/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyBody
    },
          );
        }
      }
    


export const usePropertyPostPropertyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyPostPropertyHook>>>, TError,{data: DomainModelBenchmarkPropertyBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyPostPropertyHook>>>, TError,{data: DomainModelBenchmarkPropertyBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyPostProperty =  usePropertyPostPropertyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyPostPropertyHook>>>, {data: DomainModelBenchmarkPropertyBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyPostProperty(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyPostPropertyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyPostPropertyHook>>>>
    export type PropertyPostPropertyMutationBody = DomainModelBenchmarkPropertyBody
    export type PropertyPostPropertyMutationError = unknown

    export const usePropertyPostProperty = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyPostPropertyHook>>>, TError,{data: DomainModelBenchmarkPropertyBody}, TContext>, }
) => {

      const mutationOptions = usePropertyPostPropertyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyRatePropertyHook = () => {
        const propertyRateProperty = useCustomInstance<DomainModelBenchmarkProperty>();

        return (
    domainModelBenchmarkPropertyBody: DomainModelBenchmarkPropertyBody,
 ) => {
        return propertyRateProperty(
          {url: `/api/Property/rate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyBody
    },
          );
        }
      }
    


export const usePropertyRatePropertyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyRatePropertyHook>>>, TError,{data: DomainModelBenchmarkPropertyBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyRatePropertyHook>>>, TError,{data: DomainModelBenchmarkPropertyBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyRateProperty =  usePropertyRatePropertyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyRatePropertyHook>>>, {data: DomainModelBenchmarkPropertyBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyRateProperty(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyRatePropertyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyRatePropertyHook>>>>
    export type PropertyRatePropertyMutationBody = DomainModelBenchmarkPropertyBody
    export type PropertyRatePropertyMutationError = unknown

    export const usePropertyRateProperty = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyRatePropertyHook>>>, TError,{data: DomainModelBenchmarkPropertyBody}, TContext>, }
) => {

      const mutationOptions = usePropertyRatePropertyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyEditPropertyHook = () => {
        const propertyEditProperty = useCustomInstance<DomainModelBenchmarkProperty>();

        return (
    domainModelBenchmarkPropertyBody: DomainModelBenchmarkPropertyBody,
 ) => {
        return propertyEditProperty(
          {url: `/api/Property/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyBody
    },
          );
        }
      }
    


export const usePropertyEditPropertyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyEditPropertyHook>>>, TError,{data: DomainModelBenchmarkPropertyBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyEditPropertyHook>>>, TError,{data: DomainModelBenchmarkPropertyBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyEditProperty =  usePropertyEditPropertyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyEditPropertyHook>>>, {data: DomainModelBenchmarkPropertyBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyEditProperty(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyEditPropertyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyEditPropertyHook>>>>
    export type PropertyEditPropertyMutationBody = DomainModelBenchmarkPropertyBody
    export type PropertyEditPropertyMutationError = unknown

    export const usePropertyEditProperty = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyEditPropertyHook>>>, TError,{data: DomainModelBenchmarkPropertyBody}, TContext>, }
) => {

      const mutationOptions = usePropertyEditPropertyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyEditActivePropertyHook = () => {
        const propertyEditActiveProperty = useCustomInstance<DomainModelBenchmarkProperty>();

        return (
    domainModelBenchmarkPropertyBody: DomainModelBenchmarkPropertyBody,
 ) => {
        return propertyEditActiveProperty(
          {url: `/api/Property/Active/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyBody
    },
          );
        }
      }
    


export const usePropertyEditActivePropertyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyEditActivePropertyHook>>>, TError,{data: DomainModelBenchmarkPropertyBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyEditActivePropertyHook>>>, TError,{data: DomainModelBenchmarkPropertyBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyEditActiveProperty =  usePropertyEditActivePropertyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyEditActivePropertyHook>>>, {data: DomainModelBenchmarkPropertyBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyEditActiveProperty(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyEditActivePropertyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyEditActivePropertyHook>>>>
    export type PropertyEditActivePropertyMutationBody = DomainModelBenchmarkPropertyBody
    export type PropertyEditActivePropertyMutationError = unknown

    export const usePropertyEditActiveProperty = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyEditActivePropertyHook>>>, TError,{data: DomainModelBenchmarkPropertyBody}, TContext>, }
) => {

      const mutationOptions = usePropertyEditActivePropertyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyConvertToAssetHook = () => {
        const propertyConvertToAsset = useCustomInstance<DomainModelBenchmarkProperty>();

        return (
    domainModelBenchmarkPropertyBody: DomainModelBenchmarkPropertyBody,
 ) => {
        return propertyConvertToAsset(
          {url: `/api/Property/ConvertToAsset`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyBody
    },
          );
        }
      }
    


export const usePropertyConvertToAssetMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyConvertToAssetHook>>>, TError,{data: DomainModelBenchmarkPropertyBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyConvertToAssetHook>>>, TError,{data: DomainModelBenchmarkPropertyBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyConvertToAsset =  usePropertyConvertToAssetHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyConvertToAssetHook>>>, {data: DomainModelBenchmarkPropertyBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyConvertToAsset(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyConvertToAssetMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyConvertToAssetHook>>>>
    export type PropertyConvertToAssetMutationBody = DomainModelBenchmarkPropertyBody
    export type PropertyConvertToAssetMutationError = unknown

    export const usePropertyConvertToAsset = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyConvertToAssetHook>>>, TError,{data: DomainModelBenchmarkPropertyBody}, TContext>, }
) => {

      const mutationOptions = usePropertyConvertToAssetMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyDeletePropertyHook = () => {
        const propertyDeleteProperty = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return propertyDeleteProperty(
          {url: `/api/Property/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyDeletePropertyQueryKey = (id: number,) => {
    return [`/api/Property/delete/${id}`] as const;
    }

    
export const usePropertyDeletePropertyQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyDeletePropertyHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyDeletePropertyHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyDeletePropertyQueryKey(id);

  const propertyDeleteProperty =  usePropertyDeletePropertyHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyDeletePropertyHook>>>> = ({ signal }) => propertyDeleteProperty(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyDeletePropertyHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyDeletePropertyQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyDeletePropertyHook>>>>
export type PropertyDeletePropertyQueryError = unknown

export const usePropertyDeleteProperty = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyDeletePropertyHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyDeletePropertyHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyDeletePropertyQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyDeletePropertyMortgageCompanyHook = () => {
        const propertyDeletePropertyMortgageCompany = useCustomInstance<boolean>();

        return (
    propertyid: number,
 signal?: AbortSignal
) => {
        return propertyDeletePropertyMortgageCompany(
          {url: `/api/Property/PropertyMortgageCompany/delete/${propertyid}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyDeletePropertyMortgageCompanyQueryKey = (propertyid: number,) => {
    return [`/api/Property/PropertyMortgageCompany/delete/${propertyid}`] as const;
    }

    
export const usePropertyDeletePropertyMortgageCompanyQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyDeletePropertyMortgageCompanyHook>>>, TError = unknown>(propertyid: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyDeletePropertyMortgageCompanyHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyDeletePropertyMortgageCompanyQueryKey(propertyid);

  const propertyDeletePropertyMortgageCompany =  usePropertyDeletePropertyMortgageCompanyHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyDeletePropertyMortgageCompanyHook>>>> = ({ signal }) => propertyDeletePropertyMortgageCompany(propertyid, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(propertyid), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyDeletePropertyMortgageCompanyHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyDeletePropertyMortgageCompanyQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyDeletePropertyMortgageCompanyHook>>>>
export type PropertyDeletePropertyMortgageCompanyQueryError = unknown

export const usePropertyDeletePropertyMortgageCompany = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyDeletePropertyMortgageCompanyHook>>>, TError = unknown>(
 propertyid: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyDeletePropertyMortgageCompanyHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyDeletePropertyMortgageCompanyQueryOptions(propertyid,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyUpdatePropertyHook = () => {
        const propertyUpdateProperty = useCustomInstance<DomainModelBenchmarkProperty[]>();

        return (
    domainModelBenchmarkPropertyArrayBody: DomainModelBenchmarkPropertyArrayBody,
 ) => {
        return propertyUpdateProperty(
          {url: `/api/Property/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyArrayBody
    },
          );
        }
      }
    


export const usePropertyUpdatePropertyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyUpdatePropertyHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyUpdatePropertyHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyUpdateProperty =  usePropertyUpdatePropertyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyUpdatePropertyHook>>>, {data: DomainModelBenchmarkPropertyArrayBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyUpdateProperty(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyUpdatePropertyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyUpdatePropertyHook>>>>
    export type PropertyUpdatePropertyMutationBody = DomainModelBenchmarkPropertyArrayBody
    export type PropertyUpdatePropertyMutationError = unknown

    export const usePropertyUpdateProperty = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyUpdatePropertyHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext>, }
) => {

      const mutationOptions = usePropertyUpdatePropertyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyUpdatePropertyDetailsHook = () => {
        const propertyUpdatePropertyDetails = useCustomInstance<DomainModelBenchmarkProperty[]>();

        return (
    domainModelBenchmarkPropertyArrayBody: DomainModelBenchmarkPropertyArrayBody,
 ) => {
        return propertyUpdatePropertyDetails(
          {url: `/api/Property/updatePropertyDetails`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyArrayBody
    },
          );
        }
      }
    


export const usePropertyUpdatePropertyDetailsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyUpdatePropertyDetailsHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyUpdatePropertyDetailsHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyUpdatePropertyDetails =  usePropertyUpdatePropertyDetailsHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyUpdatePropertyDetailsHook>>>, {data: DomainModelBenchmarkPropertyArrayBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyUpdatePropertyDetails(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyUpdatePropertyDetailsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyUpdatePropertyDetailsHook>>>>
    export type PropertyUpdatePropertyDetailsMutationBody = DomainModelBenchmarkPropertyArrayBody
    export type PropertyUpdatePropertyDetailsMutationError = unknown

    export const usePropertyUpdatePropertyDetails = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyUpdatePropertyDetailsHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext>, }
) => {

      const mutationOptions = usePropertyUpdatePropertyDetailsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyConvertToAssetAllHook = () => {
        const propertyConvertToAssetAll = useCustomInstance<DomainModelBenchmarkProperty[]>();

        return (
    domainModelBenchmarkPropertyArrayBody: DomainModelBenchmarkPropertyArrayBody,
 ) => {
        return propertyConvertToAssetAll(
          {url: `/api/Property/ConvertToAssetAll`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyArrayBody
    },
          );
        }
      }
    


export const usePropertyConvertToAssetAllMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyConvertToAssetAllHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyConvertToAssetAllHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyConvertToAssetAll =  usePropertyConvertToAssetAllHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyConvertToAssetAllHook>>>, {data: DomainModelBenchmarkPropertyArrayBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyConvertToAssetAll(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyConvertToAssetAllMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyConvertToAssetAllHook>>>>
    export type PropertyConvertToAssetAllMutationBody = DomainModelBenchmarkPropertyArrayBody
    export type PropertyConvertToAssetAllMutationError = unknown

    export const usePropertyConvertToAssetAll = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyConvertToAssetAllHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext>, }
) => {

      const mutationOptions = usePropertyConvertToAssetAllMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyConvertToAssetEndorsementHook = () => {
        const propertyConvertToAssetEndorsement = useCustomInstance<DomainModelBenchmarkProperty>();

        return (
    domainModelBenchmarkPropertyBody: DomainModelBenchmarkPropertyBody,
 ) => {
        return propertyConvertToAssetEndorsement(
          {url: `/api/Property/ConvertToAssetEndorsement`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyBody
    },
          );
        }
      }
    


export const usePropertyConvertToAssetEndorsementMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyConvertToAssetEndorsementHook>>>, TError,{data: DomainModelBenchmarkPropertyBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyConvertToAssetEndorsementHook>>>, TError,{data: DomainModelBenchmarkPropertyBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyConvertToAssetEndorsement =  usePropertyConvertToAssetEndorsementHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyConvertToAssetEndorsementHook>>>, {data: DomainModelBenchmarkPropertyBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyConvertToAssetEndorsement(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyConvertToAssetEndorsementMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyConvertToAssetEndorsementHook>>>>
    export type PropertyConvertToAssetEndorsementMutationBody = DomainModelBenchmarkPropertyBody
    export type PropertyConvertToAssetEndorsementMutationError = unknown

    export const usePropertyConvertToAssetEndorsement = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyConvertToAssetEndorsementHook>>>, TError,{data: DomainModelBenchmarkPropertyBody}, TContext>, }
) => {

      const mutationOptions = usePropertyConvertToAssetEndorsementMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyBindPolicyWithAgencyCreditHook = () => {
        const propertyBindPolicyWithAgencyCredit = useCustomInstance<DomainModelBenchmarkProperty[]>();

        return (
    domainModelBenchmarkPropertyArrayBody: DomainModelBenchmarkPropertyArrayBody,
 ) => {
        return propertyBindPolicyWithAgencyCredit(
          {url: `/api/Property/BindPolicyWithAgencyCredit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyArrayBody
    },
          );
        }
      }
    


export const usePropertyBindPolicyWithAgencyCreditMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyBindPolicyWithAgencyCreditHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyBindPolicyWithAgencyCreditHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyBindPolicyWithAgencyCredit =  usePropertyBindPolicyWithAgencyCreditHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyBindPolicyWithAgencyCreditHook>>>, {data: DomainModelBenchmarkPropertyArrayBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyBindPolicyWithAgencyCredit(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyBindPolicyWithAgencyCreditMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyBindPolicyWithAgencyCreditHook>>>>
    export type PropertyBindPolicyWithAgencyCreditMutationBody = DomainModelBenchmarkPropertyArrayBody
    export type PropertyBindPolicyWithAgencyCreditMutationError = unknown

    export const usePropertyBindPolicyWithAgencyCredit = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyBindPolicyWithAgencyCreditHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext>, }
) => {

      const mutationOptions = usePropertyBindPolicyWithAgencyCreditMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyDeletePropertyByIDsHook = () => {
        const propertyDeletePropertyByIDs = useCustomInstance<DomainModelBenchmarkProperty[]>();

        return (
    ids: string,
 signal?: AbortSignal
) => {
        return propertyDeletePropertyByIDs(
          {url: `/api/Property/DeletePropertyByIDs/${ids}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyDeletePropertyByIDsQueryKey = (ids: string,) => {
    return [`/api/Property/DeletePropertyByIDs/${ids}`] as const;
    }

    
export const usePropertyDeletePropertyByIDsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyDeletePropertyByIDsHook>>>, TError = unknown>(ids: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyDeletePropertyByIDsHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyDeletePropertyByIDsQueryKey(ids);

  const propertyDeletePropertyByIDs =  usePropertyDeletePropertyByIDsHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyDeletePropertyByIDsHook>>>> = ({ signal }) => propertyDeletePropertyByIDs(ids, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ids), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyDeletePropertyByIDsHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyDeletePropertyByIDsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyDeletePropertyByIDsHook>>>>
export type PropertyDeletePropertyByIDsQueryError = unknown

export const usePropertyDeletePropertyByIDs = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyDeletePropertyByIDsHook>>>, TError = unknown>(
 ids: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyDeletePropertyByIDsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyDeletePropertyByIDsQueryOptions(ids,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyDeleteEndorsementPropertyByIDsHook = () => {
        const propertyDeleteEndorsementPropertyByIDs = useCustomInstance<DomainModelBenchmarkProperty[]>();

        return (
    domainModelDeleteEndorsementModelBody: DomainModelDeleteEndorsementModelBody,
 ) => {
        return propertyDeleteEndorsementPropertyByIDs(
          {url: `/api/Property/deleteEndorsementPropertyByIDs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelDeleteEndorsementModelBody
    },
          );
        }
      }
    


export const usePropertyDeleteEndorsementPropertyByIDsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyDeleteEndorsementPropertyByIDsHook>>>, TError,{data: DomainModelDeleteEndorsementModelBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyDeleteEndorsementPropertyByIDsHook>>>, TError,{data: DomainModelDeleteEndorsementModelBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyDeleteEndorsementPropertyByIDs =  usePropertyDeleteEndorsementPropertyByIDsHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyDeleteEndorsementPropertyByIDsHook>>>, {data: DomainModelDeleteEndorsementModelBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyDeleteEndorsementPropertyByIDs(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyDeleteEndorsementPropertyByIDsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyDeleteEndorsementPropertyByIDsHook>>>>
    export type PropertyDeleteEndorsementPropertyByIDsMutationBody = DomainModelDeleteEndorsementModelBody
    export type PropertyDeleteEndorsementPropertyByIDsMutationError = unknown

    export const usePropertyDeleteEndorsementPropertyByIDs = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyDeleteEndorsementPropertyByIDsHook>>>, TError,{data: DomainModelDeleteEndorsementModelBody}, TContext>, }
) => {

      const mutationOptions = usePropertyDeleteEndorsementPropertyByIDsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyDeleteActivePropertyByIDsHook = () => {
        const propertyDeleteActivePropertyByIDs = useCustomInstance<DomainModelBenchmarkProperty[]>();

        return (
    ids: string,
 signal?: AbortSignal
) => {
        return propertyDeleteActivePropertyByIDs(
          {url: `/api/Property/DeleteActivePropertyByIDs/${ids}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyDeleteActivePropertyByIDsQueryKey = (ids: string,) => {
    return [`/api/Property/DeleteActivePropertyByIDs/${ids}`] as const;
    }

    
export const usePropertyDeleteActivePropertyByIDsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyDeleteActivePropertyByIDsHook>>>, TError = unknown>(ids: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyDeleteActivePropertyByIDsHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyDeleteActivePropertyByIDsQueryKey(ids);

  const propertyDeleteActivePropertyByIDs =  usePropertyDeleteActivePropertyByIDsHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyDeleteActivePropertyByIDsHook>>>> = ({ signal }) => propertyDeleteActivePropertyByIDs(ids, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ids), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyDeleteActivePropertyByIDsHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyDeleteActivePropertyByIDsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyDeleteActivePropertyByIDsHook>>>>
export type PropertyDeleteActivePropertyByIDsQueryError = unknown

export const usePropertyDeleteActivePropertyByIDs = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyDeleteActivePropertyByIDsHook>>>, TError = unknown>(
 ids: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyDeleteActivePropertyByIDsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyDeleteActivePropertyByIDsQueryOptions(ids,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetSOVByPropertyIDsHook = () => {
        const propertyGetSOVByPropertyIDs = useCustomInstance<DomainModelSOVDto[]>();

        return (
    propertyGetSOVByPropertyIDsPropertyidsBody: PropertyGetSOVByPropertyIDsPropertyidsBody,
 ) => {
        return propertyGetSOVByPropertyIDs(
          {url: `/api/Property/SOV/IDs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: propertyGetSOVByPropertyIDsPropertyidsBody
    },
          );
        }
      }
    


export const usePropertyGetSOVByPropertyIDsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetSOVByPropertyIDsHook>>>, TError,{data: PropertyGetSOVByPropertyIDsPropertyidsBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetSOVByPropertyIDsHook>>>, TError,{data: PropertyGetSOVByPropertyIDsPropertyidsBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyGetSOVByPropertyIDs =  usePropertyGetSOVByPropertyIDsHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetSOVByPropertyIDsHook>>>, {data: PropertyGetSOVByPropertyIDsPropertyidsBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyGetSOVByPropertyIDs(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyGetSOVByPropertyIDsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetSOVByPropertyIDsHook>>>>
    export type PropertyGetSOVByPropertyIDsMutationBody = PropertyGetSOVByPropertyIDsPropertyidsBody
    export type PropertyGetSOVByPropertyIDsMutationError = unknown

    export const usePropertyGetSOVByPropertyIDs = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetSOVByPropertyIDsHook>>>, TError,{data: PropertyGetSOVByPropertyIDsPropertyidsBody}, TContext>, }
) => {

      const mutationOptions = usePropertyGetSOVByPropertyIDsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyGetUnderwriterSOVByPropertyIDsHook = () => {
        const propertyGetUnderwriterSOVByPropertyIDs = useCustomInstance<DomainModelSOVDto[]>();

        return (
    propertyGetSOVByPropertyIDsPropertyidsBody: PropertyGetSOVByPropertyIDsPropertyidsBody,
 ) => {
        return propertyGetUnderwriterSOVByPropertyIDs(
          {url: `/api/Property/UnderwriterSOV/IDs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: propertyGetSOVByPropertyIDsPropertyidsBody
    },
          );
        }
      }
    


export const usePropertyGetUnderwriterSOVByPropertyIDsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetUnderwriterSOVByPropertyIDsHook>>>, TError,{data: PropertyGetSOVByPropertyIDsPropertyidsBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetUnderwriterSOVByPropertyIDsHook>>>, TError,{data: PropertyGetSOVByPropertyIDsPropertyidsBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyGetUnderwriterSOVByPropertyIDs =  usePropertyGetUnderwriterSOVByPropertyIDsHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetUnderwriterSOVByPropertyIDsHook>>>, {data: PropertyGetSOVByPropertyIDsPropertyidsBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyGetUnderwriterSOVByPropertyIDs(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyGetUnderwriterSOVByPropertyIDsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetUnderwriterSOVByPropertyIDsHook>>>>
    export type PropertyGetUnderwriterSOVByPropertyIDsMutationBody = PropertyGetSOVByPropertyIDsPropertyidsBody
    export type PropertyGetUnderwriterSOVByPropertyIDsMutationError = unknown

    export const usePropertyGetUnderwriterSOVByPropertyIDs = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetUnderwriterSOVByPropertyIDsHook>>>, TError,{data: PropertyGetSOVByPropertyIDsPropertyidsBody}, TContext>, }
) => {

      const mutationOptions = usePropertyGetUnderwriterSOVByPropertyIDsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyGetPropertyDetailsByCustomerIdHook = () => {
        const propertyGetPropertyDetailsByCustomerId = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelVMPropertyDetails>();

        return (
    customerId: number,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return propertyGetPropertyDetailsByCustomerId(
          {url: `/api/Property/GetPropertyDetailsByCustomerId/${customerId}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetPropertyDetailsByCustomerIdQueryKey = (customerId: number,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/Property/GetPropertyDetailsByCustomerId/${customerId}/${startIndex}/${endIndex}`] as const;
    }

    
export const usePropertyGetPropertyDetailsByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyDetailsByCustomerIdHook>>>, TError = unknown>(customerId: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyDetailsByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetPropertyDetailsByCustomerIdQueryKey(customerId,startIndex,endIndex);

  const propertyGetPropertyDetailsByCustomerId =  usePropertyGetPropertyDetailsByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyDetailsByCustomerIdHook>>>> = ({ signal }) => propertyGetPropertyDetailsByCustomerId(customerId,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyDetailsByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetPropertyDetailsByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyDetailsByCustomerIdHook>>>>
export type PropertyGetPropertyDetailsByCustomerIdQueryError = unknown

export const usePropertyGetPropertyDetailsByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyDetailsByCustomerIdHook>>>, TError = unknown>(
 customerId: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyDetailsByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetPropertyDetailsByCustomerIdQueryOptions(customerId,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetPropertyByCustomerIDAndFloodPropertyIDHook = () => {
        const propertyGetPropertyByCustomerIDAndFloodPropertyID = useCustomInstance<DomainModelBenchmarkProperty>();

        return (
    customerId: number,
    floodPropertyID: number,
 signal?: AbortSignal
) => {
        return propertyGetPropertyByCustomerIDAndFloodPropertyID(
          {url: `/api/Property/GetPropertyByCustomerIDAndFloodPropertyID/${customerId}/${floodPropertyID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetPropertyByCustomerIDAndFloodPropertyIDQueryKey = (customerId: number,
    floodPropertyID: number,) => {
    return [`/api/Property/GetPropertyByCustomerIDAndFloodPropertyID/${customerId}/${floodPropertyID}`] as const;
    }

    
export const usePropertyGetPropertyByCustomerIDAndFloodPropertyIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyByCustomerIDAndFloodPropertyIDHook>>>, TError = unknown>(customerId: number,
    floodPropertyID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyByCustomerIDAndFloodPropertyIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetPropertyByCustomerIDAndFloodPropertyIDQueryKey(customerId,floodPropertyID);

  const propertyGetPropertyByCustomerIDAndFloodPropertyID =  usePropertyGetPropertyByCustomerIDAndFloodPropertyIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyByCustomerIDAndFloodPropertyIDHook>>>> = ({ signal }) => propertyGetPropertyByCustomerIDAndFloodPropertyID(customerId,floodPropertyID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && floodPropertyID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyByCustomerIDAndFloodPropertyIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetPropertyByCustomerIDAndFloodPropertyIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyByCustomerIDAndFloodPropertyIDHook>>>>
export type PropertyGetPropertyByCustomerIDAndFloodPropertyIDQueryError = unknown

export const usePropertyGetPropertyByCustomerIDAndFloodPropertyID = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyByCustomerIDAndFloodPropertyIDHook>>>, TError = unknown>(
 customerId: number,
    floodPropertyID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyByCustomerIDAndFloodPropertyIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetPropertyByCustomerIDAndFloodPropertyIDQueryOptions(customerId,floodPropertyID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetPropertyInsuredNameByCustomerIDHook = () => {
        const propertyGetPropertyInsuredNameByCustomerID = useCustomInstance<DomainModelPropertyInsuredName[]>();

        return (
    customerID: number,
 signal?: AbortSignal
) => {
        return propertyGetPropertyInsuredNameByCustomerID(
          {url: `/api/Property/GetPropertyInsuredNameByCustomerID/${customerID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetPropertyInsuredNameByCustomerIDQueryKey = (customerID: number,) => {
    return [`/api/Property/GetPropertyInsuredNameByCustomerID/${customerID}`] as const;
    }

    
export const usePropertyGetPropertyInsuredNameByCustomerIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyInsuredNameByCustomerIDHook>>>, TError = unknown>(customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyInsuredNameByCustomerIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetPropertyInsuredNameByCustomerIDQueryKey(customerID);

  const propertyGetPropertyInsuredNameByCustomerID =  usePropertyGetPropertyInsuredNameByCustomerIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyInsuredNameByCustomerIDHook>>>> = ({ signal }) => propertyGetPropertyInsuredNameByCustomerID(customerID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyInsuredNameByCustomerIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetPropertyInsuredNameByCustomerIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyInsuredNameByCustomerIDHook>>>>
export type PropertyGetPropertyInsuredNameByCustomerIDQueryError = unknown

export const usePropertyGetPropertyInsuredNameByCustomerID = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyInsuredNameByCustomerIDHook>>>, TError = unknown>(
 customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyInsuredNameByCustomerIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetPropertyInsuredNameByCustomerIDQueryOptions(customerID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetPendingPropertyInsuredNameByCustomerIDHook = () => {
        const propertyGetPendingPropertyInsuredNameByCustomerID = useCustomInstance<DomainModelPropertyInsuredName[]>();

        return (
    customerID: number,
 signal?: AbortSignal
) => {
        return propertyGetPendingPropertyInsuredNameByCustomerID(
          {url: `/api/Property/GetPendingPropertyInsuredNameByCustomerID/${customerID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetPendingPropertyInsuredNameByCustomerIDQueryKey = (customerID: number,) => {
    return [`/api/Property/GetPendingPropertyInsuredNameByCustomerID/${customerID}`] as const;
    }

    
export const usePropertyGetPendingPropertyInsuredNameByCustomerIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyInsuredNameByCustomerIDHook>>>, TError = unknown>(customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyInsuredNameByCustomerIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetPendingPropertyInsuredNameByCustomerIDQueryKey(customerID);

  const propertyGetPendingPropertyInsuredNameByCustomerID =  usePropertyGetPendingPropertyInsuredNameByCustomerIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyInsuredNameByCustomerIDHook>>>> = ({ signal }) => propertyGetPendingPropertyInsuredNameByCustomerID(customerID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyInsuredNameByCustomerIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetPendingPropertyInsuredNameByCustomerIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyInsuredNameByCustomerIDHook>>>>
export type PropertyGetPendingPropertyInsuredNameByCustomerIDQueryError = unknown

export const usePropertyGetPendingPropertyInsuredNameByCustomerID = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyInsuredNameByCustomerIDHook>>>, TError = unknown>(
 customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyInsuredNameByCustomerIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetPendingPropertyInsuredNameByCustomerIDQueryOptions(customerID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetMortgageBilledPropertiesByCustomerIdWithFiltersHook = () => {
        const propertyGetMortgageBilledPropertiesByCustomerIdWithFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkProperty>();

        return (
    customerId: number,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return propertyGetMortgageBilledPropertiesByCustomerIdWithFilters(
          {url: `/api/Property/GetMortgageBilledPropertiesByCustomerIdWithFilters/${customerId}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetMortgageBilledPropertiesByCustomerIdWithFiltersQueryKey = (customerId: number,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/Property/GetMortgageBilledPropertiesByCustomerIdWithFilters/${customerId}/${startIndex}/${endIndex}`] as const;
    }

    
export const usePropertyGetMortgageBilledPropertiesByCustomerIdWithFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetMortgageBilledPropertiesByCustomerIdWithFiltersHook>>>, TError = unknown>(customerId: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetMortgageBilledPropertiesByCustomerIdWithFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetMortgageBilledPropertiesByCustomerIdWithFiltersQueryKey(customerId,startIndex,endIndex);

  const propertyGetMortgageBilledPropertiesByCustomerIdWithFilters =  usePropertyGetMortgageBilledPropertiesByCustomerIdWithFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetMortgageBilledPropertiesByCustomerIdWithFiltersHook>>>> = ({ signal }) => propertyGetMortgageBilledPropertiesByCustomerIdWithFilters(customerId,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetMortgageBilledPropertiesByCustomerIdWithFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetMortgageBilledPropertiesByCustomerIdWithFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetMortgageBilledPropertiesByCustomerIdWithFiltersHook>>>>
export type PropertyGetMortgageBilledPropertiesByCustomerIdWithFiltersQueryError = unknown

export const usePropertyGetMortgageBilledPropertiesByCustomerIdWithFilters = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetMortgageBilledPropertiesByCustomerIdWithFiltersHook>>>, TError = unknown>(
 customerId: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetMortgageBilledPropertiesByCustomerIdWithFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetMortgageBilledPropertiesByCustomerIdWithFiltersQueryOptions(customerId,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyAddPropertyWithFloodPropertyHook = () => {
        const propertyAddPropertyWithFloodProperty = useCustomInstance<DomainModelBenchmarkProperty>();

        return (
    domainModelBenchmarkPropertyArrayBody: DomainModelBenchmarkPropertyArrayBody,
 ) => {
        return propertyAddPropertyWithFloodProperty(
          {url: `/api/Property/AddPropertyWithFloodProperty`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyArrayBody
    },
          );
        }
      }
    


export const usePropertyAddPropertyWithFloodPropertyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyAddPropertyWithFloodPropertyHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyAddPropertyWithFloodPropertyHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyAddPropertyWithFloodProperty =  usePropertyAddPropertyWithFloodPropertyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyAddPropertyWithFloodPropertyHook>>>, {data: DomainModelBenchmarkPropertyArrayBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyAddPropertyWithFloodProperty(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyAddPropertyWithFloodPropertyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyAddPropertyWithFloodPropertyHook>>>>
    export type PropertyAddPropertyWithFloodPropertyMutationBody = DomainModelBenchmarkPropertyArrayBody
    export type PropertyAddPropertyWithFloodPropertyMutationError = unknown

    export const usePropertyAddPropertyWithFloodProperty = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyAddPropertyWithFloodPropertyHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext>, }
) => {

      const mutationOptions = usePropertyAddPropertyWithFloodPropertyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyUpdatePropertyWithFloodPropertyHook = () => {
        const propertyUpdatePropertyWithFloodProperty = useCustomInstance<DomainModelBenchmarkProperty>();

        return (
    domainModelBenchmarkPropertyArrayBody: DomainModelBenchmarkPropertyArrayBody,
 ) => {
        return propertyUpdatePropertyWithFloodProperty(
          {url: `/api/Property/UpdatePropertyWithFloodProperty`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyArrayBody
    },
          );
        }
      }
    


export const usePropertyUpdatePropertyWithFloodPropertyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyUpdatePropertyWithFloodPropertyHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyUpdatePropertyWithFloodPropertyHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyUpdatePropertyWithFloodProperty =  usePropertyUpdatePropertyWithFloodPropertyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyUpdatePropertyWithFloodPropertyHook>>>, {data: DomainModelBenchmarkPropertyArrayBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyUpdatePropertyWithFloodProperty(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyUpdatePropertyWithFloodPropertyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyUpdatePropertyWithFloodPropertyHook>>>>
    export type PropertyUpdatePropertyWithFloodPropertyMutationBody = DomainModelBenchmarkPropertyArrayBody
    export type PropertyUpdatePropertyWithFloodPropertyMutationError = unknown

    export const usePropertyUpdatePropertyWithFloodProperty = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyUpdatePropertyWithFloodPropertyHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext>, }
) => {

      const mutationOptions = usePropertyUpdatePropertyWithFloodPropertyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyGetPropertyListByPaymentTypeWithFiltersHook = () => {
        const propertyGetPropertyListByPaymentTypeWithFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkProperty>();

        return (
    customerId: number,
    paymentType: number,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return propertyGetPropertyListByPaymentTypeWithFilters(
          {url: `/api/Property/GetPropertyListByPaymentTypeWithFilters/${customerId}/${paymentType}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetPropertyListByPaymentTypeWithFiltersQueryKey = (customerId: number,
    paymentType: number,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/Property/GetPropertyListByPaymentTypeWithFilters/${customerId}/${paymentType}/${startIndex}/${endIndex}`] as const;
    }

    
export const usePropertyGetPropertyListByPaymentTypeWithFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyListByPaymentTypeWithFiltersHook>>>, TError = unknown>(customerId: number,
    paymentType: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyListByPaymentTypeWithFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetPropertyListByPaymentTypeWithFiltersQueryKey(customerId,paymentType,startIndex,endIndex);

  const propertyGetPropertyListByPaymentTypeWithFilters =  usePropertyGetPropertyListByPaymentTypeWithFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyListByPaymentTypeWithFiltersHook>>>> = ({ signal }) => propertyGetPropertyListByPaymentTypeWithFilters(customerId,paymentType,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && paymentType && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyListByPaymentTypeWithFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetPropertyListByPaymentTypeWithFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyListByPaymentTypeWithFiltersHook>>>>
export type PropertyGetPropertyListByPaymentTypeWithFiltersQueryError = unknown

export const usePropertyGetPropertyListByPaymentTypeWithFilters = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyListByPaymentTypeWithFiltersHook>>>, TError = unknown>(
 customerId: number,
    paymentType: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyListByPaymentTypeWithFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetPropertyListByPaymentTypeWithFiltersQueryOptions(customerId,paymentType,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetPendingPropertyDetailsByCustomerIdHook = () => {
        const propertyGetPendingPropertyDetailsByCustomerId = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkProperty>();

        return (
    customerId: number,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return propertyGetPendingPropertyDetailsByCustomerId(
          {url: `/api/Property/GetPendingPropertyDetailsByCustomerId/${customerId}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetPendingPropertyDetailsByCustomerIdQueryKey = (customerId: number,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/Property/GetPendingPropertyDetailsByCustomerId/${customerId}/${startIndex}/${endIndex}`] as const;
    }

    
export const usePropertyGetPendingPropertyDetailsByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyDetailsByCustomerIdHook>>>, TError = unknown>(customerId: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyDetailsByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetPendingPropertyDetailsByCustomerIdQueryKey(customerId,startIndex,endIndex);

  const propertyGetPendingPropertyDetailsByCustomerId =  usePropertyGetPendingPropertyDetailsByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyDetailsByCustomerIdHook>>>> = ({ signal }) => propertyGetPendingPropertyDetailsByCustomerId(customerId,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyDetailsByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetPendingPropertyDetailsByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyDetailsByCustomerIdHook>>>>
export type PropertyGetPendingPropertyDetailsByCustomerIdQueryError = unknown

export const usePropertyGetPendingPropertyDetailsByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyDetailsByCustomerIdHook>>>, TError = unknown>(
 customerId: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPendingPropertyDetailsByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetPendingPropertyDetailsByCustomerIdQueryOptions(customerId,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetActivePropertyDetailsByCustomerIdHook = () => {
        const propertyGetActivePropertyDetailsByCustomerId = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkProperty>();

        return (
    customerId: number,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return propertyGetActivePropertyDetailsByCustomerId(
          {url: `/api/Property/GetActivePropertyDetailsByCustomerId/${customerId}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetActivePropertyDetailsByCustomerIdQueryKey = (customerId: number,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/Property/GetActivePropertyDetailsByCustomerId/${customerId}/${startIndex}/${endIndex}`] as const;
    }

    
export const usePropertyGetActivePropertyDetailsByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyDetailsByCustomerIdHook>>>, TError = unknown>(customerId: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyDetailsByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetActivePropertyDetailsByCustomerIdQueryKey(customerId,startIndex,endIndex);

  const propertyGetActivePropertyDetailsByCustomerId =  usePropertyGetActivePropertyDetailsByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyDetailsByCustomerIdHook>>>> = ({ signal }) => propertyGetActivePropertyDetailsByCustomerId(customerId,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyDetailsByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetActivePropertyDetailsByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyDetailsByCustomerIdHook>>>>
export type PropertyGetActivePropertyDetailsByCustomerIdQueryError = unknown

export const usePropertyGetActivePropertyDetailsByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyDetailsByCustomerIdHook>>>, TError = unknown>(
 customerId: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyDetailsByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetActivePropertyDetailsByCustomerIdQueryOptions(customerId,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertySaveAndGeneratePropertyDetailsHook = () => {
        const propertySaveAndGeneratePropertyDetails = useCustomInstance<DomainModelBenchmarkProperty>();

        return (
    domainModelBenchmarkPropertyBody: DomainModelBenchmarkPropertyBody,
 ) => {
        return propertySaveAndGeneratePropertyDetails(
          {url: `/api/Property/SaveAndGeneratePropertyDetails`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyBody
    },
          );
        }
      }
    


export const usePropertySaveAndGeneratePropertyDetailsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertySaveAndGeneratePropertyDetailsHook>>>, TError,{data: DomainModelBenchmarkPropertyBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertySaveAndGeneratePropertyDetailsHook>>>, TError,{data: DomainModelBenchmarkPropertyBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertySaveAndGeneratePropertyDetails =  usePropertySaveAndGeneratePropertyDetailsHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertySaveAndGeneratePropertyDetailsHook>>>, {data: DomainModelBenchmarkPropertyBody}> = (props) => {
          const {data} = props ?? {};

          return  propertySaveAndGeneratePropertyDetails(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertySaveAndGeneratePropertyDetailsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertySaveAndGeneratePropertyDetailsHook>>>>
    export type PropertySaveAndGeneratePropertyDetailsMutationBody = DomainModelBenchmarkPropertyBody
    export type PropertySaveAndGeneratePropertyDetailsMutationError = unknown

    export const usePropertySaveAndGeneratePropertyDetails = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertySaveAndGeneratePropertyDetailsHook>>>, TError,{data: DomainModelBenchmarkPropertyBody}, TContext>, }
) => {

      const mutationOptions = usePropertySaveAndGeneratePropertyDetailsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyDeleteEndorsementActivePropertyByIDsHook = () => {
        const propertyDeleteEndorsementActivePropertyByIDs = useCustomInstance<DomainModelBenchmarkProperty[]>();

        return (
    domainModelDeleteEndorsementModelBody: DomainModelDeleteEndorsementModelBody,
 ) => {
        return propertyDeleteEndorsementActivePropertyByIDs(
          {url: `/api/Property/DeleteEndorsementActivePropertyByIDs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelDeleteEndorsementModelBody
    },
          );
        }
      }
    


export const usePropertyDeleteEndorsementActivePropertyByIDsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyDeleteEndorsementActivePropertyByIDsHook>>>, TError,{data: DomainModelDeleteEndorsementModelBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyDeleteEndorsementActivePropertyByIDsHook>>>, TError,{data: DomainModelDeleteEndorsementModelBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyDeleteEndorsementActivePropertyByIDs =  usePropertyDeleteEndorsementActivePropertyByIDsHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyDeleteEndorsementActivePropertyByIDsHook>>>, {data: DomainModelDeleteEndorsementModelBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyDeleteEndorsementActivePropertyByIDs(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyDeleteEndorsementActivePropertyByIDsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyDeleteEndorsementActivePropertyByIDsHook>>>>
    export type PropertyDeleteEndorsementActivePropertyByIDsMutationBody = DomainModelDeleteEndorsementModelBody
    export type PropertyDeleteEndorsementActivePropertyByIDsMutationError = unknown

    export const usePropertyDeleteEndorsementActivePropertyByIDs = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyDeleteEndorsementActivePropertyByIDsHook>>>, TError,{data: DomainModelDeleteEndorsementModelBody}, TContext>, }
) => {

      const mutationOptions = usePropertyDeleteEndorsementActivePropertyByIDsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyGetActivePropertyListInsuredNameByCustomerIDHook = () => {
        const propertyGetActivePropertyListInsuredNameByCustomerID = useCustomInstance<DomainModelBenchmarkProperty[]>();

        return (
    customerId: number,
    insuredName: string,
 signal?: AbortSignal
) => {
        return propertyGetActivePropertyListInsuredNameByCustomerID(
          {url: `/api/customers/${customerId}/${insuredName}/GetActivePropertyListInsuredNameByCustomerID`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetActivePropertyListInsuredNameByCustomerIDQueryKey = (customerId: number,
    insuredName: string,) => {
    return [`/api/customers/${customerId}/${insuredName}/GetActivePropertyListInsuredNameByCustomerID`] as const;
    }

    
export const usePropertyGetActivePropertyListInsuredNameByCustomerIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyListInsuredNameByCustomerIDHook>>>, TError = unknown>(customerId: number,
    insuredName: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyListInsuredNameByCustomerIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetActivePropertyListInsuredNameByCustomerIDQueryKey(customerId,insuredName);

  const propertyGetActivePropertyListInsuredNameByCustomerID =  usePropertyGetActivePropertyListInsuredNameByCustomerIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyListInsuredNameByCustomerIDHook>>>> = ({ signal }) => propertyGetActivePropertyListInsuredNameByCustomerID(customerId,insuredName, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && insuredName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyListInsuredNameByCustomerIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetActivePropertyListInsuredNameByCustomerIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyListInsuredNameByCustomerIDHook>>>>
export type PropertyGetActivePropertyListInsuredNameByCustomerIDQueryError = unknown

export const usePropertyGetActivePropertyListInsuredNameByCustomerID = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyListInsuredNameByCustomerIDHook>>>, TError = unknown>(
 customerId: number,
    insuredName: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyListInsuredNameByCustomerIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetActivePropertyListInsuredNameByCustomerIDQueryOptions(customerId,insuredName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetActivePropertyInsuredNameByCustomerIDHook = () => {
        const propertyGetActivePropertyInsuredNameByCustomerID = useCustomInstance<DomainModelPropertyInsuredName[]>();

        return (
    customerID: number,
 signal?: AbortSignal
) => {
        return propertyGetActivePropertyInsuredNameByCustomerID(
          {url: `/api/Property/GetActivePropertyInsuredNameByCustomerID/${customerID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetActivePropertyInsuredNameByCustomerIDQueryKey = (customerID: number,) => {
    return [`/api/Property/GetActivePropertyInsuredNameByCustomerID/${customerID}`] as const;
    }

    
export const usePropertyGetActivePropertyInsuredNameByCustomerIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyInsuredNameByCustomerIDHook>>>, TError = unknown>(customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyInsuredNameByCustomerIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetActivePropertyInsuredNameByCustomerIDQueryKey(customerID);

  const propertyGetActivePropertyInsuredNameByCustomerID =  usePropertyGetActivePropertyInsuredNameByCustomerIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyInsuredNameByCustomerIDHook>>>> = ({ signal }) => propertyGetActivePropertyInsuredNameByCustomerID(customerID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyInsuredNameByCustomerIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetActivePropertyInsuredNameByCustomerIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyInsuredNameByCustomerIDHook>>>>
export type PropertyGetActivePropertyInsuredNameByCustomerIDQueryError = unknown

export const usePropertyGetActivePropertyInsuredNameByCustomerID = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyInsuredNameByCustomerIDHook>>>, TError = unknown>(
 customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePropertyInsuredNameByCustomerIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetActivePropertyInsuredNameByCustomerIDQueryOptions(customerID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertySaveAndGeneratePropertiesHook = () => {
        const propertySaveAndGenerateProperties = useCustomInstance<DomainModelBenchmarkProperty[]>();

        return (
    domainModelBenchmarkPropertyArrayBody: DomainModelBenchmarkPropertyArrayBody,
 ) => {
        return propertySaveAndGenerateProperties(
          {url: `/api/Property/SaveAndGenerateProperties`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyArrayBody
    },
          );
        }
      }
    


export const usePropertySaveAndGeneratePropertiesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertySaveAndGeneratePropertiesHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertySaveAndGeneratePropertiesHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertySaveAndGenerateProperties =  usePropertySaveAndGeneratePropertiesHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertySaveAndGeneratePropertiesHook>>>, {data: DomainModelBenchmarkPropertyArrayBody}> = (props) => {
          const {data} = props ?? {};

          return  propertySaveAndGenerateProperties(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertySaveAndGeneratePropertiesMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertySaveAndGeneratePropertiesHook>>>>
    export type PropertySaveAndGeneratePropertiesMutationBody = DomainModelBenchmarkPropertyArrayBody
    export type PropertySaveAndGeneratePropertiesMutationError = unknown

    export const usePropertySaveAndGenerateProperties = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertySaveAndGeneratePropertiesHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext>, }
) => {

      const mutationOptions = usePropertySaveAndGeneratePropertiesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyGetPropertyListByStartDateAndEndDateHook = () => {
        const propertyGetPropertyListByStartDateAndEndDate = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelREOMonthlyBillingReportDto>();

        return (
    startDate: string,
    endDate: string,
    sortingFilter: string,
    searchFilter: string,
    propertyType: string,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return propertyGetPropertyListByStartDateAndEndDate(
          {url: `/api/Property/GetPropertyListByStartDateAndEndDate/${startDate}/${endDate}/${sortingFilter}/${searchFilter}/${propertyType}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetPropertyListByStartDateAndEndDateQueryKey = (startDate: string,
    endDate: string,
    sortingFilter: string,
    searchFilter: string,
    propertyType: string,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/Property/GetPropertyListByStartDateAndEndDate/${startDate}/${endDate}/${sortingFilter}/${searchFilter}/${propertyType}/${startIndex}/${endIndex}`] as const;
    }

    
export const usePropertyGetPropertyListByStartDateAndEndDateQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyListByStartDateAndEndDateHook>>>, TError = unknown>(startDate: string,
    endDate: string,
    sortingFilter: string,
    searchFilter: string,
    propertyType: string,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyListByStartDateAndEndDateHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetPropertyListByStartDateAndEndDateQueryKey(startDate,endDate,sortingFilter,searchFilter,propertyType,startIndex,endIndex);

  const propertyGetPropertyListByStartDateAndEndDate =  usePropertyGetPropertyListByStartDateAndEndDateHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyListByStartDateAndEndDateHook>>>> = ({ signal }) => propertyGetPropertyListByStartDateAndEndDate(startDate,endDate,sortingFilter,searchFilter,propertyType,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(startDate && endDate && sortingFilter && searchFilter && propertyType && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyListByStartDateAndEndDateHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetPropertyListByStartDateAndEndDateQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyListByStartDateAndEndDateHook>>>>
export type PropertyGetPropertyListByStartDateAndEndDateQueryError = unknown

export const usePropertyGetPropertyListByStartDateAndEndDate = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyListByStartDateAndEndDateHook>>>, TError = unknown>(
 startDate: string,
    endDate: string,
    sortingFilter: string,
    searchFilter: string,
    propertyType: string,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPropertyListByStartDateAndEndDateHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetPropertyListByStartDateAndEndDateQueryOptions(startDate,endDate,sortingFilter,searchFilter,propertyType,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertySaveAndGenerateActivePropertiesHook = () => {
        const propertySaveAndGenerateActiveProperties = useCustomInstance<DomainModelBenchmarkProperty[]>();

        return (
    domainModelBenchmarkPropertyArrayBody: DomainModelBenchmarkPropertyArrayBody,
 ) => {
        return propertySaveAndGenerateActiveProperties(
          {url: `/api/Property/SaveAndGenerateActiveProperties`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyArrayBody
    },
          );
        }
      }
    


export const usePropertySaveAndGenerateActivePropertiesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertySaveAndGenerateActivePropertiesHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertySaveAndGenerateActivePropertiesHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertySaveAndGenerateActiveProperties =  usePropertySaveAndGenerateActivePropertiesHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertySaveAndGenerateActivePropertiesHook>>>, {data: DomainModelBenchmarkPropertyArrayBody}> = (props) => {
          const {data} = props ?? {};

          return  propertySaveAndGenerateActiveProperties(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertySaveAndGenerateActivePropertiesMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertySaveAndGenerateActivePropertiesHook>>>>
    export type PropertySaveAndGenerateActivePropertiesMutationBody = DomainModelBenchmarkPropertyArrayBody
    export type PropertySaveAndGenerateActivePropertiesMutationError = unknown

    export const usePropertySaveAndGenerateActiveProperties = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertySaveAndGenerateActivePropertiesHook>>>, TError,{data: DomainModelBenchmarkPropertyArrayBody}, TContext>, }
) => {

      const mutationOptions = usePropertySaveAndGenerateActivePropertiesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyGetPaymentEntryFiltersHook = () => {
        const propertyGetPaymentEntryFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelPaymentEntryDto>();

        return (
    customerId: number,
    startIndex: number,
    endIndex: number,
    policyNumberSearch: string,
    addressSearch: string,
    sortOn: string,
    sortBy: string,
 signal?: AbortSignal
) => {
        return propertyGetPaymentEntryFilters(
          {url: `/api/Property/GetPaymentEntryFilters/${customerId}/${startIndex}/${endIndex}/${policyNumberSearch}/${addressSearch}/${sortOn}/${sortBy}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetPaymentEntryFiltersQueryKey = (customerId: number,
    startIndex: number,
    endIndex: number,
    policyNumberSearch: string,
    addressSearch: string,
    sortOn: string,
    sortBy: string,) => {
    return [`/api/Property/GetPaymentEntryFilters/${customerId}/${startIndex}/${endIndex}/${policyNumberSearch}/${addressSearch}/${sortOn}/${sortBy}`] as const;
    }

    
export const usePropertyGetPaymentEntryFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPaymentEntryFiltersHook>>>, TError = unknown>(customerId: number,
    startIndex: number,
    endIndex: number,
    policyNumberSearch: string,
    addressSearch: string,
    sortOn: string,
    sortBy: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPaymentEntryFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetPaymentEntryFiltersQueryKey(customerId,startIndex,endIndex,policyNumberSearch,addressSearch,sortOn,sortBy);

  const propertyGetPaymentEntryFilters =  usePropertyGetPaymentEntryFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetPaymentEntryFiltersHook>>>> = ({ signal }) => propertyGetPaymentEntryFilters(customerId,startIndex,endIndex,policyNumberSearch,addressSearch,sortOn,sortBy, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && startIndex && endIndex && policyNumberSearch && addressSearch && sortOn && sortBy), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPaymentEntryFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetPaymentEntryFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetPaymentEntryFiltersHook>>>>
export type PropertyGetPaymentEntryFiltersQueryError = unknown

export const usePropertyGetPaymentEntryFilters = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPaymentEntryFiltersHook>>>, TError = unknown>(
 customerId: number,
    startIndex: number,
    endIndex: number,
    policyNumberSearch: string,
    addressSearch: string,
    sortOn: string,
    sortBy: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPaymentEntryFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetPaymentEntryFiltersQueryOptions(customerId,startIndex,endIndex,policyNumberSearch,addressSearch,sortOn,sortBy,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetActivePolicyBillingInfromationHook = () => {
        const propertyGetActivePolicyBillingInfromation = useCustomInstance<DomainModelBenchmarkProperty[]>();

        return (
    customerId: number,
    insuredName: string,
    month: number,
 signal?: AbortSignal
) => {
        return propertyGetActivePolicyBillingInfromation(
          {url: `/api/customers/${customerId}/${insuredName}/GetActivePolicyBillingInfromation/${month}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetActivePolicyBillingInfromationQueryKey = (customerId: number,
    insuredName: string,
    month: number,) => {
    return [`/api/customers/${customerId}/${insuredName}/GetActivePolicyBillingInfromation/${month}`] as const;
    }

    
export const usePropertyGetActivePolicyBillingInfromationQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePolicyBillingInfromationHook>>>, TError = unknown>(customerId: number,
    insuredName: string,
    month: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePolicyBillingInfromationHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetActivePolicyBillingInfromationQueryKey(customerId,insuredName,month);

  const propertyGetActivePolicyBillingInfromation =  usePropertyGetActivePolicyBillingInfromationHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePolicyBillingInfromationHook>>>> = ({ signal }) => propertyGetActivePolicyBillingInfromation(customerId,insuredName,month, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && insuredName && month), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePolicyBillingInfromationHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetActivePolicyBillingInfromationQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePolicyBillingInfromationHook>>>>
export type PropertyGetActivePolicyBillingInfromationQueryError = unknown

export const usePropertyGetActivePolicyBillingInfromation = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePolicyBillingInfromationHook>>>, TError = unknown>(
 customerId: number,
    insuredName: string,
    month: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetActivePolicyBillingInfromationHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetActivePolicyBillingInfromationQueryOptions(customerId,insuredName,month,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetAllActivePropertiesWithFiltersHook = () => {
        const propertyGetAllActivePropertiesWithFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelTransactionSummaryDto>();

        return (
    sortingFilter: string,
    searchFilter: string,
    startIndex: number,
    endIndex: number,
    params?: PropertyGetAllActivePropertiesWithFiltersParams,
 signal?: AbortSignal
) => {
        return propertyGetAllActivePropertiesWithFilters(
          {url: `/api/Property/AllActivePropertiesWithFilters/${sortingFilter}/${searchFilter}/${startIndex}/${endIndex}`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getPropertyGetAllActivePropertiesWithFiltersQueryKey = (sortingFilter: string,
    searchFilter: string,
    startIndex: number,
    endIndex: number,
    params?: PropertyGetAllActivePropertiesWithFiltersParams,) => {
    return [`/api/Property/AllActivePropertiesWithFilters/${sortingFilter}/${searchFilter}/${startIndex}/${endIndex}`, ...(params ? [params]: [])] as const;
    }

    
export const usePropertyGetAllActivePropertiesWithFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetAllActivePropertiesWithFiltersHook>>>, TError = unknown>(sortingFilter: string,
    searchFilter: string,
    startIndex: number,
    endIndex: number,
    params?: PropertyGetAllActivePropertiesWithFiltersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllActivePropertiesWithFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetAllActivePropertiesWithFiltersQueryKey(sortingFilter,searchFilter,startIndex,endIndex,params);

  const propertyGetAllActivePropertiesWithFilters =  usePropertyGetAllActivePropertiesWithFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllActivePropertiesWithFiltersHook>>>> = ({ signal }) => propertyGetAllActivePropertiesWithFilters(sortingFilter,searchFilter,startIndex,endIndex,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(sortingFilter && searchFilter && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllActivePropertiesWithFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetAllActivePropertiesWithFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllActivePropertiesWithFiltersHook>>>>
export type PropertyGetAllActivePropertiesWithFiltersQueryError = unknown

export const usePropertyGetAllActivePropertiesWithFilters = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetAllActivePropertiesWithFiltersHook>>>, TError = unknown>(
 sortingFilter: string,
    searchFilter: string,
    startIndex: number,
    endIndex: number,
    params?: PropertyGetAllActivePropertiesWithFiltersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllActivePropertiesWithFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetAllActivePropertiesWithFiltersQueryOptions(sortingFilter,searchFilter,startIndex,endIndex,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetPaymentEntryReportHook = () => {
        const propertyGetPaymentEntryReport = useCustomInstance<DomainModelPaymentEntryDto[]>();

        return (
    
 signal?: AbortSignal
) => {
        return propertyGetPaymentEntryReport(
          {url: `/api/Property/GetPaymentEntryReport`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetPaymentEntryReportQueryKey = () => {
    return [`/api/Property/GetPaymentEntryReport`] as const;
    }

    
export const usePropertyGetPaymentEntryReportQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPaymentEntryReportHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPaymentEntryReportHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetPaymentEntryReportQueryKey();

  const propertyGetPaymentEntryReport =  usePropertyGetPaymentEntryReportHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetPaymentEntryReportHook>>>> = ({ signal }) => propertyGetPaymentEntryReport(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPaymentEntryReportHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetPaymentEntryReportQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetPaymentEntryReportHook>>>>
export type PropertyGetPaymentEntryReportQueryError = unknown

export const usePropertyGetPaymentEntryReport = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetPaymentEntryReportHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetPaymentEntryReportHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetPaymentEntryReportQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetAllActivePropertieswithFiltersCompletetransactionHook = () => {
        const propertyGetAllActivePropertieswithFiltersCompletetransaction = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelREOMonthlyBillingReportDto>();

        return (
    sortingFilter: string,
    searchFilter: string,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return propertyGetAllActivePropertieswithFiltersCompletetransaction(
          {url: `/api/Property/GetAllActivePropertieswithFiltersCompletetransaction/${sortingFilter}/${searchFilter}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetAllActivePropertieswithFiltersCompletetransactionQueryKey = (sortingFilter: string,
    searchFilter: string,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/Property/GetAllActivePropertieswithFiltersCompletetransaction/${sortingFilter}/${searchFilter}/${startIndex}/${endIndex}`] as const;
    }

    
export const usePropertyGetAllActivePropertieswithFiltersCompletetransactionQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetAllActivePropertieswithFiltersCompletetransactionHook>>>, TError = unknown>(sortingFilter: string,
    searchFilter: string,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllActivePropertieswithFiltersCompletetransactionHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetAllActivePropertieswithFiltersCompletetransactionQueryKey(sortingFilter,searchFilter,startIndex,endIndex);

  const propertyGetAllActivePropertieswithFiltersCompletetransaction =  usePropertyGetAllActivePropertieswithFiltersCompletetransactionHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllActivePropertieswithFiltersCompletetransactionHook>>>> = ({ signal }) => propertyGetAllActivePropertieswithFiltersCompletetransaction(sortingFilter,searchFilter,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(sortingFilter && searchFilter && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllActivePropertieswithFiltersCompletetransactionHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetAllActivePropertieswithFiltersCompletetransactionQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllActivePropertieswithFiltersCompletetransactionHook>>>>
export type PropertyGetAllActivePropertieswithFiltersCompletetransactionQueryError = unknown

export const usePropertyGetAllActivePropertieswithFiltersCompletetransaction = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetAllActivePropertieswithFiltersCompletetransactionHook>>>, TError = unknown>(
 sortingFilter: string,
    searchFilter: string,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetAllActivePropertieswithFiltersCompletetransactionHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetAllActivePropertieswithFiltersCompletetransactionQueryOptions(sortingFilter,searchFilter,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyGetREOMonthlyBillingReportListHook = () => {
        const propertyGetREOMonthlyBillingReportList = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelREOMonthlyBillingReportDto>();

        return (
    customerID: number,
    startDate: string,
    endDate: string,
    sortingFilter: string,
    searchFilter: string,
    propertyType: string,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return propertyGetREOMonthlyBillingReportList(
          {url: `/api/Property/GetREOMonthlyBillingReport/${customerID}/${startDate}/${endDate}/${sortingFilter}/${searchFilter}/${propertyType}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyGetREOMonthlyBillingReportListQueryKey = (customerID: number,
    startDate: string,
    endDate: string,
    sortingFilter: string,
    searchFilter: string,
    propertyType: string,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/Property/GetREOMonthlyBillingReport/${customerID}/${startDate}/${endDate}/${sortingFilter}/${searchFilter}/${propertyType}/${startIndex}/${endIndex}`] as const;
    }

    
export const usePropertyGetREOMonthlyBillingReportListQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetREOMonthlyBillingReportListHook>>>, TError = unknown>(customerID: number,
    startDate: string,
    endDate: string,
    sortingFilter: string,
    searchFilter: string,
    propertyType: string,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetREOMonthlyBillingReportListHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyGetREOMonthlyBillingReportListQueryKey(customerID,startDate,endDate,sortingFilter,searchFilter,propertyType,startIndex,endIndex);

  const propertyGetREOMonthlyBillingReportList =  usePropertyGetREOMonthlyBillingReportListHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyGetREOMonthlyBillingReportListHook>>>> = ({ signal }) => propertyGetREOMonthlyBillingReportList(customerID,startDate,endDate,sortingFilter,searchFilter,propertyType,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerID && startDate && endDate && sortingFilter && searchFilter && propertyType && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetREOMonthlyBillingReportListHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyGetREOMonthlyBillingReportListQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyGetREOMonthlyBillingReportListHook>>>>
export type PropertyGetREOMonthlyBillingReportListQueryError = unknown

export const usePropertyGetREOMonthlyBillingReportList = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyGetREOMonthlyBillingReportListHook>>>, TError = unknown>(
 customerID: number,
    startDate: string,
    endDate: string,
    sortingFilter: string,
    searchFilter: string,
    propertyType: string,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyGetREOMonthlyBillingReportListHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyGetREOMonthlyBillingReportListQueryOptions(customerID,startDate,endDate,sortingFilter,searchFilter,propertyType,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyCoverageGetAllPropertyCoverageHook = () => {
        const propertyCoverageGetAllPropertyCoverage = useCustomInstance<DomainModelBenchmarkPropertyCoverage[]>();

        return (
    
 signal?: AbortSignal
) => {
        return propertyCoverageGetAllPropertyCoverage(
          {url: `/api/PropertyCoverage/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyCoverageGetAllPropertyCoverageQueryKey = () => {
    return [`/api/PropertyCoverage/getAll`] as const;
    }

    
export const usePropertyCoverageGetAllPropertyCoverageQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyCoverageGetAllPropertyCoverageHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyCoverageGetAllPropertyCoverageHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyCoverageGetAllPropertyCoverageQueryKey();

  const propertyCoverageGetAllPropertyCoverage =  usePropertyCoverageGetAllPropertyCoverageHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyCoverageGetAllPropertyCoverageHook>>>> = ({ signal }) => propertyCoverageGetAllPropertyCoverage(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyCoverageGetAllPropertyCoverageHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyCoverageGetAllPropertyCoverageQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyCoverageGetAllPropertyCoverageHook>>>>
export type PropertyCoverageGetAllPropertyCoverageQueryError = unknown

export const usePropertyCoverageGetAllPropertyCoverage = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyCoverageGetAllPropertyCoverageHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyCoverageGetAllPropertyCoverageHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyCoverageGetAllPropertyCoverageQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyCoverageGetHook = () => {
        const propertyCoverageGet = useCustomInstance<DomainModelBenchmarkPropertyCoverage>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return propertyCoverageGet(
          {url: `/api/PropertyCoverage/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyCoverageGetQueryKey = (id: number,) => {
    return [`/api/PropertyCoverage/get/${id}`] as const;
    }

    
export const usePropertyCoverageGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyCoverageGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyCoverageGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyCoverageGetQueryKey(id);

  const propertyCoverageGet =  usePropertyCoverageGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyCoverageGetHook>>>> = ({ signal }) => propertyCoverageGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyCoverageGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyCoverageGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyCoverageGetHook>>>>
export type PropertyCoverageGetQueryError = unknown

export const usePropertyCoverageGet = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyCoverageGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyCoverageGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyCoverageGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyCoveragePostHook = () => {
        const propertyCoveragePost = useCustomInstance<DomainModelBenchmarkPropertyCoverage>();

        return (
    domainModelBenchmarkPropertyCoverageBody: DomainModelBenchmarkPropertyCoverageBody,
 ) => {
        return propertyCoveragePost(
          {url: `/api/PropertyCoverage/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyCoverageBody
    },
          );
        }
      }
    


export const usePropertyCoveragePostMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyCoveragePostHook>>>, TError,{data: DomainModelBenchmarkPropertyCoverageBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyCoveragePostHook>>>, TError,{data: DomainModelBenchmarkPropertyCoverageBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyCoveragePost =  usePropertyCoveragePostHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyCoveragePostHook>>>, {data: DomainModelBenchmarkPropertyCoverageBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyCoveragePost(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyCoveragePostMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyCoveragePostHook>>>>
    export type PropertyCoveragePostMutationBody = DomainModelBenchmarkPropertyCoverageBody
    export type PropertyCoveragePostMutationError = unknown

    export const usePropertyCoveragePost = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyCoveragePostHook>>>, TError,{data: DomainModelBenchmarkPropertyCoverageBody}, TContext>, }
) => {

      const mutationOptions = usePropertyCoveragePostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyCoveragePutHook = () => {
        const propertyCoveragePut = useCustomInstance<DomainModelBenchmarkPropertyCoverage>();

        return (
    domainModelBenchmarkPropertyCoverageBody: DomainModelBenchmarkPropertyCoverageBody,
 ) => {
        return propertyCoveragePut(
          {url: `/api/PropertyCoverage/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyCoverageBody
    },
          );
        }
      }
    


export const usePropertyCoveragePutMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyCoveragePutHook>>>, TError,{data: DomainModelBenchmarkPropertyCoverageBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyCoveragePutHook>>>, TError,{data: DomainModelBenchmarkPropertyCoverageBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyCoveragePut =  usePropertyCoveragePutHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyCoveragePutHook>>>, {data: DomainModelBenchmarkPropertyCoverageBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyCoveragePut(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyCoveragePutMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyCoveragePutHook>>>>
    export type PropertyCoveragePutMutationBody = DomainModelBenchmarkPropertyCoverageBody
    export type PropertyCoveragePutMutationError = unknown

    export const usePropertyCoveragePut = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyCoveragePutHook>>>, TError,{data: DomainModelBenchmarkPropertyCoverageBody}, TContext>, }
) => {

      const mutationOptions = usePropertyCoveragePutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyCoverageDeletePropertyCoverageHook = () => {
        const propertyCoverageDeletePropertyCoverage = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return propertyCoverageDeletePropertyCoverage(
          {url: `/api/PropertyCoverage/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyCoverageDeletePropertyCoverageQueryKey = (id: number,) => {
    return [`/api/PropertyCoverage/delete/${id}`] as const;
    }

    
export const usePropertyCoverageDeletePropertyCoverageQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyCoverageDeletePropertyCoverageHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyCoverageDeletePropertyCoverageHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyCoverageDeletePropertyCoverageQueryKey(id);

  const propertyCoverageDeletePropertyCoverage =  usePropertyCoverageDeletePropertyCoverageHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyCoverageDeletePropertyCoverageHook>>>> = ({ signal }) => propertyCoverageDeletePropertyCoverage(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyCoverageDeletePropertyCoverageHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyCoverageDeletePropertyCoverageQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyCoverageDeletePropertyCoverageHook>>>>
export type PropertyCoverageDeletePropertyCoverageQueryError = unknown

export const usePropertyCoverageDeletePropertyCoverage = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyCoverageDeletePropertyCoverageHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyCoverageDeletePropertyCoverageHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyCoverageDeletePropertyCoverageQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyCoverageGetPropertyCoverageByPropertyIDAndCoverageTypeIDHook = () => {
        const propertyCoverageGetPropertyCoverageByPropertyIDAndCoverageTypeID = useCustomInstance<DomainModelBenchmarkPropertyCoverage>();

        return (
    propertyID: number,
    coverageTypeID: number,
 signal?: AbortSignal
) => {
        return propertyCoverageGetPropertyCoverageByPropertyIDAndCoverageTypeID(
          {url: `/api/PropertyCoverage/GetPropertyCoverageByPropertyIDAndCoverageTypeID/${propertyID}/${coverageTypeID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyCoverageGetPropertyCoverageByPropertyIDAndCoverageTypeIDQueryKey = (propertyID: number,
    coverageTypeID: number,) => {
    return [`/api/PropertyCoverage/GetPropertyCoverageByPropertyIDAndCoverageTypeID/${propertyID}/${coverageTypeID}`] as const;
    }

    
export const usePropertyCoverageGetPropertyCoverageByPropertyIDAndCoverageTypeIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyCoverageGetPropertyCoverageByPropertyIDAndCoverageTypeIDHook>>>, TError = unknown>(propertyID: number,
    coverageTypeID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyCoverageGetPropertyCoverageByPropertyIDAndCoverageTypeIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyCoverageGetPropertyCoverageByPropertyIDAndCoverageTypeIDQueryKey(propertyID,coverageTypeID);

  const propertyCoverageGetPropertyCoverageByPropertyIDAndCoverageTypeID =  usePropertyCoverageGetPropertyCoverageByPropertyIDAndCoverageTypeIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyCoverageGetPropertyCoverageByPropertyIDAndCoverageTypeIDHook>>>> = ({ signal }) => propertyCoverageGetPropertyCoverageByPropertyIDAndCoverageTypeID(propertyID,coverageTypeID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(propertyID && coverageTypeID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyCoverageGetPropertyCoverageByPropertyIDAndCoverageTypeIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyCoverageGetPropertyCoverageByPropertyIDAndCoverageTypeIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyCoverageGetPropertyCoverageByPropertyIDAndCoverageTypeIDHook>>>>
export type PropertyCoverageGetPropertyCoverageByPropertyIDAndCoverageTypeIDQueryError = unknown

export const usePropertyCoverageGetPropertyCoverageByPropertyIDAndCoverageTypeID = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyCoverageGetPropertyCoverageByPropertyIDAndCoverageTypeIDHook>>>, TError = unknown>(
 propertyID: number,
    coverageTypeID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyCoverageGetPropertyCoverageByPropertyIDAndCoverageTypeIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyCoverageGetPropertyCoverageByPropertyIDAndCoverageTypeIDQueryOptions(propertyID,coverageTypeID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyMortgageCompanyGetAllPropertyMortgageCompanyHook = () => {
        const propertyMortgageCompanyGetAllPropertyMortgageCompany = useCustomInstance<DomainModelBenchmarkPropertyMortgageCompany[]>();

        return (
    
 signal?: AbortSignal
) => {
        return propertyMortgageCompanyGetAllPropertyMortgageCompany(
          {url: `/api/PropertyMortgageCompany/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyMortgageCompanyGetAllPropertyMortgageCompanyQueryKey = () => {
    return [`/api/PropertyMortgageCompany/getAll`] as const;
    }

    
export const usePropertyMortgageCompanyGetAllPropertyMortgageCompanyQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetAllPropertyMortgageCompanyHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetAllPropertyMortgageCompanyHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyMortgageCompanyGetAllPropertyMortgageCompanyQueryKey();

  const propertyMortgageCompanyGetAllPropertyMortgageCompany =  usePropertyMortgageCompanyGetAllPropertyMortgageCompanyHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetAllPropertyMortgageCompanyHook>>>> = ({ signal }) => propertyMortgageCompanyGetAllPropertyMortgageCompany(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetAllPropertyMortgageCompanyHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyMortgageCompanyGetAllPropertyMortgageCompanyQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetAllPropertyMortgageCompanyHook>>>>
export type PropertyMortgageCompanyGetAllPropertyMortgageCompanyQueryError = unknown

export const usePropertyMortgageCompanyGetAllPropertyMortgageCompany = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetAllPropertyMortgageCompanyHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetAllPropertyMortgageCompanyHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyMortgageCompanyGetAllPropertyMortgageCompanyQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyMortgageCompanyGetAllPropertyMortgageCompanyByStatusHook = () => {
        const propertyMortgageCompanyGetAllPropertyMortgageCompanyByStatus = useCustomInstance<DomainModelBenchmarkPropertyMortgageCompany[]>();

        return (
    statusId: number,
 signal?: AbortSignal
) => {
        return propertyMortgageCompanyGetAllPropertyMortgageCompanyByStatus(
          {url: `/api/statuses/${statusId}/PropertyMortgageCompany`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyMortgageCompanyGetAllPropertyMortgageCompanyByStatusQueryKey = (statusId: number,) => {
    return [`/api/statuses/${statusId}/PropertyMortgageCompany`] as const;
    }

    
export const usePropertyMortgageCompanyGetAllPropertyMortgageCompanyByStatusQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetAllPropertyMortgageCompanyByStatusHook>>>, TError = unknown>(statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetAllPropertyMortgageCompanyByStatusHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyMortgageCompanyGetAllPropertyMortgageCompanyByStatusQueryKey(statusId);

  const propertyMortgageCompanyGetAllPropertyMortgageCompanyByStatus =  usePropertyMortgageCompanyGetAllPropertyMortgageCompanyByStatusHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetAllPropertyMortgageCompanyByStatusHook>>>> = ({ signal }) => propertyMortgageCompanyGetAllPropertyMortgageCompanyByStatus(statusId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(statusId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetAllPropertyMortgageCompanyByStatusHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyMortgageCompanyGetAllPropertyMortgageCompanyByStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetAllPropertyMortgageCompanyByStatusHook>>>>
export type PropertyMortgageCompanyGetAllPropertyMortgageCompanyByStatusQueryError = unknown

export const usePropertyMortgageCompanyGetAllPropertyMortgageCompanyByStatus = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetAllPropertyMortgageCompanyByStatusHook>>>, TError = unknown>(
 statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetAllPropertyMortgageCompanyByStatusHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyMortgageCompanyGetAllPropertyMortgageCompanyByStatusQueryOptions(statusId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyMortgageCompanyGetPropertyMortgageCompanyByCustomerIdHook = () => {
        const propertyMortgageCompanyGetPropertyMortgageCompanyByCustomerId = useCustomInstance<DomainModelBenchmarkPropertyMortgageCompany[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return propertyMortgageCompanyGetPropertyMortgageCompanyByCustomerId(
          {url: `/api/customers/${customerId}/PropertyMortgageCompany`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyMortgageCompanyGetPropertyMortgageCompanyByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/PropertyMortgageCompany`] as const;
    }

    
export const usePropertyMortgageCompanyGetPropertyMortgageCompanyByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetPropertyMortgageCompanyByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetPropertyMortgageCompanyByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyMortgageCompanyGetPropertyMortgageCompanyByCustomerIdQueryKey(customerId);

  const propertyMortgageCompanyGetPropertyMortgageCompanyByCustomerId =  usePropertyMortgageCompanyGetPropertyMortgageCompanyByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetPropertyMortgageCompanyByCustomerIdHook>>>> = ({ signal }) => propertyMortgageCompanyGetPropertyMortgageCompanyByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetPropertyMortgageCompanyByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyMortgageCompanyGetPropertyMortgageCompanyByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetPropertyMortgageCompanyByCustomerIdHook>>>>
export type PropertyMortgageCompanyGetPropertyMortgageCompanyByCustomerIdQueryError = unknown

export const usePropertyMortgageCompanyGetPropertyMortgageCompanyByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetPropertyMortgageCompanyByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetPropertyMortgageCompanyByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyMortgageCompanyGetPropertyMortgageCompanyByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyMortgageCompanyGetPropertyMortgageCompanyByPropertyIDHook = () => {
        const propertyMortgageCompanyGetPropertyMortgageCompanyByPropertyID = useCustomInstance<DomainModelBenchmarkPropertyMortgageCompany[]>();

        return (
    propertyID: number,
 signal?: AbortSignal
) => {
        return propertyMortgageCompanyGetPropertyMortgageCompanyByPropertyID(
          {url: `/api/PropertyID/PropertyMortgageCompany/${propertyID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyMortgageCompanyGetPropertyMortgageCompanyByPropertyIDQueryKey = (propertyID: number,) => {
    return [`/api/PropertyID/PropertyMortgageCompany/${propertyID}`] as const;
    }

    
export const usePropertyMortgageCompanyGetPropertyMortgageCompanyByPropertyIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetPropertyMortgageCompanyByPropertyIDHook>>>, TError = unknown>(propertyID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetPropertyMortgageCompanyByPropertyIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyMortgageCompanyGetPropertyMortgageCompanyByPropertyIDQueryKey(propertyID);

  const propertyMortgageCompanyGetPropertyMortgageCompanyByPropertyID =  usePropertyMortgageCompanyGetPropertyMortgageCompanyByPropertyIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetPropertyMortgageCompanyByPropertyIDHook>>>> = ({ signal }) => propertyMortgageCompanyGetPropertyMortgageCompanyByPropertyID(propertyID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(propertyID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetPropertyMortgageCompanyByPropertyIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyMortgageCompanyGetPropertyMortgageCompanyByPropertyIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetPropertyMortgageCompanyByPropertyIDHook>>>>
export type PropertyMortgageCompanyGetPropertyMortgageCompanyByPropertyIDQueryError = unknown

export const usePropertyMortgageCompanyGetPropertyMortgageCompanyByPropertyID = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetPropertyMortgageCompanyByPropertyIDHook>>>, TError = unknown>(
 propertyID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetPropertyMortgageCompanyByPropertyIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyMortgageCompanyGetPropertyMortgageCompanyByPropertyIDQueryOptions(propertyID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyMortgageCompanyPostPropertyMortgageCompanyHook = () => {
        const propertyMortgageCompanyPostPropertyMortgageCompany = useCustomInstance<DomainModelBenchmarkPropertyMortgageCompany>();

        return (
    domainModelBenchmarkPropertyMortgageCompanyBody: DomainModelBenchmarkPropertyMortgageCompanyBody,
 ) => {
        return propertyMortgageCompanyPostPropertyMortgageCompany(
          {url: `/api/PropertyMortgageCompany/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyMortgageCompanyBody
    },
          );
        }
      }
    


export const usePropertyMortgageCompanyPostPropertyMortgageCompanyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyPostPropertyMortgageCompanyHook>>>, TError,{data: DomainModelBenchmarkPropertyMortgageCompanyBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyPostPropertyMortgageCompanyHook>>>, TError,{data: DomainModelBenchmarkPropertyMortgageCompanyBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyMortgageCompanyPostPropertyMortgageCompany =  usePropertyMortgageCompanyPostPropertyMortgageCompanyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyPostPropertyMortgageCompanyHook>>>, {data: DomainModelBenchmarkPropertyMortgageCompanyBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyMortgageCompanyPostPropertyMortgageCompany(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyMortgageCompanyPostPropertyMortgageCompanyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyPostPropertyMortgageCompanyHook>>>>
    export type PropertyMortgageCompanyPostPropertyMortgageCompanyMutationBody = DomainModelBenchmarkPropertyMortgageCompanyBody
    export type PropertyMortgageCompanyPostPropertyMortgageCompanyMutationError = unknown

    export const usePropertyMortgageCompanyPostPropertyMortgageCompany = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyPostPropertyMortgageCompanyHook>>>, TError,{data: DomainModelBenchmarkPropertyMortgageCompanyBody}, TContext>, }
) => {

      const mutationOptions = usePropertyMortgageCompanyPostPropertyMortgageCompanyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyMortgageCompanyRatePropertyMortgageCompanyHook = () => {
        const propertyMortgageCompanyRatePropertyMortgageCompany = useCustomInstance<DomainModelBenchmarkPropertyMortgageCompany>();

        return (
    domainModelBenchmarkPropertyMortgageCompanyBody: DomainModelBenchmarkPropertyMortgageCompanyBody,
 ) => {
        return propertyMortgageCompanyRatePropertyMortgageCompany(
          {url: `/api/PropertyMortgageCompany/rate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyMortgageCompanyBody
    },
          );
        }
      }
    


export const usePropertyMortgageCompanyRatePropertyMortgageCompanyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyRatePropertyMortgageCompanyHook>>>, TError,{data: DomainModelBenchmarkPropertyMortgageCompanyBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyRatePropertyMortgageCompanyHook>>>, TError,{data: DomainModelBenchmarkPropertyMortgageCompanyBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyMortgageCompanyRatePropertyMortgageCompany =  usePropertyMortgageCompanyRatePropertyMortgageCompanyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyRatePropertyMortgageCompanyHook>>>, {data: DomainModelBenchmarkPropertyMortgageCompanyBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyMortgageCompanyRatePropertyMortgageCompany(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyMortgageCompanyRatePropertyMortgageCompanyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyRatePropertyMortgageCompanyHook>>>>
    export type PropertyMortgageCompanyRatePropertyMortgageCompanyMutationBody = DomainModelBenchmarkPropertyMortgageCompanyBody
    export type PropertyMortgageCompanyRatePropertyMortgageCompanyMutationError = unknown

    export const usePropertyMortgageCompanyRatePropertyMortgageCompany = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyRatePropertyMortgageCompanyHook>>>, TError,{data: DomainModelBenchmarkPropertyMortgageCompanyBody}, TContext>, }
) => {

      const mutationOptions = usePropertyMortgageCompanyRatePropertyMortgageCompanyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyMortgageCompanyPutPropertyMortgageCompanyHook = () => {
        const propertyMortgageCompanyPutPropertyMortgageCompany = useCustomInstance<DomainModelBenchmarkPropertyMortgageCompany>();

        return (
    domainModelBenchmarkPropertyMortgageCompanyBody: DomainModelBenchmarkPropertyMortgageCompanyBody,
 ) => {
        return propertyMortgageCompanyPutPropertyMortgageCompany(
          {url: `/api/PropertyMortgageCompany/edit`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyMortgageCompanyBody
    },
          );
        }
      }
    


export const usePropertyMortgageCompanyPutPropertyMortgageCompanyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyPutPropertyMortgageCompanyHook>>>, TError,{data: DomainModelBenchmarkPropertyMortgageCompanyBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyPutPropertyMortgageCompanyHook>>>, TError,{data: DomainModelBenchmarkPropertyMortgageCompanyBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyMortgageCompanyPutPropertyMortgageCompany =  usePropertyMortgageCompanyPutPropertyMortgageCompanyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyPutPropertyMortgageCompanyHook>>>, {data: DomainModelBenchmarkPropertyMortgageCompanyBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyMortgageCompanyPutPropertyMortgageCompany(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyMortgageCompanyPutPropertyMortgageCompanyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyPutPropertyMortgageCompanyHook>>>>
    export type PropertyMortgageCompanyPutPropertyMortgageCompanyMutationBody = DomainModelBenchmarkPropertyMortgageCompanyBody
    export type PropertyMortgageCompanyPutPropertyMortgageCompanyMutationError = unknown

    export const usePropertyMortgageCompanyPutPropertyMortgageCompany = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyPutPropertyMortgageCompanyHook>>>, TError,{data: DomainModelBenchmarkPropertyMortgageCompanyBody}, TContext>, }
) => {

      const mutationOptions = usePropertyMortgageCompanyPutPropertyMortgageCompanyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyMortgageCompanyDeletePropertyMortgageCompanyHook = () => {
        const propertyMortgageCompanyDeletePropertyMortgageCompany = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return propertyMortgageCompanyDeletePropertyMortgageCompany(
          {url: `/api/PropertyMortgageCompany/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyMortgageCompanyDeletePropertyMortgageCompanyQueryKey = (id: number,) => {
    return [`/api/PropertyMortgageCompany/delete/${id}`] as const;
    }

    
export const usePropertyMortgageCompanyDeletePropertyMortgageCompanyQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyDeletePropertyMortgageCompanyHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyDeletePropertyMortgageCompanyHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyMortgageCompanyDeletePropertyMortgageCompanyQueryKey(id);

  const propertyMortgageCompanyDeletePropertyMortgageCompany =  usePropertyMortgageCompanyDeletePropertyMortgageCompanyHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyDeletePropertyMortgageCompanyHook>>>> = ({ signal }) => propertyMortgageCompanyDeletePropertyMortgageCompany(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyDeletePropertyMortgageCompanyHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyMortgageCompanyDeletePropertyMortgageCompanyQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyDeletePropertyMortgageCompanyHook>>>>
export type PropertyMortgageCompanyDeletePropertyMortgageCompanyQueryError = unknown

export const usePropertyMortgageCompanyDeletePropertyMortgageCompany = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyDeletePropertyMortgageCompanyHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyDeletePropertyMortgageCompanyHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyMortgageCompanyDeletePropertyMortgageCompanyQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyMortgageCompanyUpdatePropertyMortgageCompanyHook = () => {
        const propertyMortgageCompanyUpdatePropertyMortgageCompany = useCustomInstance<DomainModelBenchmarkPropertyMortgageCompany[]>();

        return (
    domainModelBenchmarkPropertyMortgageCompany: DomainModelBenchmarkPropertyMortgageCompany[],
 ) => {
        return propertyMortgageCompanyUpdatePropertyMortgageCompany(
          {url: `/api/PropertyMortgageCompany/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyMortgageCompany
    },
          );
        }
      }
    


export const usePropertyMortgageCompanyUpdatePropertyMortgageCompanyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyUpdatePropertyMortgageCompanyHook>>>, TError,{data: DomainModelBenchmarkPropertyMortgageCompany[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyUpdatePropertyMortgageCompanyHook>>>, TError,{data: DomainModelBenchmarkPropertyMortgageCompany[]}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyMortgageCompanyUpdatePropertyMortgageCompany =  usePropertyMortgageCompanyUpdatePropertyMortgageCompanyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyUpdatePropertyMortgageCompanyHook>>>, {data: DomainModelBenchmarkPropertyMortgageCompany[]}> = (props) => {
          const {data} = props ?? {};

          return  propertyMortgageCompanyUpdatePropertyMortgageCompany(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyMortgageCompanyUpdatePropertyMortgageCompanyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyUpdatePropertyMortgageCompanyHook>>>>
    export type PropertyMortgageCompanyUpdatePropertyMortgageCompanyMutationBody = DomainModelBenchmarkPropertyMortgageCompany[]
    export type PropertyMortgageCompanyUpdatePropertyMortgageCompanyMutationError = unknown

    export const usePropertyMortgageCompanyUpdatePropertyMortgageCompany = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyUpdatePropertyMortgageCompanyHook>>>, TError,{data: DomainModelBenchmarkPropertyMortgageCompany[]}, TContext>, }
) => {

      const mutationOptions = usePropertyMortgageCompanyUpdatePropertyMortgageCompanyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyMortgageCompanyGetHook = () => {
        const propertyMortgageCompanyGet = useCustomInstance<DomainModelBenchmarkPropertyMortgageCompany>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return propertyMortgageCompanyGet(
          {url: `/api/PropertyMortgageCompany/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyMortgageCompanyGetQueryKey = (id: number,) => {
    return [`/api/PropertyMortgageCompany/${id}`] as const;
    }

    
export const usePropertyMortgageCompanyGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyMortgageCompanyGetQueryKey(id);

  const propertyMortgageCompanyGet =  usePropertyMortgageCompanyGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetHook>>>> = ({ signal }) => propertyMortgageCompanyGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyMortgageCompanyGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetHook>>>>
export type PropertyMortgageCompanyGetQueryError = unknown

export const usePropertyMortgageCompanyGet = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyMortgageCompanyGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyMortgageCompanyGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyTypeGetAllPropertyTypeHook = () => {
        const propertyTypeGetAllPropertyType = useCustomInstance<DomainModelBenchmarkPropertyType[]>();

        return (
    
 signal?: AbortSignal
) => {
        return propertyTypeGetAllPropertyType(
          {url: `/api/PropertyType/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyTypeGetAllPropertyTypeQueryKey = () => {
    return [`/api/PropertyType/getAll`] as const;
    }

    
export const usePropertyTypeGetAllPropertyTypeQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllPropertyTypeHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllPropertyTypeHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyTypeGetAllPropertyTypeQueryKey();

  const propertyTypeGetAllPropertyType =  usePropertyTypeGetAllPropertyTypeHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllPropertyTypeHook>>>> = ({ signal }) => propertyTypeGetAllPropertyType(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllPropertyTypeHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyTypeGetAllPropertyTypeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllPropertyTypeHook>>>>
export type PropertyTypeGetAllPropertyTypeQueryError = unknown

export const usePropertyTypeGetAllPropertyType = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllPropertyTypeHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllPropertyTypeHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyTypeGetAllPropertyTypeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyTypeGetHook = () => {
        const propertyTypeGet = useCustomInstance<DomainModelBenchmarkPropertyType>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return propertyTypeGet(
          {url: `/api/PropertyType/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyTypeGetQueryKey = (id: number,) => {
    return [`/api/PropertyType/get/${id}`] as const;
    }

    
export const usePropertyTypeGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyTypeGetQueryKey(id);

  const propertyTypeGet =  usePropertyTypeGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetHook>>>> = ({ signal }) => propertyTypeGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyTypeGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetHook>>>>
export type PropertyTypeGetQueryError = unknown

export const usePropertyTypeGet = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyTypeGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyTypeGetAllUsersHook = () => {
        const propertyTypeGetAllUsers = useCustomInstance<DomainModelUser[]>();

        return (
    
 signal?: AbortSignal
) => {
        return propertyTypeGetAllUsers(
          {url: `/api/PropertyType/users`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyTypeGetAllUsersQueryKey = () => {
    return [`/api/PropertyType/users`] as const;
    }

    
export const usePropertyTypeGetAllUsersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllUsersHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllUsersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyTypeGetAllUsersQueryKey();

  const propertyTypeGetAllUsers =  usePropertyTypeGetAllUsersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllUsersHook>>>> = ({ signal }) => propertyTypeGetAllUsers(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllUsersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyTypeGetAllUsersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllUsersHook>>>>
export type PropertyTypeGetAllUsersQueryError = unknown

export const usePropertyTypeGetAllUsers = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllUsersHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllUsersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyTypeGetAllUsersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyTypeGetAllPropertyTypeByStatusHook = () => {
        const propertyTypeGetAllPropertyTypeByStatus = useCustomInstance<DomainModelBenchmarkPropertyType[]>();

        return (
    statusId: number,
 signal?: AbortSignal
) => {
        return propertyTypeGetAllPropertyTypeByStatus(
          {url: `/api/statuses/${statusId}/PropertyType`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyTypeGetAllPropertyTypeByStatusQueryKey = (statusId: number,) => {
    return [`/api/statuses/${statusId}/PropertyType`] as const;
    }

    
export const usePropertyTypeGetAllPropertyTypeByStatusQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllPropertyTypeByStatusHook>>>, TError = unknown>(statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllPropertyTypeByStatusHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyTypeGetAllPropertyTypeByStatusQueryKey(statusId);

  const propertyTypeGetAllPropertyTypeByStatus =  usePropertyTypeGetAllPropertyTypeByStatusHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllPropertyTypeByStatusHook>>>> = ({ signal }) => propertyTypeGetAllPropertyTypeByStatus(statusId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(statusId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllPropertyTypeByStatusHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyTypeGetAllPropertyTypeByStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllPropertyTypeByStatusHook>>>>
export type PropertyTypeGetAllPropertyTypeByStatusQueryError = unknown

export const usePropertyTypeGetAllPropertyTypeByStatus = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllPropertyTypeByStatusHook>>>, TError = unknown>(
 statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllPropertyTypeByStatusHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyTypeGetAllPropertyTypeByStatusQueryOptions(statusId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyTypePostPropertyTypeHook = () => {
        const propertyTypePostPropertyType = useCustomInstance<DomainModelBenchmarkPropertyType>();

        return (
    domainModelBenchmarkPropertyTypeBody: DomainModelBenchmarkPropertyTypeBody,
 ) => {
        return propertyTypePostPropertyType(
          {url: `/api/PropertyType/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyTypeBody
    },
          );
        }
      }
    


export const usePropertyTypePostPropertyTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypePostPropertyTypeHook>>>, TError,{data: DomainModelBenchmarkPropertyTypeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypePostPropertyTypeHook>>>, TError,{data: DomainModelBenchmarkPropertyTypeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyTypePostPropertyType =  usePropertyTypePostPropertyTypeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyTypePostPropertyTypeHook>>>, {data: DomainModelBenchmarkPropertyTypeBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyTypePostPropertyType(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyTypePostPropertyTypeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyTypePostPropertyTypeHook>>>>
    export type PropertyTypePostPropertyTypeMutationBody = DomainModelBenchmarkPropertyTypeBody
    export type PropertyTypePostPropertyTypeMutationError = unknown

    export const usePropertyTypePostPropertyType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypePostPropertyTypeHook>>>, TError,{data: DomainModelBenchmarkPropertyTypeBody}, TContext>, }
) => {

      const mutationOptions = usePropertyTypePostPropertyTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyTypeRatePropertyTypeHook = () => {
        const propertyTypeRatePropertyType = useCustomInstance<DomainModelBenchmarkPropertyType>();

        return (
    domainModelBenchmarkPropertyTypeBody: DomainModelBenchmarkPropertyTypeBody,
 ) => {
        return propertyTypeRatePropertyType(
          {url: `/api/PropertyType/rate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyTypeBody
    },
          );
        }
      }
    


export const usePropertyTypeRatePropertyTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypeRatePropertyTypeHook>>>, TError,{data: DomainModelBenchmarkPropertyTypeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypeRatePropertyTypeHook>>>, TError,{data: DomainModelBenchmarkPropertyTypeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyTypeRatePropertyType =  usePropertyTypeRatePropertyTypeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyTypeRatePropertyTypeHook>>>, {data: DomainModelBenchmarkPropertyTypeBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyTypeRatePropertyType(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyTypeRatePropertyTypeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyTypeRatePropertyTypeHook>>>>
    export type PropertyTypeRatePropertyTypeMutationBody = DomainModelBenchmarkPropertyTypeBody
    export type PropertyTypeRatePropertyTypeMutationError = unknown

    export const usePropertyTypeRatePropertyType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypeRatePropertyTypeHook>>>, TError,{data: DomainModelBenchmarkPropertyTypeBody}, TContext>, }
) => {

      const mutationOptions = usePropertyTypeRatePropertyTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyTypePutPropertyTypeHook = () => {
        const propertyTypePutPropertyType = useCustomInstance<DomainModelBenchmarkPropertyType>();

        return (
    domainModelBenchmarkPropertyTypeBody: DomainModelBenchmarkPropertyTypeBody,
 ) => {
        return propertyTypePutPropertyType(
          {url: `/api/PropertyType/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkPropertyTypeBody
    },
          );
        }
      }
    


export const usePropertyTypePutPropertyTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypePutPropertyTypeHook>>>, TError,{data: DomainModelBenchmarkPropertyTypeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypePutPropertyTypeHook>>>, TError,{data: DomainModelBenchmarkPropertyTypeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const propertyTypePutPropertyType =  usePropertyTypePutPropertyTypeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePropertyTypePutPropertyTypeHook>>>, {data: DomainModelBenchmarkPropertyTypeBody}> = (props) => {
          const {data} = props ?? {};

          return  propertyTypePutPropertyType(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PropertyTypePutPropertyTypeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyTypePutPropertyTypeHook>>>>
    export type PropertyTypePutPropertyTypeMutationBody = DomainModelBenchmarkPropertyTypeBody
    export type PropertyTypePutPropertyTypeMutationError = unknown

    export const usePropertyTypePutPropertyType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypePutPropertyTypeHook>>>, TError,{data: DomainModelBenchmarkPropertyTypeBody}, TContext>, }
) => {

      const mutationOptions = usePropertyTypePutPropertyTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usePropertyTypeDeletePropertyTypeHook = () => {
        const propertyTypeDeletePropertyType = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return propertyTypeDeletePropertyType(
          {url: `/api/PropertyType/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyTypeDeletePropertyTypeQueryKey = (id: number,) => {
    return [`/api/PropertyType/delete/${id}`] as const;
    }

    
export const usePropertyTypeDeletePropertyTypeQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyTypeDeletePropertyTypeHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypeDeletePropertyTypeHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyTypeDeletePropertyTypeQueryKey(id);

  const propertyTypeDeletePropertyType =  usePropertyTypeDeletePropertyTypeHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyTypeDeletePropertyTypeHook>>>> = ({ signal }) => propertyTypeDeletePropertyType(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypeDeletePropertyTypeHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyTypeDeletePropertyTypeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyTypeDeletePropertyTypeHook>>>>
export type PropertyTypeDeletePropertyTypeQueryError = unknown

export const usePropertyTypeDeletePropertyType = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyTypeDeletePropertyTypeHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypeDeletePropertyTypeHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyTypeDeletePropertyTypeQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usePropertyTypeGetAllPropertyTypeWithFiltersHook = () => {
        const propertyTypeGetAllPropertyTypeWithFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkPropertyType>();

        return (
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return propertyTypeGetAllPropertyTypeWithFilters(
          {url: `/api/PropertyType/GetAllPropertyTypeWithFilters/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getPropertyTypeGetAllPropertyTypeWithFiltersQueryKey = (startIndex: number,
    endIndex: number,) => {
    return [`/api/PropertyType/GetAllPropertyTypeWithFilters/${startIndex}/${endIndex}`] as const;
    }

    
export const usePropertyTypeGetAllPropertyTypeWithFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllPropertyTypeWithFiltersHook>>>, TError = unknown>(startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllPropertyTypeWithFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPropertyTypeGetAllPropertyTypeWithFiltersQueryKey(startIndex,endIndex);

  const propertyTypeGetAllPropertyTypeWithFilters =  usePropertyTypeGetAllPropertyTypeWithFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllPropertyTypeWithFiltersHook>>>> = ({ signal }) => propertyTypeGetAllPropertyTypeWithFilters(startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllPropertyTypeWithFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type PropertyTypeGetAllPropertyTypeWithFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllPropertyTypeWithFiltersHook>>>>
export type PropertyTypeGetAllPropertyTypeWithFiltersQueryError = unknown

export const usePropertyTypeGetAllPropertyTypeWithFilters = <TData = Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllPropertyTypeWithFiltersHook>>>, TError = unknown>(
 startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePropertyTypeGetAllPropertyTypeWithFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = usePropertyTypeGetAllPropertyTypeWithFiltersQueryOptions(startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary This method is used from Getting Customer list.
 */
export const useQuickBookAppQuickBookGetCustomerListHook = () => {
        const quickBookAppQuickBookGetCustomerList = useCustomInstance<DomainModelBenchmarkCustomer[]>();

        return (
    
 signal?: AbortSignal
) => {
        return quickBookAppQuickBookGetCustomerList(
          {url: `/api/QuickBookApp`, method: 'GET', signal
    },
          );
        }
      }
    

export const getQuickBookAppQuickBookGetCustomerListQueryKey = () => {
    return [`/api/QuickBookApp`] as const;
    }

    
export const useQuickBookAppQuickBookGetCustomerListQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useQuickBookAppQuickBookGetCustomerListHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useQuickBookAppQuickBookGetCustomerListHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQuickBookAppQuickBookGetCustomerListQueryKey();

  const quickBookAppQuickBookGetCustomerList =  useQuickBookAppQuickBookGetCustomerListHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useQuickBookAppQuickBookGetCustomerListHook>>>> = ({ signal }) => quickBookAppQuickBookGetCustomerList(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useQuickBookAppQuickBookGetCustomerListHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type QuickBookAppQuickBookGetCustomerListQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useQuickBookAppQuickBookGetCustomerListHook>>>>
export type QuickBookAppQuickBookGetCustomerListQueryError = unknown

/**
 * @summary This method is used from Getting Customer list.
 */
export const useQuickBookAppQuickBookGetCustomerList = <TData = Awaited<ReturnType<ReturnType<typeof useQuickBookAppQuickBookGetCustomerListHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useQuickBookAppQuickBookGetCustomerListHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useQuickBookAppQuickBookGetCustomerListQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary This method is used to get Customer list to pass Company Id, Access-token and Customer ID
 */
export const useQuickBookAppCustomerDetailsHook = () => {
        const quickBookAppCustomerDetails = useCustomInstance<DomainModelBenchmarkCustomer[]>();

        return (
    id: number,
    params: QuickBookAppCustomerDetailsParams,
 ) => {
        return quickBookAppCustomerDetails(
          {url: `/api/QuickBookApp/${id}`, method: 'POST',
        params
    },
          );
        }
      }
    


export const useQuickBookAppCustomerDetailsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useQuickBookAppCustomerDetailsHook>>>, TError,{id: number;params: QuickBookAppCustomerDetailsParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useQuickBookAppCustomerDetailsHook>>>, TError,{id: number;params: QuickBookAppCustomerDetailsParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const quickBookAppCustomerDetails =  useQuickBookAppCustomerDetailsHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useQuickBookAppCustomerDetailsHook>>>, {id: number;params: QuickBookAppCustomerDetailsParams}> = (props) => {
          const {id,params} = props ?? {};

          return  quickBookAppCustomerDetails(id,params,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type QuickBookAppCustomerDetailsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useQuickBookAppCustomerDetailsHook>>>>
    
    export type QuickBookAppCustomerDetailsMutationError = unknown

    /**
 * @summary This method is used to get Customer list to pass Company Id, Access-token and Customer ID
 */
export const useQuickBookAppCustomerDetails = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useQuickBookAppCustomerDetailsHook>>>, TError,{id: number;params: QuickBookAppCustomerDetailsParams}, TContext>, }
) => {

      const mutationOptions = useQuickBookAppCustomerDetailsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useQuoteQuoteProcessGenerateInvoiceHook = () => {
        const quoteQuoteProcessGenerateInvoice = useCustomInstance<DomainModelBenchmarkInvoice>();

        return (
    customerID: number,
 signal?: AbortSignal
) => {
        return quoteQuoteProcessGenerateInvoice(
          {url: `/api/QuoteProcess/QuoteProcessGenerateInvoice/${customerID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getQuoteQuoteProcessGenerateInvoiceQueryKey = (customerID: number,) => {
    return [`/api/QuoteProcess/QuoteProcessGenerateInvoice/${customerID}`] as const;
    }

    
export const useQuoteQuoteProcessGenerateInvoiceQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useQuoteQuoteProcessGenerateInvoiceHook>>>, TError = unknown>(customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useQuoteQuoteProcessGenerateInvoiceHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQuoteQuoteProcessGenerateInvoiceQueryKey(customerID);

  const quoteQuoteProcessGenerateInvoice =  useQuoteQuoteProcessGenerateInvoiceHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useQuoteQuoteProcessGenerateInvoiceHook>>>> = ({ signal }) => quoteQuoteProcessGenerateInvoice(customerID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useQuoteQuoteProcessGenerateInvoiceHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type QuoteQuoteProcessGenerateInvoiceQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useQuoteQuoteProcessGenerateInvoiceHook>>>>
export type QuoteQuoteProcessGenerateInvoiceQueryError = unknown

export const useQuoteQuoteProcessGenerateInvoice = <TData = Awaited<ReturnType<ReturnType<typeof useQuoteQuoteProcessGenerateInvoiceHook>>>, TError = unknown>(
 customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useQuoteQuoteProcessGenerateInvoiceHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useQuoteQuoteProcessGenerateInvoiceQueryOptions(customerID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useQuoteBindProcessorHook = () => {
        const quoteBindProcessor = useCustomInstance<QuoteBindProcessor200One | QuoteBindProcessor200Two | QuoteBindProcessor200Three | QuoteBindProcessor200Four>();

        return (
    customerID: number,
    bindTypeId: number,
 signal?: AbortSignal
) => {
        return quoteBindProcessor(
          {url: `/api/QuoteProcess/BindProcessor/${customerID}/${bindTypeId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getQuoteBindProcessorQueryKey = (customerID: number,
    bindTypeId: number,) => {
    return [`/api/QuoteProcess/BindProcessor/${customerID}/${bindTypeId}`] as const;
    }

    
export const useQuoteBindProcessorQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useQuoteBindProcessorHook>>>, TError = unknown>(customerID: number,
    bindTypeId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useQuoteBindProcessorHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQuoteBindProcessorQueryKey(customerID,bindTypeId);

  const quoteBindProcessor =  useQuoteBindProcessorHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useQuoteBindProcessorHook>>>> = ({ signal }) => quoteBindProcessor(customerID,bindTypeId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerID && bindTypeId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useQuoteBindProcessorHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type QuoteBindProcessorQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useQuoteBindProcessorHook>>>>
export type QuoteBindProcessorQueryError = unknown

export const useQuoteBindProcessor = <TData = Awaited<ReturnType<ReturnType<typeof useQuoteBindProcessorHook>>>, TError = unknown>(
 customerID: number,
    bindTypeId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useQuoteBindProcessorHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useQuoteBindProcessorQueryOptions(customerID,bindTypeId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useQuoteBindPolicyHook = () => {
        const quoteBindPolicy = useCustomInstance<QuoteBindPolicy200One | QuoteBindPolicy200Two | QuoteBindPolicy200Three | QuoteBindPolicy200Four>();

        return (
    customerID: number,
 signal?: AbortSignal
) => {
        return quoteBindPolicy(
          {url: `/api/QuoteProcess/BindPolicy/${customerID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getQuoteBindPolicyQueryKey = (customerID: number,) => {
    return [`/api/QuoteProcess/BindPolicy/${customerID}`] as const;
    }

    
export const useQuoteBindPolicyQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useQuoteBindPolicyHook>>>, TError = unknown>(customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useQuoteBindPolicyHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQuoteBindPolicyQueryKey(customerID);

  const quoteBindPolicy =  useQuoteBindPolicyHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useQuoteBindPolicyHook>>>> = ({ signal }) => quoteBindPolicy(customerID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useQuoteBindPolicyHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type QuoteBindPolicyQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useQuoteBindPolicyHook>>>>
export type QuoteBindPolicyQueryError = unknown

export const useQuoteBindPolicy = <TData = Awaited<ReturnType<ReturnType<typeof useQuoteBindPolicyHook>>>, TError = unknown>(
 customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useQuoteBindPolicyHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useQuoteBindPolicyQueryOptions(customerID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useQuoteBindPolicyWithAgencyCreditHook = () => {
        const quoteBindPolicyWithAgencyCredit = useCustomInstance<QuoteBindPolicyWithAgencyCredit200One | QuoteBindPolicyWithAgencyCredit200Two | QuoteBindPolicyWithAgencyCredit200Three | QuoteBindPolicyWithAgencyCredit200Four>();

        return (
    customerID: number,
    params: QuoteBindPolicyWithAgencyCreditParams,
 signal?: AbortSignal
) => {
        return quoteBindPolicyWithAgencyCredit(
          {url: `/api/QuoteProcess/BindPolicy/AgencyCredit/${customerID}`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getQuoteBindPolicyWithAgencyCreditQueryKey = (customerID: number,
    params: QuoteBindPolicyWithAgencyCreditParams,) => {
    return [`/api/QuoteProcess/BindPolicy/AgencyCredit/${customerID}`, ...(params ? [params]: [])] as const;
    }

    
export const useQuoteBindPolicyWithAgencyCreditQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useQuoteBindPolicyWithAgencyCreditHook>>>, TError = unknown>(customerID: number,
    params: QuoteBindPolicyWithAgencyCreditParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useQuoteBindPolicyWithAgencyCreditHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQuoteBindPolicyWithAgencyCreditQueryKey(customerID,params);

  const quoteBindPolicyWithAgencyCredit =  useQuoteBindPolicyWithAgencyCreditHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useQuoteBindPolicyWithAgencyCreditHook>>>> = ({ signal }) => quoteBindPolicyWithAgencyCredit(customerID,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useQuoteBindPolicyWithAgencyCreditHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type QuoteBindPolicyWithAgencyCreditQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useQuoteBindPolicyWithAgencyCreditHook>>>>
export type QuoteBindPolicyWithAgencyCreditQueryError = unknown

export const useQuoteBindPolicyWithAgencyCredit = <TData = Awaited<ReturnType<ReturnType<typeof useQuoteBindPolicyWithAgencyCreditHook>>>, TError = unknown>(
 customerID: number,
    params: QuoteBindPolicyWithAgencyCreditParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useQuoteBindPolicyWithAgencyCreditHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useQuoteBindPolicyWithAgencyCreditQueryOptions(customerID,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useQuoteGetDownPaymentStatusHook = () => {
        const quoteGetDownPaymentStatus = useCustomInstance<DomainModelBenchmarkInvoice>();

        return (
    customerID: number,
 signal?: AbortSignal
) => {
        return quoteGetDownPaymentStatus(
          {url: `/api/QuoteProcess/GetDownPaymentStatus/${customerID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getQuoteGetDownPaymentStatusQueryKey = (customerID: number,) => {
    return [`/api/QuoteProcess/GetDownPaymentStatus/${customerID}`] as const;
    }

    
export const useQuoteGetDownPaymentStatusQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useQuoteGetDownPaymentStatusHook>>>, TError = unknown>(customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useQuoteGetDownPaymentStatusHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getQuoteGetDownPaymentStatusQueryKey(customerID);

  const quoteGetDownPaymentStatus =  useQuoteGetDownPaymentStatusHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useQuoteGetDownPaymentStatusHook>>>> = ({ signal }) => quoteGetDownPaymentStatus(customerID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useQuoteGetDownPaymentStatusHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type QuoteGetDownPaymentStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useQuoteGetDownPaymentStatusHook>>>>
export type QuoteGetDownPaymentStatusQueryError = unknown

export const useQuoteGetDownPaymentStatus = <TData = Awaited<ReturnType<ReturnType<typeof useQuoteGetDownPaymentStatusHook>>>, TError = unknown>(
 customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useQuoteGetDownPaymentStatusHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useQuoteGetDownPaymentStatusQueryOptions(customerID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useRatingInsureInvestorsRaterHook = () => {
        const ratingInsureInvestorsRater = useCustomInstance<DomainModelInsureInvestorsRating>();

        return (
    domainModelInsureInvestorsRatingBody: DomainModelInsureInvestorsRatingBody,
 ) => {
        return ratingInsureInvestorsRater(
          {url: `/api/Rating/InsureInvestorsRater`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelInsureInvestorsRatingBody
    },
          );
        }
      }
    


export const useRatingInsureInvestorsRaterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingInsureInvestorsRaterHook>>>, TError,{data: DomainModelInsureInvestorsRatingBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingInsureInvestorsRaterHook>>>, TError,{data: DomainModelInsureInvestorsRatingBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const ratingInsureInvestorsRater =  useRatingInsureInvestorsRaterHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useRatingInsureInvestorsRaterHook>>>, {data: DomainModelInsureInvestorsRatingBody}> = (props) => {
          const {data} = props ?? {};

          return  ratingInsureInvestorsRater(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type RatingInsureInvestorsRaterMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRatingInsureInvestorsRaterHook>>>>
    export type RatingInsureInvestorsRaterMutationBody = DomainModelInsureInvestorsRatingBody
    export type RatingInsureInvestorsRaterMutationError = unknown

    export const useRatingInsureInvestorsRater = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingInsureInvestorsRaterHook>>>, TError,{data: DomainModelInsureInvestorsRatingBody}, TContext>, }
) => {

      const mutationOptions = useRatingInsureInvestorsRaterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useRatingInsureInvestorsWebRaterHook = () => {
        const ratingInsureInvestorsWebRater = useCustomInstance<DomainModelInsureInvestorsRating>();

        return (
    domainModelInsureInvestorsRatingBody: DomainModelInsureInvestorsRatingBody,
 ) => {
        return ratingInsureInvestorsWebRater(
          {url: `/api/Rating/InsureInvestorsWebRater`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelInsureInvestorsRatingBody
    },
          );
        }
      }
    


export const useRatingInsureInvestorsWebRaterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingInsureInvestorsWebRaterHook>>>, TError,{data: DomainModelInsureInvestorsRatingBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingInsureInvestorsWebRaterHook>>>, TError,{data: DomainModelInsureInvestorsRatingBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const ratingInsureInvestorsWebRater =  useRatingInsureInvestorsWebRaterHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useRatingInsureInvestorsWebRaterHook>>>, {data: DomainModelInsureInvestorsRatingBody}> = (props) => {
          const {data} = props ?? {};

          return  ratingInsureInvestorsWebRater(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type RatingInsureInvestorsWebRaterMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRatingInsureInvestorsWebRaterHook>>>>
    export type RatingInsureInvestorsWebRaterMutationBody = DomainModelInsureInvestorsRatingBody
    export type RatingInsureInvestorsWebRaterMutationError = unknown

    export const useRatingInsureInvestorsWebRater = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingInsureInvestorsWebRaterHook>>>, TError,{data: DomainModelInsureInvestorsRatingBody}, TContext>, }
) => {

      const mutationOptions = useRatingInsureInvestorsWebRaterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useRatingInsureInvestorEndorsementRaterHook = () => {
        const ratingInsureInvestorEndorsementRater = useCustomInstance<DomainModelInsureInvestorsRating>();

        return (
    domainModelInsureInvestorsRatingBody: DomainModelInsureInvestorsRatingBody,
 ) => {
        return ratingInsureInvestorEndorsementRater(
          {url: `/api/Rating/InsureInvestorEndorsementRater`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelInsureInvestorsRatingBody
    },
          );
        }
      }
    


export const useRatingInsureInvestorEndorsementRaterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingInsureInvestorEndorsementRaterHook>>>, TError,{data: DomainModelInsureInvestorsRatingBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingInsureInvestorEndorsementRaterHook>>>, TError,{data: DomainModelInsureInvestorsRatingBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const ratingInsureInvestorEndorsementRater =  useRatingInsureInvestorEndorsementRaterHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useRatingInsureInvestorEndorsementRaterHook>>>, {data: DomainModelInsureInvestorsRatingBody}> = (props) => {
          const {data} = props ?? {};

          return  ratingInsureInvestorEndorsementRater(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type RatingInsureInvestorEndorsementRaterMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRatingInsureInvestorEndorsementRaterHook>>>>
    export type RatingInsureInvestorEndorsementRaterMutationBody = DomainModelInsureInvestorsRatingBody
    export type RatingInsureInvestorEndorsementRaterMutationError = unknown

    export const useRatingInsureInvestorEndorsementRater = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingInsureInvestorEndorsementRaterHook>>>, TError,{data: DomainModelInsureInvestorsRatingBody}, TContext>, }
) => {

      const mutationOptions = useRatingInsureInvestorEndorsementRaterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useRatingInsureInvestorEndorsementProRataCalculatorHook = () => {
        const ratingInsureInvestorEndorsementProRataCalculator = useCustomInstance<DomainModelInsureInvestorsRating>();

        return (
    propertyId: number,
    effectiveDate: string,
 signal?: AbortSignal
) => {
        return ratingInsureInvestorEndorsementProRataCalculator(
          {url: `/api/Rating/InsureInvestorEndorsementProRataCalculator/${propertyId}/${effectiveDate}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getRatingInsureInvestorEndorsementProRataCalculatorQueryKey = (propertyId: number,
    effectiveDate: string,) => {
    return [`/api/Rating/InsureInvestorEndorsementProRataCalculator/${propertyId}/${effectiveDate}`] as const;
    }

    
export const useRatingInsureInvestorEndorsementProRataCalculatorQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useRatingInsureInvestorEndorsementProRataCalculatorHook>>>, TError = unknown>(propertyId: number,
    effectiveDate: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRatingInsureInvestorEndorsementProRataCalculatorHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRatingInsureInvestorEndorsementProRataCalculatorQueryKey(propertyId,effectiveDate);

  const ratingInsureInvestorEndorsementProRataCalculator =  useRatingInsureInvestorEndorsementProRataCalculatorHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useRatingInsureInvestorEndorsementProRataCalculatorHook>>>> = ({ signal }) => ratingInsureInvestorEndorsementProRataCalculator(propertyId,effectiveDate, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(propertyId && effectiveDate), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRatingInsureInvestorEndorsementProRataCalculatorHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type RatingInsureInvestorEndorsementProRataCalculatorQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRatingInsureInvestorEndorsementProRataCalculatorHook>>>>
export type RatingInsureInvestorEndorsementProRataCalculatorQueryError = unknown

export const useRatingInsureInvestorEndorsementProRataCalculator = <TData = Awaited<ReturnType<ReturnType<typeof useRatingInsureInvestorEndorsementProRataCalculatorHook>>>, TError = unknown>(
 propertyId: number,
    effectiveDate: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRatingInsureInvestorEndorsementProRataCalculatorHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useRatingInsureInvestorEndorsementProRataCalculatorQueryOptions(propertyId,effectiveDate,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useRatingPortfolioSummaryRaterHook = () => {
        const ratingPortfolioSummaryRater = useCustomInstance<DomainModelPortfolioSummaryRating>();

        return (
    domainModelPortfolioSummaryRating: DomainModelPortfolioSummaryRating,
 ) => {
        return ratingPortfolioSummaryRater(
          {url: `/api/Rating/PortfolioSummaryRater`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelPortfolioSummaryRating
    },
          );
        }
      }
    


export const useRatingPortfolioSummaryRaterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingPortfolioSummaryRaterHook>>>, TError,{data: DomainModelPortfolioSummaryRating}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingPortfolioSummaryRaterHook>>>, TError,{data: DomainModelPortfolioSummaryRating}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const ratingPortfolioSummaryRater =  useRatingPortfolioSummaryRaterHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useRatingPortfolioSummaryRaterHook>>>, {data: DomainModelPortfolioSummaryRating}> = (props) => {
          const {data} = props ?? {};

          return  ratingPortfolioSummaryRater(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type RatingPortfolioSummaryRaterMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRatingPortfolioSummaryRaterHook>>>>
    export type RatingPortfolioSummaryRaterMutationBody = DomainModelPortfolioSummaryRating
    export type RatingPortfolioSummaryRaterMutationError = unknown

    export const useRatingPortfolioSummaryRater = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingPortfolioSummaryRaterHook>>>, TError,{data: DomainModelPortfolioSummaryRating}, TContext>, }
) => {

      const mutationOptions = useRatingPortfolioSummaryRaterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useRatingPortfolioPremiumRaterHook = () => {
        const ratingPortfolioPremiumRater = useCustomInstance<DomainModelPortfolioRating>();

        return (
    domainModelPortfolioRatingBody: DomainModelPortfolioRatingBody,
 ) => {
        return ratingPortfolioPremiumRater(
          {url: `/api/Rating/PortfolioRater/Premium`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelPortfolioRatingBody
    },
          );
        }
      }
    


export const useRatingPortfolioPremiumRaterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingPortfolioPremiumRaterHook>>>, TError,{data: DomainModelPortfolioRatingBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingPortfolioPremiumRaterHook>>>, TError,{data: DomainModelPortfolioRatingBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const ratingPortfolioPremiumRater =  useRatingPortfolioPremiumRaterHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useRatingPortfolioPremiumRaterHook>>>, {data: DomainModelPortfolioRatingBody}> = (props) => {
          const {data} = props ?? {};

          return  ratingPortfolioPremiumRater(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type RatingPortfolioPremiumRaterMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRatingPortfolioPremiumRaterHook>>>>
    export type RatingPortfolioPremiumRaterMutationBody = DomainModelPortfolioRatingBody
    export type RatingPortfolioPremiumRaterMutationError = unknown

    export const useRatingPortfolioPremiumRater = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingPortfolioPremiumRaterHook>>>, TError,{data: DomainModelPortfolioRatingBody}, TContext>, }
) => {

      const mutationOptions = useRatingPortfolioPremiumRaterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useRatingRatePortfolioSummaryPlanHook = () => {
        const ratingRatePortfolioSummaryPlan = useCustomInstance<DomainModelPortfolioRating[]>();

        return (
    domainModelPortfolioRatingBody: DomainModelPortfolioRatingBody,
 ) => {
        return ratingRatePortfolioSummaryPlan(
          {url: `/api/Rating/PortfolioRater/Plan`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelPortfolioRatingBody
    },
          );
        }
      }
    


export const useRatingRatePortfolioSummaryPlanMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingRatePortfolioSummaryPlanHook>>>, TError,{data: DomainModelPortfolioRatingBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingRatePortfolioSummaryPlanHook>>>, TError,{data: DomainModelPortfolioRatingBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const ratingRatePortfolioSummaryPlan =  useRatingRatePortfolioSummaryPlanHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useRatingRatePortfolioSummaryPlanHook>>>, {data: DomainModelPortfolioRatingBody}> = (props) => {
          const {data} = props ?? {};

          return  ratingRatePortfolioSummaryPlan(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type RatingRatePortfolioSummaryPlanMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRatingRatePortfolioSummaryPlanHook>>>>
    export type RatingRatePortfolioSummaryPlanMutationBody = DomainModelPortfolioRatingBody
    export type RatingRatePortfolioSummaryPlanMutationError = unknown

    export const useRatingRatePortfolioSummaryPlan = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingRatePortfolioSummaryPlanHook>>>, TError,{data: DomainModelPortfolioRatingBody}, TContext>, }
) => {

      const mutationOptions = useRatingRatePortfolioSummaryPlanMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useRatingRateQuotePortfolioSummaryPlanHook = () => {
        const ratingRateQuotePortfolioSummaryPlan = useCustomInstance<DomainModelPortfolioRating[]>();

        return (
    domainModelPortfolioRatingBody: DomainModelPortfolioRatingBody,
 ) => {
        return ratingRateQuotePortfolioSummaryPlan(
          {url: `/api/Rating/PortfolioRater/Plan/Quote`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelPortfolioRatingBody
    },
          );
        }
      }
    


export const useRatingRateQuotePortfolioSummaryPlanMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingRateQuotePortfolioSummaryPlanHook>>>, TError,{data: DomainModelPortfolioRatingBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingRateQuotePortfolioSummaryPlanHook>>>, TError,{data: DomainModelPortfolioRatingBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const ratingRateQuotePortfolioSummaryPlan =  useRatingRateQuotePortfolioSummaryPlanHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useRatingRateQuotePortfolioSummaryPlanHook>>>, {data: DomainModelPortfolioRatingBody}> = (props) => {
          const {data} = props ?? {};

          return  ratingRateQuotePortfolioSummaryPlan(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type RatingRateQuotePortfolioSummaryPlanMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRatingRateQuotePortfolioSummaryPlanHook>>>>
    export type RatingRateQuotePortfolioSummaryPlanMutationBody = DomainModelPortfolioRatingBody
    export type RatingRateQuotePortfolioSummaryPlanMutationError = unknown

    export const useRatingRateQuotePortfolioSummaryPlan = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingRateQuotePortfolioSummaryPlanHook>>>, TError,{data: DomainModelPortfolioRatingBody}, TContext>, }
) => {

      const mutationOptions = useRatingRateQuotePortfolioSummaryPlanMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useRatingGetInsureInvestorsRaterHook = () => {
        const ratingGetInsureInvestorsRater = useCustomInstance<DomainModelInsureInvestorsRating>();

        return (
    domainModelInsureInvestorsRatingBody: DomainModelInsureInvestorsRatingBody,
 ) => {
        return ratingGetInsureInvestorsRater(
          {url: `/api/Rating/InsureInvestorsRater/New`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelInsureInvestorsRatingBody
    },
          );
        }
      }
    


export const useRatingGetInsureInvestorsRaterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingGetInsureInvestorsRaterHook>>>, TError,{data: DomainModelInsureInvestorsRatingBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingGetInsureInvestorsRaterHook>>>, TError,{data: DomainModelInsureInvestorsRatingBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const ratingGetInsureInvestorsRater =  useRatingGetInsureInvestorsRaterHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useRatingGetInsureInvestorsRaterHook>>>, {data: DomainModelInsureInvestorsRatingBody}> = (props) => {
          const {data} = props ?? {};

          return  ratingGetInsureInvestorsRater(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type RatingGetInsureInvestorsRaterMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRatingGetInsureInvestorsRaterHook>>>>
    export type RatingGetInsureInvestorsRaterMutationBody = DomainModelInsureInvestorsRatingBody
    export type RatingGetInsureInvestorsRaterMutationError = unknown

    export const useRatingGetInsureInvestorsRater = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRatingGetInsureInvestorsRaterHook>>>, TError,{data: DomainModelInsureInvestorsRatingBody}, TContext>, }
) => {

      const mutationOptions = useRatingGetInsureInvestorsRaterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useRecurringSubscriptionGetALLHook = () => {
        const recurringSubscriptionGetALL = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelRecurringSubscription>();

        return (
    agentId: number,
    startIndex: number,
    endIndex: number,
    searchFilter: string,
 signal?: AbortSignal
) => {
        return recurringSubscriptionGetALL(
          {url: `/api/RecurringSubscription/GetALL/filters/${agentId}/${startIndex}/${endIndex}/${searchFilter}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getRecurringSubscriptionGetALLQueryKey = (agentId: number,
    startIndex: number,
    endIndex: number,
    searchFilter: string,) => {
    return [`/api/RecurringSubscription/GetALL/filters/${agentId}/${startIndex}/${endIndex}/${searchFilter}`] as const;
    }

    
export const useRecurringSubscriptionGetALLQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetALLHook>>>, TError = unknown>(agentId: number,
    startIndex: number,
    endIndex: number,
    searchFilter: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetALLHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRecurringSubscriptionGetALLQueryKey(agentId,startIndex,endIndex,searchFilter);

  const recurringSubscriptionGetALL =  useRecurringSubscriptionGetALLHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetALLHook>>>> = ({ signal }) => recurringSubscriptionGetALL(agentId,startIndex,endIndex,searchFilter, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(agentId && startIndex && endIndex && searchFilter), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetALLHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type RecurringSubscriptionGetALLQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetALLHook>>>>
export type RecurringSubscriptionGetALLQueryError = unknown

export const useRecurringSubscriptionGetALL = <TData = Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetALLHook>>>, TError = unknown>(
 agentId: number,
    startIndex: number,
    endIndex: number,
    searchFilter: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetALLHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useRecurringSubscriptionGetALLQueryOptions(agentId,startIndex,endIndex,searchFilter,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useRecurringSubscriptionCancelSubscriptionStatusHook = () => {
        const recurringSubscriptionCancelSubscriptionStatus = useCustomInstance<string>();

        return (
    subscriptionId: string,
 signal?: AbortSignal
) => {
        return recurringSubscriptionCancelSubscriptionStatus(
          {url: `/api/RecurringSubscription/CancelSubscriptionStatus/${subscriptionId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getRecurringSubscriptionCancelSubscriptionStatusQueryKey = (subscriptionId: string,) => {
    return [`/api/RecurringSubscription/CancelSubscriptionStatus/${subscriptionId}`] as const;
    }

    
export const useRecurringSubscriptionCancelSubscriptionStatusQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionCancelSubscriptionStatusHook>>>, TError = unknown>(subscriptionId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionCancelSubscriptionStatusHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRecurringSubscriptionCancelSubscriptionStatusQueryKey(subscriptionId);

  const recurringSubscriptionCancelSubscriptionStatus =  useRecurringSubscriptionCancelSubscriptionStatusHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionCancelSubscriptionStatusHook>>>> = ({ signal }) => recurringSubscriptionCancelSubscriptionStatus(subscriptionId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(subscriptionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionCancelSubscriptionStatusHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type RecurringSubscriptionCancelSubscriptionStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionCancelSubscriptionStatusHook>>>>
export type RecurringSubscriptionCancelSubscriptionStatusQueryError = unknown

export const useRecurringSubscriptionCancelSubscriptionStatus = <TData = Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionCancelSubscriptionStatusHook>>>, TError = unknown>(
 subscriptionId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionCancelSubscriptionStatusHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useRecurringSubscriptionCancelSubscriptionStatusQueryOptions(subscriptionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useRecurringSubscriptionGetCreatedSubscriptionStatusHook = () => {
        const recurringSubscriptionGetCreatedSubscriptionStatus = useCustomInstance<string>();

        return (
    subscriptionId: string,
 signal?: AbortSignal
) => {
        return recurringSubscriptionGetCreatedSubscriptionStatus(
          {url: `/api/RecurringSubscription/GetCreatedSubscriptionStatus/${subscriptionId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getRecurringSubscriptionGetCreatedSubscriptionStatusQueryKey = (subscriptionId: string,) => {
    return [`/api/RecurringSubscription/GetCreatedSubscriptionStatus/${subscriptionId}`] as const;
    }

    
export const useRecurringSubscriptionGetCreatedSubscriptionStatusQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetCreatedSubscriptionStatusHook>>>, TError = unknown>(subscriptionId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetCreatedSubscriptionStatusHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRecurringSubscriptionGetCreatedSubscriptionStatusQueryKey(subscriptionId);

  const recurringSubscriptionGetCreatedSubscriptionStatus =  useRecurringSubscriptionGetCreatedSubscriptionStatusHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetCreatedSubscriptionStatusHook>>>> = ({ signal }) => recurringSubscriptionGetCreatedSubscriptionStatus(subscriptionId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(subscriptionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetCreatedSubscriptionStatusHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type RecurringSubscriptionGetCreatedSubscriptionStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetCreatedSubscriptionStatusHook>>>>
export type RecurringSubscriptionGetCreatedSubscriptionStatusQueryError = unknown

export const useRecurringSubscriptionGetCreatedSubscriptionStatus = <TData = Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetCreatedSubscriptionStatusHook>>>, TError = unknown>(
 subscriptionId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetCreatedSubscriptionStatusHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useRecurringSubscriptionGetCreatedSubscriptionStatusQueryOptions(subscriptionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useRecurringSubscriptionEditCreatedSubscriptionByIdHook = () => {
        const recurringSubscriptionEditCreatedSubscriptionById = useCustomInstance<DomainModelRecurringSubscription>();

        return (
    recurringId: number,
 signal?: AbortSignal
) => {
        return recurringSubscriptionEditCreatedSubscriptionById(
          {url: `/api/RecurringSubscription/EditCreatedSubscriptionById/${recurringId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getRecurringSubscriptionEditCreatedSubscriptionByIdQueryKey = (recurringId: number,) => {
    return [`/api/RecurringSubscription/EditCreatedSubscriptionById/${recurringId}`] as const;
    }

    
export const useRecurringSubscriptionEditCreatedSubscriptionByIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionEditCreatedSubscriptionByIdHook>>>, TError = unknown>(recurringId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionEditCreatedSubscriptionByIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRecurringSubscriptionEditCreatedSubscriptionByIdQueryKey(recurringId);

  const recurringSubscriptionEditCreatedSubscriptionById =  useRecurringSubscriptionEditCreatedSubscriptionByIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionEditCreatedSubscriptionByIdHook>>>> = ({ signal }) => recurringSubscriptionEditCreatedSubscriptionById(recurringId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(recurringId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionEditCreatedSubscriptionByIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type RecurringSubscriptionEditCreatedSubscriptionByIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionEditCreatedSubscriptionByIdHook>>>>
export type RecurringSubscriptionEditCreatedSubscriptionByIdQueryError = unknown

export const useRecurringSubscriptionEditCreatedSubscriptionById = <TData = Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionEditCreatedSubscriptionByIdHook>>>, TError = unknown>(
 recurringId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionEditCreatedSubscriptionByIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useRecurringSubscriptionEditCreatedSubscriptionByIdQueryOptions(recurringId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useRecurringSubscriptionUpdatedCreatedSubcriptionHook = () => {
        const recurringSubscriptionUpdatedCreatedSubcription = useCustomInstance<string>();

        return (
    domainModelRecurringSubscriptionBody: DomainModelRecurringSubscriptionBody,
 ) => {
        return recurringSubscriptionUpdatedCreatedSubcription(
          {url: `/api/RecurringSubscription/UpdatedCreatedSubcription`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelRecurringSubscriptionBody
    },
          );
        }
      }
    


export const useRecurringSubscriptionUpdatedCreatedSubcriptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionUpdatedCreatedSubcriptionHook>>>, TError,{data: DomainModelRecurringSubscriptionBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionUpdatedCreatedSubcriptionHook>>>, TError,{data: DomainModelRecurringSubscriptionBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const recurringSubscriptionUpdatedCreatedSubcription =  useRecurringSubscriptionUpdatedCreatedSubcriptionHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionUpdatedCreatedSubcriptionHook>>>, {data: DomainModelRecurringSubscriptionBody}> = (props) => {
          const {data} = props ?? {};

          return  recurringSubscriptionUpdatedCreatedSubcription(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type RecurringSubscriptionUpdatedCreatedSubcriptionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionUpdatedCreatedSubcriptionHook>>>>
    export type RecurringSubscriptionUpdatedCreatedSubcriptionMutationBody = DomainModelRecurringSubscriptionBody
    export type RecurringSubscriptionUpdatedCreatedSubcriptionMutationError = unknown

    export const useRecurringSubscriptionUpdatedCreatedSubcription = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionUpdatedCreatedSubcriptionHook>>>, TError,{data: DomainModelRecurringSubscriptionBody}, TContext>, }
) => {

      const mutationOptions = useRecurringSubscriptionUpdatedCreatedSubcriptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useRecurringSubscriptionUpdatedCreatedSubcriptionBankAccountHook = () => {
        const recurringSubscriptionUpdatedCreatedSubcriptionBankAccount = useCustomInstance<string>();

        return (
    domainModelRecurringSubscriptionBody: DomainModelRecurringSubscriptionBody,
 ) => {
        return recurringSubscriptionUpdatedCreatedSubcriptionBankAccount(
          {url: `/api/RecurringSubscription/UpdatedCreatedSubcriptionBankAccount`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelRecurringSubscriptionBody
    },
          );
        }
      }
    


export const useRecurringSubscriptionUpdatedCreatedSubcriptionBankAccountMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionUpdatedCreatedSubcriptionBankAccountHook>>>, TError,{data: DomainModelRecurringSubscriptionBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionUpdatedCreatedSubcriptionBankAccountHook>>>, TError,{data: DomainModelRecurringSubscriptionBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const recurringSubscriptionUpdatedCreatedSubcriptionBankAccount =  useRecurringSubscriptionUpdatedCreatedSubcriptionBankAccountHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionUpdatedCreatedSubcriptionBankAccountHook>>>, {data: DomainModelRecurringSubscriptionBody}> = (props) => {
          const {data} = props ?? {};

          return  recurringSubscriptionUpdatedCreatedSubcriptionBankAccount(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type RecurringSubscriptionUpdatedCreatedSubcriptionBankAccountMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionUpdatedCreatedSubcriptionBankAccountHook>>>>
    export type RecurringSubscriptionUpdatedCreatedSubcriptionBankAccountMutationBody = DomainModelRecurringSubscriptionBody
    export type RecurringSubscriptionUpdatedCreatedSubcriptionBankAccountMutationError = unknown

    export const useRecurringSubscriptionUpdatedCreatedSubcriptionBankAccount = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionUpdatedCreatedSubcriptionBankAccountHook>>>, TError,{data: DomainModelRecurringSubscriptionBody}, TContext>, }
) => {

      const mutationOptions = useRecurringSubscriptionUpdatedCreatedSubcriptionBankAccountMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useRecurringSubscriptionGetTransactionListALLHook = () => {
        const recurringSubscriptionGetTransactionListALL = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelPaymentProcessTransaction>();

        return (
    recurringId: number,
    customerProfileID: string,
    agentId: number,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return recurringSubscriptionGetTransactionListALL(
          {url: `/api/RecurringSubscription/GetTransactionListALL/${recurringId}/${customerProfileID}/${agentId}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getRecurringSubscriptionGetTransactionListALLQueryKey = (recurringId: number,
    customerProfileID: string,
    agentId: number,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/RecurringSubscription/GetTransactionListALL/${recurringId}/${customerProfileID}/${agentId}/${startIndex}/${endIndex}`] as const;
    }

    
export const useRecurringSubscriptionGetTransactionListALLQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetTransactionListALLHook>>>, TError = unknown>(recurringId: number,
    customerProfileID: string,
    agentId: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetTransactionListALLHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRecurringSubscriptionGetTransactionListALLQueryKey(recurringId,customerProfileID,agentId,startIndex,endIndex);

  const recurringSubscriptionGetTransactionListALL =  useRecurringSubscriptionGetTransactionListALLHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetTransactionListALLHook>>>> = ({ signal }) => recurringSubscriptionGetTransactionListALL(recurringId,customerProfileID,agentId,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(recurringId && customerProfileID && agentId && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetTransactionListALLHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type RecurringSubscriptionGetTransactionListALLQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetTransactionListALLHook>>>>
export type RecurringSubscriptionGetTransactionListALLQueryError = unknown

export const useRecurringSubscriptionGetTransactionListALL = <TData = Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetTransactionListALLHook>>>, TError = unknown>(
 recurringId: number,
    customerProfileID: string,
    agentId: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetTransactionListALLHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useRecurringSubscriptionGetTransactionListALLQueryOptions(recurringId,customerProfileID,agentId,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useRecurringSubscriptionGetAllBatchListHook = () => {
        const recurringSubscriptionGetAllBatchList = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkBatchList>();

        return (
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return recurringSubscriptionGetAllBatchList(
          {url: `/api/RecurringSubscription/GetAllBatchList/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getRecurringSubscriptionGetAllBatchListQueryKey = (startIndex: number,
    endIndex: number,) => {
    return [`/api/RecurringSubscription/GetAllBatchList/${startIndex}/${endIndex}`] as const;
    }

    
export const useRecurringSubscriptionGetAllBatchListQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetAllBatchListHook>>>, TError = unknown>(startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetAllBatchListHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRecurringSubscriptionGetAllBatchListQueryKey(startIndex,endIndex);

  const recurringSubscriptionGetAllBatchList =  useRecurringSubscriptionGetAllBatchListHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetAllBatchListHook>>>> = ({ signal }) => recurringSubscriptionGetAllBatchList(startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetAllBatchListHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type RecurringSubscriptionGetAllBatchListQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetAllBatchListHook>>>>
export type RecurringSubscriptionGetAllBatchListQueryError = unknown

export const useRecurringSubscriptionGetAllBatchList = <TData = Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetAllBatchListHook>>>, TError = unknown>(
 startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetAllBatchListHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useRecurringSubscriptionGetAllBatchListQueryOptions(startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useRecurringSubscriptionGetBatchTransactionListHook = () => {
        const recurringSubscriptionGetBatchTransactionList = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkBatchList>();

        return (
    startIndex: number,
    endIndex: number,
    id: number,
 signal?: AbortSignal
) => {
        return recurringSubscriptionGetBatchTransactionList(
          {url: `/api/RecurringSubscription/GetBatchTransactionList/${startIndex}/${endIndex}/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getRecurringSubscriptionGetBatchTransactionListQueryKey = (startIndex: number,
    endIndex: number,
    id: number,) => {
    return [`/api/RecurringSubscription/GetBatchTransactionList/${startIndex}/${endIndex}/${id}`] as const;
    }

    
export const useRecurringSubscriptionGetBatchTransactionListQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetBatchTransactionListHook>>>, TError = unknown>(startIndex: number,
    endIndex: number,
    id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetBatchTransactionListHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRecurringSubscriptionGetBatchTransactionListQueryKey(startIndex,endIndex,id);

  const recurringSubscriptionGetBatchTransactionList =  useRecurringSubscriptionGetBatchTransactionListHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetBatchTransactionListHook>>>> = ({ signal }) => recurringSubscriptionGetBatchTransactionList(startIndex,endIndex,id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(startIndex && endIndex && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetBatchTransactionListHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type RecurringSubscriptionGetBatchTransactionListQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetBatchTransactionListHook>>>>
export type RecurringSubscriptionGetBatchTransactionListQueryError = unknown

export const useRecurringSubscriptionGetBatchTransactionList = <TData = Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetBatchTransactionListHook>>>, TError = unknown>(
 startIndex: number,
    endIndex: number,
    id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetBatchTransactionListHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useRecurringSubscriptionGetBatchTransactionListQueryOptions(startIndex,endIndex,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useRecurringSubscriptionGetByCustomerHook = () => {
        const recurringSubscriptionGetByCustomer = useCustomInstance<DomainModelRecurringSubscription[]>();

        return (
    customerID: number,
 signal?: AbortSignal
) => {
        return recurringSubscriptionGetByCustomer(
          {url: `/api/RecurringSubscription/GetByCustomer/${customerID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getRecurringSubscriptionGetByCustomerQueryKey = (customerID: number,) => {
    return [`/api/RecurringSubscription/GetByCustomer/${customerID}`] as const;
    }

    
export const useRecurringSubscriptionGetByCustomerQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetByCustomerHook>>>, TError = unknown>(customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetByCustomerHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRecurringSubscriptionGetByCustomerQueryKey(customerID);

  const recurringSubscriptionGetByCustomer =  useRecurringSubscriptionGetByCustomerHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetByCustomerHook>>>> = ({ signal }) => recurringSubscriptionGetByCustomer(customerID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetByCustomerHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type RecurringSubscriptionGetByCustomerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetByCustomerHook>>>>
export type RecurringSubscriptionGetByCustomerQueryError = unknown

export const useRecurringSubscriptionGetByCustomer = <TData = Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetByCustomerHook>>>, TError = unknown>(
 customerID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionGetByCustomerHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useRecurringSubscriptionGetByCustomerQueryOptions(customerID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useRecurringSubscriptionCancelSubcriptionHook = () => {
        const recurringSubscriptionCancelSubcription = useCustomInstance<boolean>();

        return (
    recurringID: number,
 ) => {
        return recurringSubscriptionCancelSubcription(
          {url: `/api/RecurringSubscription/DeleteSubcription/${recurringID}`, method: 'POST'
    },
          );
        }
      }
    


export const useRecurringSubscriptionCancelSubcriptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionCancelSubcriptionHook>>>, TError,{recurringID: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionCancelSubcriptionHook>>>, TError,{recurringID: number}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const recurringSubscriptionCancelSubcription =  useRecurringSubscriptionCancelSubcriptionHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionCancelSubcriptionHook>>>, {recurringID: number}> = (props) => {
          const {recurringID} = props ?? {};

          return  recurringSubscriptionCancelSubcription(recurringID,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type RecurringSubscriptionCancelSubcriptionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionCancelSubcriptionHook>>>>
    
    export type RecurringSubscriptionCancelSubcriptionMutationError = unknown

    export const useRecurringSubscriptionCancelSubcription = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionCancelSubcriptionHook>>>, TError,{recurringID: number}, TContext>, }
) => {

      const mutationOptions = useRecurringSubscriptionCancelSubcriptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary This method is used to send request to connect Quick Book API
 */
export const useRecurringSubscriptionQuickBookConnectHook = () => {
        const recurringSubscriptionQuickBookConnect = useCustomInstance<string>();

        return (
    
 signal?: AbortSignal
) => {
        return recurringSubscriptionQuickBookConnect(
          {url: `/api/RecurringSubscription/QuickBookConnect`, method: 'GET', signal
    },
          );
        }
      }
    

export const getRecurringSubscriptionQuickBookConnectQueryKey = () => {
    return [`/api/RecurringSubscription/QuickBookConnect`] as const;
    }

    
export const useRecurringSubscriptionQuickBookConnectQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionQuickBookConnectHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionQuickBookConnectHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRecurringSubscriptionQuickBookConnectQueryKey();

  const recurringSubscriptionQuickBookConnect =  useRecurringSubscriptionQuickBookConnectHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionQuickBookConnectHook>>>> = ({ signal }) => recurringSubscriptionQuickBookConnect(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionQuickBookConnectHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type RecurringSubscriptionQuickBookConnectQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionQuickBookConnectHook>>>>
export type RecurringSubscriptionQuickBookConnectQueryError = unknown

/**
 * @summary This method is used to send request to connect Quick Book API
 */
export const useRecurringSubscriptionQuickBookConnect = <TData = Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionQuickBookConnectHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRecurringSubscriptionQuickBookConnectHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useRecurringSubscriptionQuickBookConnectQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useReminderGetAllReminderHook = () => {
        const reminderGetAllReminder = useCustomInstance<DomainModelBenchmarkReminder[]>();

        return (
    
 signal?: AbortSignal
) => {
        return reminderGetAllReminder(
          {url: `/api/Reminder/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getReminderGetAllReminderQueryKey = () => {
    return [`/api/Reminder/getAll`] as const;
    }

    
export const useReminderGetAllReminderQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReminderGetAllReminderQueryKey();

  const reminderGetAllReminder =  useReminderGetAllReminderHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderHook>>>> = ({ signal }) => reminderGetAllReminder(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ReminderGetAllReminderQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderHook>>>>
export type ReminderGetAllReminderQueryError = unknown

export const useReminderGetAllReminder = <TData = Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useReminderGetAllReminderQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useReminderGetHook = () => {
        const reminderGet = useCustomInstance<DomainModelBenchmarkReminder>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return reminderGet(
          {url: `/api/Reminder/Get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getReminderGetQueryKey = (id: number,) => {
    return [`/api/Reminder/Get/${id}`] as const;
    }

    
export const useReminderGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReminderGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReminderGetQueryKey(id);

  const reminderGet =  useReminderGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReminderGetHook>>>> = ({ signal }) => reminderGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ReminderGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReminderGetHook>>>>
export type ReminderGetQueryError = unknown

export const useReminderGet = <TData = Awaited<ReturnType<ReturnType<typeof useReminderGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useReminderGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useReminderGetAllReminderByAgentIdHook = () => {
        const reminderGetAllReminderByAgentId = useCustomInstance<DomainModelBenchmarkReminder[]>();

        return (
    agentId: number,
 signal?: AbortSignal
) => {
        return reminderGetAllReminderByAgentId(
          {url: `/api/Reminder/Get/Agent/${agentId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getReminderGetAllReminderByAgentIdQueryKey = (agentId: number,) => {
    return [`/api/Reminder/Get/Agent/${agentId}`] as const;
    }

    
export const useReminderGetAllReminderByAgentIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderByAgentIdHook>>>, TError = unknown>(agentId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderByAgentIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReminderGetAllReminderByAgentIdQueryKey(agentId);

  const reminderGetAllReminderByAgentId =  useReminderGetAllReminderByAgentIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderByAgentIdHook>>>> = ({ signal }) => reminderGetAllReminderByAgentId(agentId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(agentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderByAgentIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ReminderGetAllReminderByAgentIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderByAgentIdHook>>>>
export type ReminderGetAllReminderByAgentIdQueryError = unknown

export const useReminderGetAllReminderByAgentId = <TData = Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderByAgentIdHook>>>, TError = unknown>(
 agentId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderByAgentIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useReminderGetAllReminderByAgentIdQueryOptions(agentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useReminderGetAllReminderByReminderTypeIdHook = () => {
        const reminderGetAllReminderByReminderTypeId = useCustomInstance<DomainModelBenchmarkReminder[]>();

        return (
    reminderTypeId: number,
 signal?: AbortSignal
) => {
        return reminderGetAllReminderByReminderTypeId(
          {url: `/api/Reminder/Get/ReminderType/${reminderTypeId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getReminderGetAllReminderByReminderTypeIdQueryKey = (reminderTypeId: number,) => {
    return [`/api/Reminder/Get/ReminderType/${reminderTypeId}`] as const;
    }

    
export const useReminderGetAllReminderByReminderTypeIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderByReminderTypeIdHook>>>, TError = unknown>(reminderTypeId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderByReminderTypeIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReminderGetAllReminderByReminderTypeIdQueryKey(reminderTypeId);

  const reminderGetAllReminderByReminderTypeId =  useReminderGetAllReminderByReminderTypeIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderByReminderTypeIdHook>>>> = ({ signal }) => reminderGetAllReminderByReminderTypeId(reminderTypeId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(reminderTypeId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderByReminderTypeIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ReminderGetAllReminderByReminderTypeIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderByReminderTypeIdHook>>>>
export type ReminderGetAllReminderByReminderTypeIdQueryError = unknown

export const useReminderGetAllReminderByReminderTypeId = <TData = Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderByReminderTypeIdHook>>>, TError = unknown>(
 reminderTypeId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderByReminderTypeIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useReminderGetAllReminderByReminderTypeIdQueryOptions(reminderTypeId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useReminderGetReminderByCustomerIdHook = () => {
        const reminderGetReminderByCustomerId = useCustomInstance<DomainModelBenchmarkReminder[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return reminderGetReminderByCustomerId(
          {url: `/api/customers/${customerId}/Reminder`, method: 'GET', signal
    },
          );
        }
      }
    

export const getReminderGetReminderByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/Reminder`] as const;
    }

    
export const useReminderGetReminderByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReminderGetReminderByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetReminderByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReminderGetReminderByCustomerIdQueryKey(customerId);

  const reminderGetReminderByCustomerId =  useReminderGetReminderByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReminderGetReminderByCustomerIdHook>>>> = ({ signal }) => reminderGetReminderByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetReminderByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ReminderGetReminderByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReminderGetReminderByCustomerIdHook>>>>
export type ReminderGetReminderByCustomerIdQueryError = unknown

export const useReminderGetReminderByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof useReminderGetReminderByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetReminderByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useReminderGetReminderByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useReminderGetReminderByPropertyIdHook = () => {
        const reminderGetReminderByPropertyId = useCustomInstance<DomainModelBenchmarkReminder[]>();

        return (
    propertyId: number,
 signal?: AbortSignal
) => {
        return reminderGetReminderByPropertyId(
          {url: `/api/Reminder/Get/Property/${propertyId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getReminderGetReminderByPropertyIdQueryKey = (propertyId: number,) => {
    return [`/api/Reminder/Get/Property/${propertyId}`] as const;
    }

    
export const useReminderGetReminderByPropertyIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReminderGetReminderByPropertyIdHook>>>, TError = unknown>(propertyId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetReminderByPropertyIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReminderGetReminderByPropertyIdQueryKey(propertyId);

  const reminderGetReminderByPropertyId =  useReminderGetReminderByPropertyIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReminderGetReminderByPropertyIdHook>>>> = ({ signal }) => reminderGetReminderByPropertyId(propertyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(propertyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetReminderByPropertyIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ReminderGetReminderByPropertyIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReminderGetReminderByPropertyIdHook>>>>
export type ReminderGetReminderByPropertyIdQueryError = unknown

export const useReminderGetReminderByPropertyId = <TData = Awaited<ReturnType<ReturnType<typeof useReminderGetReminderByPropertyIdHook>>>, TError = unknown>(
 propertyId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetReminderByPropertyIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useReminderGetReminderByPropertyIdQueryOptions(propertyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useReminderGetReminderByInvoiceIdHook = () => {
        const reminderGetReminderByInvoiceId = useCustomInstance<DomainModelBenchmarkReminder[]>();

        return (
    invoiceId: number,
 signal?: AbortSignal
) => {
        return reminderGetReminderByInvoiceId(
          {url: `/api/Reminder/Get/Invoice/${invoiceId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getReminderGetReminderByInvoiceIdQueryKey = (invoiceId: number,) => {
    return [`/api/Reminder/Get/Invoice/${invoiceId}`] as const;
    }

    
export const useReminderGetReminderByInvoiceIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReminderGetReminderByInvoiceIdHook>>>, TError = unknown>(invoiceId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetReminderByInvoiceIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReminderGetReminderByInvoiceIdQueryKey(invoiceId);

  const reminderGetReminderByInvoiceId =  useReminderGetReminderByInvoiceIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReminderGetReminderByInvoiceIdHook>>>> = ({ signal }) => reminderGetReminderByInvoiceId(invoiceId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(invoiceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetReminderByInvoiceIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ReminderGetReminderByInvoiceIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReminderGetReminderByInvoiceIdHook>>>>
export type ReminderGetReminderByInvoiceIdQueryError = unknown

export const useReminderGetReminderByInvoiceId = <TData = Awaited<ReturnType<ReturnType<typeof useReminderGetReminderByInvoiceIdHook>>>, TError = unknown>(
 invoiceId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetReminderByInvoiceIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useReminderGetReminderByInvoiceIdQueryOptions(invoiceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useReminderPostReminderHook = () => {
        const reminderPostReminder = useCustomInstance<DomainModelBenchmarkReminder>();

        return (
    domainModelBenchmarkReminderBody: DomainModelBenchmarkReminderBody,
 ) => {
        return reminderPostReminder(
          {url: `/api/Reminder/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkReminderBody
    },
          );
        }
      }
    


export const useReminderPostReminderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReminderPostReminderHook>>>, TError,{data: DomainModelBenchmarkReminderBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReminderPostReminderHook>>>, TError,{data: DomainModelBenchmarkReminderBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const reminderPostReminder =  useReminderPostReminderHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useReminderPostReminderHook>>>, {data: DomainModelBenchmarkReminderBody}> = (props) => {
          const {data} = props ?? {};

          return  reminderPostReminder(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ReminderPostReminderMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReminderPostReminderHook>>>>
    export type ReminderPostReminderMutationBody = DomainModelBenchmarkReminderBody
    export type ReminderPostReminderMutationError = unknown

    export const useReminderPostReminder = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReminderPostReminderHook>>>, TError,{data: DomainModelBenchmarkReminderBody}, TContext>, }
) => {

      const mutationOptions = useReminderPostReminderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useReminderPutReminderHook = () => {
        const reminderPutReminder = useCustomInstance<DomainModelBenchmarkReminder>();

        return (
    domainModelBenchmarkReminderBody: DomainModelBenchmarkReminderBody,
 ) => {
        return reminderPutReminder(
          {url: `/api/Reminder/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkReminderBody
    },
          );
        }
      }
    


export const useReminderPutReminderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReminderPutReminderHook>>>, TError,{data: DomainModelBenchmarkReminderBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReminderPutReminderHook>>>, TError,{data: DomainModelBenchmarkReminderBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const reminderPutReminder =  useReminderPutReminderHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useReminderPutReminderHook>>>, {data: DomainModelBenchmarkReminderBody}> = (props) => {
          const {data} = props ?? {};

          return  reminderPutReminder(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ReminderPutReminderMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReminderPutReminderHook>>>>
    export type ReminderPutReminderMutationBody = DomainModelBenchmarkReminderBody
    export type ReminderPutReminderMutationError = unknown

    export const useReminderPutReminder = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReminderPutReminderHook>>>, TError,{data: DomainModelBenchmarkReminderBody}, TContext>, }
) => {

      const mutationOptions = useReminderPutReminderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useReminderDeleteReminderHook = () => {
        const reminderDeleteReminder = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return reminderDeleteReminder(
          {url: `/api/Reminder/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getReminderDeleteReminderQueryKey = (id: number,) => {
    return [`/api/Reminder/delete/${id}`] as const;
    }

    
export const useReminderDeleteReminderQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReminderDeleteReminderHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderDeleteReminderHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReminderDeleteReminderQueryKey(id);

  const reminderDeleteReminder =  useReminderDeleteReminderHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReminderDeleteReminderHook>>>> = ({ signal }) => reminderDeleteReminder(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderDeleteReminderHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ReminderDeleteReminderQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReminderDeleteReminderHook>>>>
export type ReminderDeleteReminderQueryError = unknown

export const useReminderDeleteReminder = <TData = Awaited<ReturnType<ReturnType<typeof useReminderDeleteReminderHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderDeleteReminderHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useReminderDeleteReminderQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useReminderUpdateReminderHook = () => {
        const reminderUpdateReminder = useCustomInstance<DomainModelBenchmarkReminder[]>();

        return (
    domainModelBenchmarkReminder: DomainModelBenchmarkReminder[],
 ) => {
        return reminderUpdateReminder(
          {url: `/api/Reminder/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkReminder
    },
          );
        }
      }
    


export const useReminderUpdateReminderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReminderUpdateReminderHook>>>, TError,{data: DomainModelBenchmarkReminder[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReminderUpdateReminderHook>>>, TError,{data: DomainModelBenchmarkReminder[]}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const reminderUpdateReminder =  useReminderUpdateReminderHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useReminderUpdateReminderHook>>>, {data: DomainModelBenchmarkReminder[]}> = (props) => {
          const {data} = props ?? {};

          return  reminderUpdateReminder(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ReminderUpdateReminderMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReminderUpdateReminderHook>>>>
    export type ReminderUpdateReminderMutationBody = DomainModelBenchmarkReminder[]
    export type ReminderUpdateReminderMutationError = unknown

    export const useReminderUpdateReminder = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReminderUpdateReminderHook>>>, TError,{data: DomainModelBenchmarkReminder[]}, TContext>, }
) => {

      const mutationOptions = useReminderUpdateReminderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useReminderGetAllReminderWithFiltersHook = () => {
        const reminderGetAllReminderWithFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkReminder>();

        return (
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return reminderGetAllReminderWithFilters(
          {url: `/api/Reminder/GetAllReminderWithFilters/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getReminderGetAllReminderWithFiltersQueryKey = (startIndex: number,
    endIndex: number,) => {
    return [`/api/Reminder/GetAllReminderWithFilters/${startIndex}/${endIndex}`] as const;
    }

    
export const useReminderGetAllReminderWithFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderWithFiltersHook>>>, TError = unknown>(startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderWithFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReminderGetAllReminderWithFiltersQueryKey(startIndex,endIndex);

  const reminderGetAllReminderWithFilters =  useReminderGetAllReminderWithFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderWithFiltersHook>>>> = ({ signal }) => reminderGetAllReminderWithFilters(startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderWithFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ReminderGetAllReminderWithFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderWithFiltersHook>>>>
export type ReminderGetAllReminderWithFiltersQueryError = unknown

export const useReminderGetAllReminderWithFilters = <TData = Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderWithFiltersHook>>>, TError = unknown>(
 startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReminderGetAllReminderWithFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useReminderGetAllReminderWithFiltersQueryOptions(startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useRolesGetAllHook = () => {
        const rolesGetAll = useCustomInstance<DomainModelBenchmarkRoles[]>();

        return (
    
 signal?: AbortSignal
) => {
        return rolesGetAll(
          {url: `/api/BenchmarkUsersRoles/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getRolesGetAllQueryKey = () => {
    return [`/api/BenchmarkUsersRoles/getAll`] as const;
    }

    
export const useRolesGetAllQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useRolesGetAllHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRolesGetAllHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRolesGetAllQueryKey();

  const rolesGetAll =  useRolesGetAllHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useRolesGetAllHook>>>> = ({ signal }) => rolesGetAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRolesGetAllHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type RolesGetAllQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRolesGetAllHook>>>>
export type RolesGetAllQueryError = unknown

export const useRolesGetAll = <TData = Awaited<ReturnType<ReturnType<typeof useRolesGetAllHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRolesGetAllHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useRolesGetAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useSamplesGetAllSamplesByNameHook = () => {
        const samplesGetAllSamplesByName = useCustomInstance<DomainModelSamplePresenter[]>();

        return (
    name: string,
 signal?: AbortSignal
) => {
        return samplesGetAllSamplesByName(
          {url: `/api/samples/${name}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getSamplesGetAllSamplesByNameQueryKey = (name: string,) => {
    return [`/api/samples/${name}`] as const;
    }

    
export const useSamplesGetAllSamplesByNameQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useSamplesGetAllSamplesByNameHook>>>, TError = unknown>(name: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllSamplesByNameHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSamplesGetAllSamplesByNameQueryKey(name);

  const samplesGetAllSamplesByName =  useSamplesGetAllSamplesByNameHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllSamplesByNameHook>>>> = ({ signal }) => samplesGetAllSamplesByName(name, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllSamplesByNameHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type SamplesGetAllSamplesByNameQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllSamplesByNameHook>>>>
export type SamplesGetAllSamplesByNameQueryError = unknown

export const useSamplesGetAllSamplesByName = <TData = Awaited<ReturnType<ReturnType<typeof useSamplesGetAllSamplesByNameHook>>>, TError = unknown>(
 name: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllSamplesByNameHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useSamplesGetAllSamplesByNameQueryOptions(name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useSamplesGetAllStatusesHook = () => {
        const samplesGetAllStatuses = useCustomInstance<DomainModelSampleStatus[]>();

        return (
    
 signal?: AbortSignal
) => {
        return samplesGetAllStatuses(
          {url: `/api/samples/statuses`, method: 'GET', signal
    },
          );
        }
      }
    

export const getSamplesGetAllStatusesQueryKey = () => {
    return [`/api/samples/statuses`] as const;
    }

    
export const useSamplesGetAllStatusesQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useSamplesGetAllStatusesHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllStatusesHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSamplesGetAllStatusesQueryKey();

  const samplesGetAllStatuses =  useSamplesGetAllStatusesHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllStatusesHook>>>> = ({ signal }) => samplesGetAllStatuses(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllStatusesHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type SamplesGetAllStatusesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllStatusesHook>>>>
export type SamplesGetAllStatusesQueryError = unknown

export const useSamplesGetAllStatuses = <TData = Awaited<ReturnType<ReturnType<typeof useSamplesGetAllStatusesHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllStatusesHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useSamplesGetAllStatusesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useSamplesGetAllUsersHook = () => {
        const samplesGetAllUsers = useCustomInstance<DomainModelUser[]>();

        return (
    
 signal?: AbortSignal
) => {
        return samplesGetAllUsers(
          {url: `/api/samples/users`, method: 'GET', signal
    },
          );
        }
      }
    

export const getSamplesGetAllUsersQueryKey = () => {
    return [`/api/samples/users`] as const;
    }

    
export const useSamplesGetAllUsersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useSamplesGetAllUsersHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllUsersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSamplesGetAllUsersQueryKey();

  const samplesGetAllUsers =  useSamplesGetAllUsersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllUsersHook>>>> = ({ signal }) => samplesGetAllUsers(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllUsersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type SamplesGetAllUsersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllUsersHook>>>>
export type SamplesGetAllUsersQueryError = unknown

export const useSamplesGetAllUsers = <TData = Awaited<ReturnType<ReturnType<typeof useSamplesGetAllUsersHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllUsersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useSamplesGetAllUsersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useSamplesGetAllSamplesByStatusHook = () => {
        const samplesGetAllSamplesByStatus = useCustomInstance<DomainModelSamplePresenter[]>();

        return (
    statusId: number,
 signal?: AbortSignal
) => {
        return samplesGetAllSamplesByStatus(
          {url: `/api/statuses/${statusId}/samples`, method: 'GET', signal
    },
          );
        }
      }
    

export const getSamplesGetAllSamplesByStatusQueryKey = (statusId: number,) => {
    return [`/api/statuses/${statusId}/samples`] as const;
    }

    
export const useSamplesGetAllSamplesByStatusQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useSamplesGetAllSamplesByStatusHook>>>, TError = unknown>(statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllSamplesByStatusHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSamplesGetAllSamplesByStatusQueryKey(statusId);

  const samplesGetAllSamplesByStatus =  useSamplesGetAllSamplesByStatusHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllSamplesByStatusHook>>>> = ({ signal }) => samplesGetAllSamplesByStatus(statusId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(statusId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllSamplesByStatusHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type SamplesGetAllSamplesByStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllSamplesByStatusHook>>>>
export type SamplesGetAllSamplesByStatusQueryError = unknown

export const useSamplesGetAllSamplesByStatus = <TData = Awaited<ReturnType<ReturnType<typeof useSamplesGetAllSamplesByStatusHook>>>, TError = unknown>(
 statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllSamplesByStatusHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useSamplesGetAllSamplesByStatusQueryOptions(statusId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useSamplesRateSampleHook = () => {
        const samplesRateSample = useCustomInstance<SamplesRateSample200OneItem[] | SamplesRateSample200TwoItem[] | SamplesRateSample200ThreeItem[] | SamplesRateSample200FourItem[]>();

        return (
    domainModelSamplePresenterBody: DomainModelSamplePresenterBody,
 ) => {
        return samplesRateSample(
          {url: `/api/samples/rate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelSamplePresenterBody
    },
          );
        }
      }
    


export const useSamplesRateSampleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useSamplesRateSampleHook>>>, TError,{data: DomainModelSamplePresenterBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useSamplesRateSampleHook>>>, TError,{data: DomainModelSamplePresenterBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const samplesRateSample =  useSamplesRateSampleHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useSamplesRateSampleHook>>>, {data: DomainModelSamplePresenterBody}> = (props) => {
          const {data} = props ?? {};

          return  samplesRateSample(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type SamplesRateSampleMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useSamplesRateSampleHook>>>>
    export type SamplesRateSampleMutationBody = DomainModelSamplePresenterBody
    export type SamplesRateSampleMutationError = unknown

    export const useSamplesRateSample = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useSamplesRateSampleHook>>>, TError,{data: DomainModelSamplePresenterBody}, TContext>, }
) => {

      const mutationOptions = useSamplesRateSampleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useSamplesGetAllSamplesHook = () => {
        const samplesGetAllSamples = useCustomInstance<DomainModelSamplePresenter[]>();

        return (
    
 signal?: AbortSignal
) => {
        return samplesGetAllSamples(
          {url: `/api/Samples`, method: 'GET', signal
    },
          );
        }
      }
    

export const getSamplesGetAllSamplesQueryKey = () => {
    return [`/api/Samples`] as const;
    }

    
export const useSamplesGetAllSamplesQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useSamplesGetAllSamplesHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllSamplesHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSamplesGetAllSamplesQueryKey();

  const samplesGetAllSamples =  useSamplesGetAllSamplesHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllSamplesHook>>>> = ({ signal }) => samplesGetAllSamples(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllSamplesHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type SamplesGetAllSamplesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllSamplesHook>>>>
export type SamplesGetAllSamplesQueryError = unknown

export const useSamplesGetAllSamples = <TData = Awaited<ReturnType<ReturnType<typeof useSamplesGetAllSamplesHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSamplesGetAllSamplesHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useSamplesGetAllSamplesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useSamplesPutSampleHook = () => {
        const samplesPutSample = useCustomInstance<SamplesPutSample200OneItem[] | SamplesPutSample200TwoItem[] | SamplesPutSample200ThreeItem[] | SamplesPutSample200FourItem[]>();

        return (
    domainModelSamplePresenterBody: DomainModelSamplePresenterBody,
 ) => {
        return samplesPutSample(
          {url: `/api/Samples`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: domainModelSamplePresenterBody
    },
          );
        }
      }
    


export const useSamplesPutSampleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useSamplesPutSampleHook>>>, TError,{data: DomainModelSamplePresenterBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useSamplesPutSampleHook>>>, TError,{data: DomainModelSamplePresenterBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const samplesPutSample =  useSamplesPutSampleHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useSamplesPutSampleHook>>>, {data: DomainModelSamplePresenterBody}> = (props) => {
          const {data} = props ?? {};

          return  samplesPutSample(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type SamplesPutSampleMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useSamplesPutSampleHook>>>>
    export type SamplesPutSampleMutationBody = DomainModelSamplePresenterBody
    export type SamplesPutSampleMutationError = unknown

    export const useSamplesPutSample = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useSamplesPutSampleHook>>>, TError,{data: DomainModelSamplePresenterBody}, TContext>, }
) => {

      const mutationOptions = useSamplesPutSampleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useSamplesPostSampleHook = () => {
        const samplesPostSample = useCustomInstance<SamplesPostSample200One | SamplesPostSample200Two | SamplesPostSample200Three | SamplesPostSample200Four>();

        return (
    domainModelSamplePresenterBody: DomainModelSamplePresenterBody,
 ) => {
        return samplesPostSample(
          {url: `/api/Samples`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelSamplePresenterBody
    },
          );
        }
      }
    


export const useSamplesPostSampleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useSamplesPostSampleHook>>>, TError,{data: DomainModelSamplePresenterBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useSamplesPostSampleHook>>>, TError,{data: DomainModelSamplePresenterBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const samplesPostSample =  useSamplesPostSampleHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useSamplesPostSampleHook>>>, {data: DomainModelSamplePresenterBody}> = (props) => {
          const {data} = props ?? {};

          return  samplesPostSample(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type SamplesPostSampleMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useSamplesPostSampleHook>>>>
    export type SamplesPostSampleMutationBody = DomainModelSamplePresenterBody
    export type SamplesPostSampleMutationError = unknown

    export const useSamplesPostSample = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useSamplesPostSampleHook>>>, TError,{data: DomainModelSamplePresenterBody}, TContext>, }
) => {

      const mutationOptions = useSamplesPostSampleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useSamplesDeleteSampleHook = () => {
        const samplesDeleteSample = useCustomInstance<boolean>();

        return (
    id: number,
 ) => {
        return samplesDeleteSample(
          {url: `/api/Samples/${id}`, method: 'DELETE'
    },
          );
        }
      }
    


export const useSamplesDeleteSampleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useSamplesDeleteSampleHook>>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useSamplesDeleteSampleHook>>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const samplesDeleteSample =  useSamplesDeleteSampleHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useSamplesDeleteSampleHook>>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  samplesDeleteSample(id,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type SamplesDeleteSampleMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useSamplesDeleteSampleHook>>>>
    
    export type SamplesDeleteSampleMutationError = unknown

    export const useSamplesDeleteSample = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useSamplesDeleteSampleHook>>>, TError,{id: number}, TContext>, }
) => {

      const mutationOptions = useSamplesDeleteSampleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useTaskGetAllTaskHook = () => {
        const taskGetAllTask = useCustomInstance<DomainModelBenchmarkTask[]>();

        return (
    
 signal?: AbortSignal
) => {
        return taskGetAllTask(
          {url: `/api/Task/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getTaskGetAllTaskQueryKey = () => {
    return [`/api/Task/getAll`] as const;
    }

    
export const useTaskGetAllTaskQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useTaskGetAllTaskHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskGetAllTaskHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTaskGetAllTaskQueryKey();

  const taskGetAllTask =  useTaskGetAllTaskHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useTaskGetAllTaskHook>>>> = ({ signal }) => taskGetAllTask(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskGetAllTaskHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type TaskGetAllTaskQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTaskGetAllTaskHook>>>>
export type TaskGetAllTaskQueryError = unknown

export const useTaskGetAllTask = <TData = Awaited<ReturnType<ReturnType<typeof useTaskGetAllTaskHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskGetAllTaskHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useTaskGetAllTaskQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useTaskGetHook = () => {
        const taskGet = useCustomInstance<DomainModelBenchmarkTask>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return taskGet(
          {url: `/api/Task/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getTaskGetQueryKey = (id: number,) => {
    return [`/api/Task/get/${id}`] as const;
    }

    
export const useTaskGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useTaskGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTaskGetQueryKey(id);

  const taskGet =  useTaskGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useTaskGetHook>>>> = ({ signal }) => taskGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type TaskGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTaskGetHook>>>>
export type TaskGetQueryError = unknown

export const useTaskGet = <TData = Awaited<ReturnType<ReturnType<typeof useTaskGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useTaskGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useTaskPostTaskHook = () => {
        const taskPostTask = useCustomInstance<DomainModelBenchmarkTask>();

        return (
    domainModelBenchmarkTaskBody: DomainModelBenchmarkTaskBody,
 ) => {
        return taskPostTask(
          {url: `/api/Task/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkTaskBody
    },
          );
        }
      }
    


export const useTaskPostTaskMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTaskPostTaskHook>>>, TError,{data: DomainModelBenchmarkTaskBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTaskPostTaskHook>>>, TError,{data: DomainModelBenchmarkTaskBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const taskPostTask =  useTaskPostTaskHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useTaskPostTaskHook>>>, {data: DomainModelBenchmarkTaskBody}> = (props) => {
          const {data} = props ?? {};

          return  taskPostTask(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type TaskPostTaskMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTaskPostTaskHook>>>>
    export type TaskPostTaskMutationBody = DomainModelBenchmarkTaskBody
    export type TaskPostTaskMutationError = unknown

    export const useTaskPostTask = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTaskPostTaskHook>>>, TError,{data: DomainModelBenchmarkTaskBody}, TContext>, }
) => {

      const mutationOptions = useTaskPostTaskMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useTaskPutTaskHook = () => {
        const taskPutTask = useCustomInstance<DomainModelBenchmarkTask>();

        return (
    domainModelBenchmarkTaskBody: DomainModelBenchmarkTaskBody,
 ) => {
        return taskPutTask(
          {url: `/api/Task/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkTaskBody
    },
          );
        }
      }
    


export const useTaskPutTaskMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTaskPutTaskHook>>>, TError,{data: DomainModelBenchmarkTaskBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTaskPutTaskHook>>>, TError,{data: DomainModelBenchmarkTaskBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const taskPutTask =  useTaskPutTaskHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useTaskPutTaskHook>>>, {data: DomainModelBenchmarkTaskBody}> = (props) => {
          const {data} = props ?? {};

          return  taskPutTask(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type TaskPutTaskMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTaskPutTaskHook>>>>
    export type TaskPutTaskMutationBody = DomainModelBenchmarkTaskBody
    export type TaskPutTaskMutationError = unknown

    export const useTaskPutTask = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTaskPutTaskHook>>>, TError,{data: DomainModelBenchmarkTaskBody}, TContext>, }
) => {

      const mutationOptions = useTaskPutTaskMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useTaskDeleteTaskHook = () => {
        const taskDeleteTask = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return taskDeleteTask(
          {url: `/api/Task/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getTaskDeleteTaskQueryKey = (id: number,) => {
    return [`/api/Task/delete/${id}`] as const;
    }

    
export const useTaskDeleteTaskQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useTaskDeleteTaskHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskDeleteTaskHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTaskDeleteTaskQueryKey(id);

  const taskDeleteTask =  useTaskDeleteTaskHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useTaskDeleteTaskHook>>>> = ({ signal }) => taskDeleteTask(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskDeleteTaskHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type TaskDeleteTaskQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTaskDeleteTaskHook>>>>
export type TaskDeleteTaskQueryError = unknown

export const useTaskDeleteTask = <TData = Awaited<ReturnType<ReturnType<typeof useTaskDeleteTaskHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskDeleteTaskHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useTaskDeleteTaskQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useTaskGetAllTaskByFiltersHook = () => {
        const taskGetAllTaskByFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkTask>();

        return (
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return taskGetAllTaskByFilters(
          {url: `/api/Task/GetAllTaskByFilters/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getTaskGetAllTaskByFiltersQueryKey = (startIndex: number,
    endIndex: number,) => {
    return [`/api/Task/GetAllTaskByFilters/${startIndex}/${endIndex}`] as const;
    }

    
export const useTaskGetAllTaskByFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useTaskGetAllTaskByFiltersHook>>>, TError = unknown>(startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskGetAllTaskByFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTaskGetAllTaskByFiltersQueryKey(startIndex,endIndex);

  const taskGetAllTaskByFilters =  useTaskGetAllTaskByFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useTaskGetAllTaskByFiltersHook>>>> = ({ signal }) => taskGetAllTaskByFilters(startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskGetAllTaskByFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type TaskGetAllTaskByFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTaskGetAllTaskByFiltersHook>>>>
export type TaskGetAllTaskByFiltersQueryError = unknown

export const useTaskGetAllTaskByFilters = <TData = Awaited<ReturnType<ReturnType<typeof useTaskGetAllTaskByFiltersHook>>>, TError = unknown>(
 startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskGetAllTaskByFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useTaskGetAllTaskByFiltersQueryOptions(startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useTaskAssignmentGetAllTaskAssignmentHook = () => {
        const taskAssignmentGetAllTaskAssignment = useCustomInstance<DomainModelBenchmarkTaskAssignment[]>();

        return (
    
 signal?: AbortSignal
) => {
        return taskAssignmentGetAllTaskAssignment(
          {url: `/api/TaskAssignment/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getTaskAssignmentGetAllTaskAssignmentQueryKey = () => {
    return [`/api/TaskAssignment/getAll`] as const;
    }

    
export const useTaskAssignmentGetAllTaskAssignmentQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useTaskAssignmentGetAllTaskAssignmentHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentGetAllTaskAssignmentHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTaskAssignmentGetAllTaskAssignmentQueryKey();

  const taskAssignmentGetAllTaskAssignment =  useTaskAssignmentGetAllTaskAssignmentHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentGetAllTaskAssignmentHook>>>> = ({ signal }) => taskAssignmentGetAllTaskAssignment(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentGetAllTaskAssignmentHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type TaskAssignmentGetAllTaskAssignmentQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentGetAllTaskAssignmentHook>>>>
export type TaskAssignmentGetAllTaskAssignmentQueryError = unknown

export const useTaskAssignmentGetAllTaskAssignment = <TData = Awaited<ReturnType<ReturnType<typeof useTaskAssignmentGetAllTaskAssignmentHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentGetAllTaskAssignmentHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useTaskAssignmentGetAllTaskAssignmentQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useTaskAssignmentGetHook = () => {
        const taskAssignmentGet = useCustomInstance<DomainModelBenchmarkTaskAssignment>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return taskAssignmentGet(
          {url: `/api/TaskAssignment/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getTaskAssignmentGetQueryKey = (id: number,) => {
    return [`/api/TaskAssignment/get/${id}`] as const;
    }

    
export const useTaskAssignmentGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useTaskAssignmentGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTaskAssignmentGetQueryKey(id);

  const taskAssignmentGet =  useTaskAssignmentGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentGetHook>>>> = ({ signal }) => taskAssignmentGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type TaskAssignmentGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentGetHook>>>>
export type TaskAssignmentGetQueryError = unknown

export const useTaskAssignmentGet = <TData = Awaited<ReturnType<ReturnType<typeof useTaskAssignmentGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useTaskAssignmentGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useTaskAssignmentPostTaskAssignmentHook = () => {
        const taskAssignmentPostTaskAssignment = useCustomInstance<DomainModelBenchmarkTaskAssignment>();

        return (
    domainModelBenchmarkTaskAssignmentBody: DomainModelBenchmarkTaskAssignmentBody,
 ) => {
        return taskAssignmentPostTaskAssignment(
          {url: `/api/TaskAssignment/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkTaskAssignmentBody
    },
          );
        }
      }
    


export const useTaskAssignmentPostTaskAssignmentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentPostTaskAssignmentHook>>>, TError,{data: DomainModelBenchmarkTaskAssignmentBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentPostTaskAssignmentHook>>>, TError,{data: DomainModelBenchmarkTaskAssignmentBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const taskAssignmentPostTaskAssignment =  useTaskAssignmentPostTaskAssignmentHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentPostTaskAssignmentHook>>>, {data: DomainModelBenchmarkTaskAssignmentBody}> = (props) => {
          const {data} = props ?? {};

          return  taskAssignmentPostTaskAssignment(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type TaskAssignmentPostTaskAssignmentMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentPostTaskAssignmentHook>>>>
    export type TaskAssignmentPostTaskAssignmentMutationBody = DomainModelBenchmarkTaskAssignmentBody
    export type TaskAssignmentPostTaskAssignmentMutationError = unknown

    export const useTaskAssignmentPostTaskAssignment = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentPostTaskAssignmentHook>>>, TError,{data: DomainModelBenchmarkTaskAssignmentBody}, TContext>, }
) => {

      const mutationOptions = useTaskAssignmentPostTaskAssignmentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useTaskAssignmentPutTaskAssignmentHook = () => {
        const taskAssignmentPutTaskAssignment = useCustomInstance<DomainModelBenchmarkTaskAssignment>();

        return (
    domainModelBenchmarkTaskAssignmentBody: DomainModelBenchmarkTaskAssignmentBody,
 ) => {
        return taskAssignmentPutTaskAssignment(
          {url: `/api/TaskAssignment/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkTaskAssignmentBody
    },
          );
        }
      }
    


export const useTaskAssignmentPutTaskAssignmentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentPutTaskAssignmentHook>>>, TError,{data: DomainModelBenchmarkTaskAssignmentBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentPutTaskAssignmentHook>>>, TError,{data: DomainModelBenchmarkTaskAssignmentBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const taskAssignmentPutTaskAssignment =  useTaskAssignmentPutTaskAssignmentHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentPutTaskAssignmentHook>>>, {data: DomainModelBenchmarkTaskAssignmentBody}> = (props) => {
          const {data} = props ?? {};

          return  taskAssignmentPutTaskAssignment(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type TaskAssignmentPutTaskAssignmentMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentPutTaskAssignmentHook>>>>
    export type TaskAssignmentPutTaskAssignmentMutationBody = DomainModelBenchmarkTaskAssignmentBody
    export type TaskAssignmentPutTaskAssignmentMutationError = unknown

    export const useTaskAssignmentPutTaskAssignment = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentPutTaskAssignmentHook>>>, TError,{data: DomainModelBenchmarkTaskAssignmentBody}, TContext>, }
) => {

      const mutationOptions = useTaskAssignmentPutTaskAssignmentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useTaskAssignmentDeleteTaskAssignmentHook = () => {
        const taskAssignmentDeleteTaskAssignment = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return taskAssignmentDeleteTaskAssignment(
          {url: `/api/TaskAssignment/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getTaskAssignmentDeleteTaskAssignmentQueryKey = (id: number,) => {
    return [`/api/TaskAssignment/delete/${id}`] as const;
    }

    
export const useTaskAssignmentDeleteTaskAssignmentQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useTaskAssignmentDeleteTaskAssignmentHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentDeleteTaskAssignmentHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTaskAssignmentDeleteTaskAssignmentQueryKey(id);

  const taskAssignmentDeleteTaskAssignment =  useTaskAssignmentDeleteTaskAssignmentHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentDeleteTaskAssignmentHook>>>> = ({ signal }) => taskAssignmentDeleteTaskAssignment(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentDeleteTaskAssignmentHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type TaskAssignmentDeleteTaskAssignmentQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentDeleteTaskAssignmentHook>>>>
export type TaskAssignmentDeleteTaskAssignmentQueryError = unknown

export const useTaskAssignmentDeleteTaskAssignment = <TData = Awaited<ReturnType<ReturnType<typeof useTaskAssignmentDeleteTaskAssignmentHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentDeleteTaskAssignmentHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useTaskAssignmentDeleteTaskAssignmentQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useTaskAssignmentGetAllTaskAssignmentByFiltersHook = () => {
        const taskAssignmentGetAllTaskAssignmentByFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkTaskAssignment>();

        return (
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return taskAssignmentGetAllTaskAssignmentByFilters(
          {url: `/api/TaskAssignment/GetAllTaskAssignmentByFilters/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getTaskAssignmentGetAllTaskAssignmentByFiltersQueryKey = (startIndex: number,
    endIndex: number,) => {
    return [`/api/TaskAssignment/GetAllTaskAssignmentByFilters/${startIndex}/${endIndex}`] as const;
    }

    
export const useTaskAssignmentGetAllTaskAssignmentByFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useTaskAssignmentGetAllTaskAssignmentByFiltersHook>>>, TError = unknown>(startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentGetAllTaskAssignmentByFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTaskAssignmentGetAllTaskAssignmentByFiltersQueryKey(startIndex,endIndex);

  const taskAssignmentGetAllTaskAssignmentByFilters =  useTaskAssignmentGetAllTaskAssignmentByFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentGetAllTaskAssignmentByFiltersHook>>>> = ({ signal }) => taskAssignmentGetAllTaskAssignmentByFilters(startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentGetAllTaskAssignmentByFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type TaskAssignmentGetAllTaskAssignmentByFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentGetAllTaskAssignmentByFiltersHook>>>>
export type TaskAssignmentGetAllTaskAssignmentByFiltersQueryError = unknown

export const useTaskAssignmentGetAllTaskAssignmentByFilters = <TData = Awaited<ReturnType<ReturnType<typeof useTaskAssignmentGetAllTaskAssignmentByFiltersHook>>>, TError = unknown>(
 startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentGetAllTaskAssignmentByFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useTaskAssignmentGetAllTaskAssignmentByFiltersQueryOptions(startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useTaskAssignmentNoteGetAllTaskAssignmentNoteHook = () => {
        const taskAssignmentNoteGetAllTaskAssignmentNote = useCustomInstance<DomainModelBenchmarkTaskAssignmentNote[]>();

        return (
    
 signal?: AbortSignal
) => {
        return taskAssignmentNoteGetAllTaskAssignmentNote(
          {url: `/api/TaskAssignmentNote/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getTaskAssignmentNoteGetAllTaskAssignmentNoteQueryKey = () => {
    return [`/api/TaskAssignmentNote/getAll`] as const;
    }

    
export const useTaskAssignmentNoteGetAllTaskAssignmentNoteQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteGetAllTaskAssignmentNoteHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteGetAllTaskAssignmentNoteHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTaskAssignmentNoteGetAllTaskAssignmentNoteQueryKey();

  const taskAssignmentNoteGetAllTaskAssignmentNote =  useTaskAssignmentNoteGetAllTaskAssignmentNoteHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteGetAllTaskAssignmentNoteHook>>>> = ({ signal }) => taskAssignmentNoteGetAllTaskAssignmentNote(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteGetAllTaskAssignmentNoteHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type TaskAssignmentNoteGetAllTaskAssignmentNoteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteGetAllTaskAssignmentNoteHook>>>>
export type TaskAssignmentNoteGetAllTaskAssignmentNoteQueryError = unknown

export const useTaskAssignmentNoteGetAllTaskAssignmentNote = <TData = Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteGetAllTaskAssignmentNoteHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteGetAllTaskAssignmentNoteHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useTaskAssignmentNoteGetAllTaskAssignmentNoteQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useTaskAssignmentNoteGetHook = () => {
        const taskAssignmentNoteGet = useCustomInstance<DomainModelBenchmarkTaskAssignmentNote>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return taskAssignmentNoteGet(
          {url: `/api/TaskAssignmentNote/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getTaskAssignmentNoteGetQueryKey = (id: number,) => {
    return [`/api/TaskAssignmentNote/get/${id}`] as const;
    }

    
export const useTaskAssignmentNoteGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTaskAssignmentNoteGetQueryKey(id);

  const taskAssignmentNoteGet =  useTaskAssignmentNoteGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteGetHook>>>> = ({ signal }) => taskAssignmentNoteGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type TaskAssignmentNoteGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteGetHook>>>>
export type TaskAssignmentNoteGetQueryError = unknown

export const useTaskAssignmentNoteGet = <TData = Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useTaskAssignmentNoteGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useTaskAssignmentNotePostTaskAssignmentNoteHook = () => {
        const taskAssignmentNotePostTaskAssignmentNote = useCustomInstance<DomainModelBenchmarkTaskAssignmentNote>();

        return (
    domainModelBenchmarkTaskAssignmentNoteBody: DomainModelBenchmarkTaskAssignmentNoteBody,
 ) => {
        return taskAssignmentNotePostTaskAssignmentNote(
          {url: `/api/TaskAssignmentNote/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkTaskAssignmentNoteBody
    },
          );
        }
      }
    


export const useTaskAssignmentNotePostTaskAssignmentNoteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNotePostTaskAssignmentNoteHook>>>, TError,{data: DomainModelBenchmarkTaskAssignmentNoteBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNotePostTaskAssignmentNoteHook>>>, TError,{data: DomainModelBenchmarkTaskAssignmentNoteBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const taskAssignmentNotePostTaskAssignmentNote =  useTaskAssignmentNotePostTaskAssignmentNoteHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNotePostTaskAssignmentNoteHook>>>, {data: DomainModelBenchmarkTaskAssignmentNoteBody}> = (props) => {
          const {data} = props ?? {};

          return  taskAssignmentNotePostTaskAssignmentNote(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type TaskAssignmentNotePostTaskAssignmentNoteMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNotePostTaskAssignmentNoteHook>>>>
    export type TaskAssignmentNotePostTaskAssignmentNoteMutationBody = DomainModelBenchmarkTaskAssignmentNoteBody
    export type TaskAssignmentNotePostTaskAssignmentNoteMutationError = unknown

    export const useTaskAssignmentNotePostTaskAssignmentNote = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNotePostTaskAssignmentNoteHook>>>, TError,{data: DomainModelBenchmarkTaskAssignmentNoteBody}, TContext>, }
) => {

      const mutationOptions = useTaskAssignmentNotePostTaskAssignmentNoteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useTaskAssignmentNotePutTaskAssignmentNoteHook = () => {
        const taskAssignmentNotePutTaskAssignmentNote = useCustomInstance<DomainModelBenchmarkTaskAssignmentNote>();

        return (
    domainModelBenchmarkTaskAssignmentNoteBody: DomainModelBenchmarkTaskAssignmentNoteBody,
 ) => {
        return taskAssignmentNotePutTaskAssignmentNote(
          {url: `/api/TaskAssignmentNote/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkTaskAssignmentNoteBody
    },
          );
        }
      }
    


export const useTaskAssignmentNotePutTaskAssignmentNoteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNotePutTaskAssignmentNoteHook>>>, TError,{data: DomainModelBenchmarkTaskAssignmentNoteBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNotePutTaskAssignmentNoteHook>>>, TError,{data: DomainModelBenchmarkTaskAssignmentNoteBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const taskAssignmentNotePutTaskAssignmentNote =  useTaskAssignmentNotePutTaskAssignmentNoteHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNotePutTaskAssignmentNoteHook>>>, {data: DomainModelBenchmarkTaskAssignmentNoteBody}> = (props) => {
          const {data} = props ?? {};

          return  taskAssignmentNotePutTaskAssignmentNote(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type TaskAssignmentNotePutTaskAssignmentNoteMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNotePutTaskAssignmentNoteHook>>>>
    export type TaskAssignmentNotePutTaskAssignmentNoteMutationBody = DomainModelBenchmarkTaskAssignmentNoteBody
    export type TaskAssignmentNotePutTaskAssignmentNoteMutationError = unknown

    export const useTaskAssignmentNotePutTaskAssignmentNote = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNotePutTaskAssignmentNoteHook>>>, TError,{data: DomainModelBenchmarkTaskAssignmentNoteBody}, TContext>, }
) => {

      const mutationOptions = useTaskAssignmentNotePutTaskAssignmentNoteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useTaskAssignmentNoteDeleteTaskAssignmentNoteHook = () => {
        const taskAssignmentNoteDeleteTaskAssignmentNote = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return taskAssignmentNoteDeleteTaskAssignmentNote(
          {url: `/api/TaskAssignmentNote/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getTaskAssignmentNoteDeleteTaskAssignmentNoteQueryKey = (id: number,) => {
    return [`/api/TaskAssignmentNote/delete/${id}`] as const;
    }

    
export const useTaskAssignmentNoteDeleteTaskAssignmentNoteQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteDeleteTaskAssignmentNoteHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteDeleteTaskAssignmentNoteHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTaskAssignmentNoteDeleteTaskAssignmentNoteQueryKey(id);

  const taskAssignmentNoteDeleteTaskAssignmentNote =  useTaskAssignmentNoteDeleteTaskAssignmentNoteHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteDeleteTaskAssignmentNoteHook>>>> = ({ signal }) => taskAssignmentNoteDeleteTaskAssignmentNote(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteDeleteTaskAssignmentNoteHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type TaskAssignmentNoteDeleteTaskAssignmentNoteQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteDeleteTaskAssignmentNoteHook>>>>
export type TaskAssignmentNoteDeleteTaskAssignmentNoteQueryError = unknown

export const useTaskAssignmentNoteDeleteTaskAssignmentNote = <TData = Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteDeleteTaskAssignmentNoteHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteDeleteTaskAssignmentNoteHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useTaskAssignmentNoteDeleteTaskAssignmentNoteQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useTaskAssignmentNoteGetAllTaskAssignmentNoteByFiltersHook = () => {
        const taskAssignmentNoteGetAllTaskAssignmentNoteByFilters = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelBenchmarkTaskAssignmentNote>();

        return (
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return taskAssignmentNoteGetAllTaskAssignmentNoteByFilters(
          {url: `/api/TaskAssignmentNote/GetAllTaskAssignmentNoteByFilters/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getTaskAssignmentNoteGetAllTaskAssignmentNoteByFiltersQueryKey = (startIndex: number,
    endIndex: number,) => {
    return [`/api/TaskAssignmentNote/GetAllTaskAssignmentNoteByFilters/${startIndex}/${endIndex}`] as const;
    }

    
export const useTaskAssignmentNoteGetAllTaskAssignmentNoteByFiltersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteGetAllTaskAssignmentNoteByFiltersHook>>>, TError = unknown>(startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteGetAllTaskAssignmentNoteByFiltersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTaskAssignmentNoteGetAllTaskAssignmentNoteByFiltersQueryKey(startIndex,endIndex);

  const taskAssignmentNoteGetAllTaskAssignmentNoteByFilters =  useTaskAssignmentNoteGetAllTaskAssignmentNoteByFiltersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteGetAllTaskAssignmentNoteByFiltersHook>>>> = ({ signal }) => taskAssignmentNoteGetAllTaskAssignmentNoteByFilters(startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteGetAllTaskAssignmentNoteByFiltersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type TaskAssignmentNoteGetAllTaskAssignmentNoteByFiltersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteGetAllTaskAssignmentNoteByFiltersHook>>>>
export type TaskAssignmentNoteGetAllTaskAssignmentNoteByFiltersQueryError = unknown

export const useTaskAssignmentNoteGetAllTaskAssignmentNoteByFilters = <TData = Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteGetAllTaskAssignmentNoteByFiltersHook>>>, TError = unknown>(
 startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTaskAssignmentNoteGetAllTaskAssignmentNoteByFiltersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useTaskAssignmentNoteGetAllTaskAssignmentNoteByFiltersQueryOptions(startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useTransactionDetailsGetAllTransactionDetailsHook = () => {
        const transactionDetailsGetAllTransactionDetails = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelPaymentProcessTransaction>();

        return (
    agentId: number,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return transactionDetailsGetAllTransactionDetails(
          {url: `/api/TransactionDetails/GetAllTransactionDetails/${agentId}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getTransactionDetailsGetAllTransactionDetailsQueryKey = (agentId: number,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/TransactionDetails/GetAllTransactionDetails/${agentId}/${startIndex}/${endIndex}`] as const;
    }

    
export const useTransactionDetailsGetAllTransactionDetailsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetAllTransactionDetailsHook>>>, TError = unknown>(agentId: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetAllTransactionDetailsHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTransactionDetailsGetAllTransactionDetailsQueryKey(agentId,startIndex,endIndex);

  const transactionDetailsGetAllTransactionDetails =  useTransactionDetailsGetAllTransactionDetailsHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetAllTransactionDetailsHook>>>> = ({ signal }) => transactionDetailsGetAllTransactionDetails(agentId,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(agentId && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetAllTransactionDetailsHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type TransactionDetailsGetAllTransactionDetailsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetAllTransactionDetailsHook>>>>
export type TransactionDetailsGetAllTransactionDetailsQueryError = unknown

export const useTransactionDetailsGetAllTransactionDetails = <TData = Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetAllTransactionDetailsHook>>>, TError = unknown>(
 agentId: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetAllTransactionDetailsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useTransactionDetailsGetAllTransactionDetailsQueryOptions(agentId,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useTransactionDetailsGetAllActivePropertiesByAgentIDHook = () => {
        const transactionDetailsGetAllActivePropertiesByAgentID = useCustomInstance<DomainModelPaymentProcessTransaction[]>();

        return (
    customerId: number,
    agentID: number,
 signal?: AbortSignal
) => {
        return transactionDetailsGetAllActivePropertiesByAgentID(
          {url: `/api/TransactionDetails/GetTransactionDetailsByCustomerIdAgentId/${customerId}/${agentID}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getTransactionDetailsGetAllActivePropertiesByAgentIDQueryKey = (customerId: number,
    agentID: number,) => {
    return [`/api/TransactionDetails/GetTransactionDetailsByCustomerIdAgentId/${customerId}/${agentID}`] as const;
    }

    
export const useTransactionDetailsGetAllActivePropertiesByAgentIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetAllActivePropertiesByAgentIDHook>>>, TError = unknown>(customerId: number,
    agentID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetAllActivePropertiesByAgentIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTransactionDetailsGetAllActivePropertiesByAgentIDQueryKey(customerId,agentID);

  const transactionDetailsGetAllActivePropertiesByAgentID =  useTransactionDetailsGetAllActivePropertiesByAgentIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetAllActivePropertiesByAgentIDHook>>>> = ({ signal }) => transactionDetailsGetAllActivePropertiesByAgentID(customerId,agentID, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && agentID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetAllActivePropertiesByAgentIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type TransactionDetailsGetAllActivePropertiesByAgentIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetAllActivePropertiesByAgentIDHook>>>>
export type TransactionDetailsGetAllActivePropertiesByAgentIDQueryError = unknown

export const useTransactionDetailsGetAllActivePropertiesByAgentID = <TData = Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetAllActivePropertiesByAgentIDHook>>>, TError = unknown>(
 customerId: number,
    agentID: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetAllActivePropertiesByAgentIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useTransactionDetailsGetAllActivePropertiesByAgentIDQueryOptions(customerId,agentID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useTransactionDetailsGetTransactionDetailsWithFilterByCustomerIdAgentIdHook = () => {
        const transactionDetailsGetTransactionDetailsWithFilterByCustomerIdAgentId = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelPaymentProcessTransaction>();

        return (
    customerId: number,
    agentID: number,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return transactionDetailsGetTransactionDetailsWithFilterByCustomerIdAgentId(
          {url: `/api/TransactionDetails/GetTransactionDetailsWithFilterByCustomerIdAgentId/${customerId}/${agentID}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getTransactionDetailsGetTransactionDetailsWithFilterByCustomerIdAgentIdQueryKey = (customerId: number,
    agentID: number,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/TransactionDetails/GetTransactionDetailsWithFilterByCustomerIdAgentId/${customerId}/${agentID}/${startIndex}/${endIndex}`] as const;
    }

    
export const useTransactionDetailsGetTransactionDetailsWithFilterByCustomerIdAgentIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetTransactionDetailsWithFilterByCustomerIdAgentIdHook>>>, TError = unknown>(customerId: number,
    agentID: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetTransactionDetailsWithFilterByCustomerIdAgentIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTransactionDetailsGetTransactionDetailsWithFilterByCustomerIdAgentIdQueryKey(customerId,agentID,startIndex,endIndex);

  const transactionDetailsGetTransactionDetailsWithFilterByCustomerIdAgentId =  useTransactionDetailsGetTransactionDetailsWithFilterByCustomerIdAgentIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetTransactionDetailsWithFilterByCustomerIdAgentIdHook>>>> = ({ signal }) => transactionDetailsGetTransactionDetailsWithFilterByCustomerIdAgentId(customerId,agentID,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && agentID && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetTransactionDetailsWithFilterByCustomerIdAgentIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type TransactionDetailsGetTransactionDetailsWithFilterByCustomerIdAgentIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetTransactionDetailsWithFilterByCustomerIdAgentIdHook>>>>
export type TransactionDetailsGetTransactionDetailsWithFilterByCustomerIdAgentIdQueryError = unknown

export const useTransactionDetailsGetTransactionDetailsWithFilterByCustomerIdAgentId = <TData = Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetTransactionDetailsWithFilterByCustomerIdAgentIdHook>>>, TError = unknown>(
 customerId: number,
    agentID: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetTransactionDetailsWithFilterByCustomerIdAgentIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useTransactionDetailsGetTransactionDetailsWithFilterByCustomerIdAgentIdQueryOptions(customerId,agentID,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useTransactionDetailsGetTransactionListByCustomerIDHook = () => {
        const transactionDetailsGetTransactionListByCustomerID = useCustomInstance<DomainModelPaymentProcessTransaction[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return transactionDetailsGetTransactionListByCustomerID(
          {url: `/api/TransactionDetails/GetTransactionListByCustomerID/${customerId}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getTransactionDetailsGetTransactionListByCustomerIDQueryKey = (customerId: number,) => {
    return [`/api/TransactionDetails/GetTransactionListByCustomerID/${customerId}`] as const;
    }

    
export const useTransactionDetailsGetTransactionListByCustomerIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetTransactionListByCustomerIDHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetTransactionListByCustomerIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTransactionDetailsGetTransactionListByCustomerIDQueryKey(customerId);

  const transactionDetailsGetTransactionListByCustomerID =  useTransactionDetailsGetTransactionListByCustomerIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetTransactionListByCustomerIDHook>>>> = ({ signal }) => transactionDetailsGetTransactionListByCustomerID(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetTransactionListByCustomerIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type TransactionDetailsGetTransactionListByCustomerIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetTransactionListByCustomerIDHook>>>>
export type TransactionDetailsGetTransactionListByCustomerIDQueryError = unknown

export const useTransactionDetailsGetTransactionListByCustomerID = <TData = Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetTransactionListByCustomerIDHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetTransactionListByCustomerIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useTransactionDetailsGetTransactionListByCustomerIDQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useTransactionDetailsGetPaymentDetailsCreditCardBankAccountHook = () => {
        const transactionDetailsGetPaymentDetailsCreditCardBankAccount = useCustomInstance<DomainModelPaymentProcessTransaction>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return transactionDetailsGetPaymentDetailsCreditCardBankAccount(
          {url: `/api/TransactionDetails/GetPaymentDetailsCreditcardBankAccount/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getTransactionDetailsGetPaymentDetailsCreditCardBankAccountQueryKey = (id: number,) => {
    return [`/api/TransactionDetails/GetPaymentDetailsCreditcardBankAccount/${id}`] as const;
    }

    
export const useTransactionDetailsGetPaymentDetailsCreditCardBankAccountQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetPaymentDetailsCreditCardBankAccountHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetPaymentDetailsCreditCardBankAccountHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTransactionDetailsGetPaymentDetailsCreditCardBankAccountQueryKey(id);

  const transactionDetailsGetPaymentDetailsCreditCardBankAccount =  useTransactionDetailsGetPaymentDetailsCreditCardBankAccountHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetPaymentDetailsCreditCardBankAccountHook>>>> = ({ signal }) => transactionDetailsGetPaymentDetailsCreditCardBankAccount(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetPaymentDetailsCreditCardBankAccountHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type TransactionDetailsGetPaymentDetailsCreditCardBankAccountQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetPaymentDetailsCreditCardBankAccountHook>>>>
export type TransactionDetailsGetPaymentDetailsCreditCardBankAccountQueryError = unknown

export const useTransactionDetailsGetPaymentDetailsCreditCardBankAccount = <TData = Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetPaymentDetailsCreditCardBankAccountHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetPaymentDetailsCreditCardBankAccountHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useTransactionDetailsGetPaymentDetailsCreditCardBankAccountQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useTransactionDetailsAddTransactionDetailsHook = () => {
        const transactionDetailsAddTransactionDetails = useCustomInstance<DomainModelPaymentProcessTransaction>();

        return (
    domainModelPaymentProcessTransactionBody: DomainModelPaymentProcessTransactionBody,
 ) => {
        return transactionDetailsAddTransactionDetails(
          {url: `/api/TransactionDetails/AddTransactionDetails`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelPaymentProcessTransactionBody
    },
          );
        }
      }
    


export const useTransactionDetailsAddTransactionDetailsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsAddTransactionDetailsHook>>>, TError,{data: DomainModelPaymentProcessTransactionBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsAddTransactionDetailsHook>>>, TError,{data: DomainModelPaymentProcessTransactionBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const transactionDetailsAddTransactionDetails =  useTransactionDetailsAddTransactionDetailsHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsAddTransactionDetailsHook>>>, {data: DomainModelPaymentProcessTransactionBody}> = (props) => {
          const {data} = props ?? {};

          return  transactionDetailsAddTransactionDetails(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type TransactionDetailsAddTransactionDetailsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsAddTransactionDetailsHook>>>>
    export type TransactionDetailsAddTransactionDetailsMutationBody = DomainModelPaymentProcessTransactionBody
    export type TransactionDetailsAddTransactionDetailsMutationError = unknown

    export const useTransactionDetailsAddTransactionDetails = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsAddTransactionDetailsHook>>>, TError,{data: DomainModelPaymentProcessTransactionBody}, TContext>, }
) => {

      const mutationOptions = useTransactionDetailsAddTransactionDetailsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useTransactionDetailsGetHook = () => {
        const transactionDetailsGet = useCustomInstance<DomainModelPaymentProcessTransaction>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return transactionDetailsGet(
          {url: `/api/TransactionDetails/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getTransactionDetailsGetQueryKey = (id: number,) => {
    return [`/api/TransactionDetails/get/${id}`] as const;
    }

    
export const useTransactionDetailsGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTransactionDetailsGetQueryKey(id);

  const transactionDetailsGet =  useTransactionDetailsGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetHook>>>> = ({ signal }) => transactionDetailsGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type TransactionDetailsGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetHook>>>>
export type TransactionDetailsGetQueryError = unknown

export const useTransactionDetailsGet = <TData = Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useTransactionDetailsGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useTransactionDetailsDeleteTransactionHook = () => {
        const transactionDetailsDeleteTransaction = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return transactionDetailsDeleteTransaction(
          {url: `/api/TransactionDetails/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getTransactionDetailsDeleteTransactionQueryKey = (id: number,) => {
    return [`/api/TransactionDetails/delete/${id}`] as const;
    }

    
export const useTransactionDetailsDeleteTransactionQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useTransactionDetailsDeleteTransactionHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsDeleteTransactionHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTransactionDetailsDeleteTransactionQueryKey(id);

  const transactionDetailsDeleteTransaction =  useTransactionDetailsDeleteTransactionHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsDeleteTransactionHook>>>> = ({ signal }) => transactionDetailsDeleteTransaction(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsDeleteTransactionHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type TransactionDetailsDeleteTransactionQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsDeleteTransactionHook>>>>
export type TransactionDetailsDeleteTransactionQueryError = unknown

export const useTransactionDetailsDeleteTransaction = <TData = Awaited<ReturnType<ReturnType<typeof useTransactionDetailsDeleteTransactionHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsDeleteTransactionHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useTransactionDetailsDeleteTransactionQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useTransactionDetailsSavePropertyTransactionDetailsHook = () => {
        const transactionDetailsSavePropertyTransactionDetails = useCustomInstance<boolean>();

        return (
    domainModelPaymentProcessTransaction: DomainModelPaymentProcessTransaction[],
 ) => {
        return transactionDetailsSavePropertyTransactionDetails(
          {url: `/api/TransactionDetails/SavePropertyTransactionDetails`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelPaymentProcessTransaction
    },
          );
        }
      }
    


export const useTransactionDetailsSavePropertyTransactionDetailsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsSavePropertyTransactionDetailsHook>>>, TError,{data: DomainModelPaymentProcessTransaction[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsSavePropertyTransactionDetailsHook>>>, TError,{data: DomainModelPaymentProcessTransaction[]}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const transactionDetailsSavePropertyTransactionDetails =  useTransactionDetailsSavePropertyTransactionDetailsHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsSavePropertyTransactionDetailsHook>>>, {data: DomainModelPaymentProcessTransaction[]}> = (props) => {
          const {data} = props ?? {};

          return  transactionDetailsSavePropertyTransactionDetails(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type TransactionDetailsSavePropertyTransactionDetailsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsSavePropertyTransactionDetailsHook>>>>
    export type TransactionDetailsSavePropertyTransactionDetailsMutationBody = DomainModelPaymentProcessTransaction[]
    export type TransactionDetailsSavePropertyTransactionDetailsMutationError = unknown

    export const useTransactionDetailsSavePropertyTransactionDetails = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsSavePropertyTransactionDetailsHook>>>, TError,{data: DomainModelPaymentProcessTransaction[]}, TContext>, }
) => {

      const mutationOptions = useTransactionDetailsSavePropertyTransactionDetailsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useTransactionDetailsGetTransactionDetailsByCustomerIdAgentIdWithFilterHook = () => {
        const transactionDetailsGetTransactionDetailsByCustomerIdAgentIdWithFilter = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelPaymentProcessTransaction>();

        return (
    customerId: number,
    agentID: number,
    startIndex: number,
    endIndex: number,
    searchFilter: string,
    sortingFilter: string,
 signal?: AbortSignal
) => {
        return transactionDetailsGetTransactionDetailsByCustomerIdAgentIdWithFilter(
          {url: `/api/TransactionDetails/GetTransactionDetailsByCustomerIdAgentIdWithFilter/${customerId}/${agentID}/${startIndex}/${endIndex}/${searchFilter}/${sortingFilter}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getTransactionDetailsGetTransactionDetailsByCustomerIdAgentIdWithFilterQueryKey = (customerId: number,
    agentID: number,
    startIndex: number,
    endIndex: number,
    searchFilter: string,
    sortingFilter: string,) => {
    return [`/api/TransactionDetails/GetTransactionDetailsByCustomerIdAgentIdWithFilter/${customerId}/${agentID}/${startIndex}/${endIndex}/${searchFilter}/${sortingFilter}`] as const;
    }

    
export const useTransactionDetailsGetTransactionDetailsByCustomerIdAgentIdWithFilterQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetTransactionDetailsByCustomerIdAgentIdWithFilterHook>>>, TError = unknown>(customerId: number,
    agentID: number,
    startIndex: number,
    endIndex: number,
    searchFilter: string,
    sortingFilter: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetTransactionDetailsByCustomerIdAgentIdWithFilterHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTransactionDetailsGetTransactionDetailsByCustomerIdAgentIdWithFilterQueryKey(customerId,agentID,startIndex,endIndex,searchFilter,sortingFilter);

  const transactionDetailsGetTransactionDetailsByCustomerIdAgentIdWithFilter =  useTransactionDetailsGetTransactionDetailsByCustomerIdAgentIdWithFilterHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetTransactionDetailsByCustomerIdAgentIdWithFilterHook>>>> = ({ signal }) => transactionDetailsGetTransactionDetailsByCustomerIdAgentIdWithFilter(customerId,agentID,startIndex,endIndex,searchFilter,sortingFilter, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId && agentID && startIndex && endIndex && searchFilter && sortingFilter), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetTransactionDetailsByCustomerIdAgentIdWithFilterHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type TransactionDetailsGetTransactionDetailsByCustomerIdAgentIdWithFilterQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetTransactionDetailsByCustomerIdAgentIdWithFilterHook>>>>
export type TransactionDetailsGetTransactionDetailsByCustomerIdAgentIdWithFilterQueryError = unknown

export const useTransactionDetailsGetTransactionDetailsByCustomerIdAgentIdWithFilter = <TData = Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetTransactionDetailsByCustomerIdAgentIdWithFilterHook>>>, TError = unknown>(
 customerId: number,
    agentID: number,
    startIndex: number,
    endIndex: number,
    searchFilter: string,
    sortingFilter: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useTransactionDetailsGetTransactionDetailsByCustomerIdAgentIdWithFilterHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useTransactionDetailsGetTransactionDetailsByCustomerIdAgentIdWithFilterQueryOptions(customerId,agentID,startIndex,endIndex,searchFilter,sortingFilter,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useUnderwritersGetAllUnderwritersHook = () => {
        const underwritersGetAllUnderwriters = useCustomInstance<DomainModelBenchmarkUnderwriter[]>();

        return (
    
 signal?: AbortSignal
) => {
        return underwritersGetAllUnderwriters(
          {url: `/api/Underwriters/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getUnderwritersGetAllUnderwritersQueryKey = () => {
    return [`/api/Underwriters/getAll`] as const;
    }

    
export const useUnderwritersGetAllUnderwritersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useUnderwritersGetAllUnderwritersHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetAllUnderwritersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUnderwritersGetAllUnderwritersQueryKey();

  const underwritersGetAllUnderwriters =  useUnderwritersGetAllUnderwritersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetAllUnderwritersHook>>>> = ({ signal }) => underwritersGetAllUnderwriters(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetAllUnderwritersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type UnderwritersGetAllUnderwritersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetAllUnderwritersHook>>>>
export type UnderwritersGetAllUnderwritersQueryError = unknown

export const useUnderwritersGetAllUnderwriters = <TData = Awaited<ReturnType<ReturnType<typeof useUnderwritersGetAllUnderwritersHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetAllUnderwritersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useUnderwritersGetAllUnderwritersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useUnderwritersGetHook = () => {
        const underwritersGet = useCustomInstance<DomainModelBenchmarkUnderwriter>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return underwritersGet(
          {url: `/api/Underwriters/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getUnderwritersGetQueryKey = (id: number,) => {
    return [`/api/Underwriters/get/${id}`] as const;
    }

    
export const useUnderwritersGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useUnderwritersGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUnderwritersGetQueryKey(id);

  const underwritersGet =  useUnderwritersGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetHook>>>> = ({ signal }) => underwritersGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type UnderwritersGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetHook>>>>
export type UnderwritersGetQueryError = unknown

export const useUnderwritersGet = <TData = Awaited<ReturnType<ReturnType<typeof useUnderwritersGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useUnderwritersGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useUnderwritersPostUnderwritersHook = () => {
        const underwritersPostUnderwriters = useCustomInstance<DomainModelBenchmarkUnderwriter>();

        return (
    domainModelBenchmarkUnderwriterBody: DomainModelBenchmarkUnderwriterBody,
 ) => {
        return underwritersPostUnderwriters(
          {url: `/api/Underwriters/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkUnderwriterBody
    },
          );
        }
      }
    


export const useUnderwritersPostUnderwritersMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersPostUnderwritersHook>>>, TError,{data: DomainModelBenchmarkUnderwriterBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersPostUnderwritersHook>>>, TError,{data: DomainModelBenchmarkUnderwriterBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const underwritersPostUnderwriters =  useUnderwritersPostUnderwritersHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useUnderwritersPostUnderwritersHook>>>, {data: DomainModelBenchmarkUnderwriterBody}> = (props) => {
          const {data} = props ?? {};

          return  underwritersPostUnderwriters(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type UnderwritersPostUnderwritersMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUnderwritersPostUnderwritersHook>>>>
    export type UnderwritersPostUnderwritersMutationBody = DomainModelBenchmarkUnderwriterBody
    export type UnderwritersPostUnderwritersMutationError = unknown

    export const useUnderwritersPostUnderwriters = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersPostUnderwritersHook>>>, TError,{data: DomainModelBenchmarkUnderwriterBody}, TContext>, }
) => {

      const mutationOptions = useUnderwritersPostUnderwritersMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useUnderwritersPutUnderwritersHook = () => {
        const underwritersPutUnderwriters = useCustomInstance<DomainModelBenchmarkUnderwriter>();

        return (
    domainModelBenchmarkUnderwriterBody: DomainModelBenchmarkUnderwriterBody,
 ) => {
        return underwritersPutUnderwriters(
          {url: `/api/Underwriters/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkUnderwriterBody
    },
          );
        }
      }
    


export const useUnderwritersPutUnderwritersMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersPutUnderwritersHook>>>, TError,{data: DomainModelBenchmarkUnderwriterBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersPutUnderwritersHook>>>, TError,{data: DomainModelBenchmarkUnderwriterBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const underwritersPutUnderwriters =  useUnderwritersPutUnderwritersHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useUnderwritersPutUnderwritersHook>>>, {data: DomainModelBenchmarkUnderwriterBody}> = (props) => {
          const {data} = props ?? {};

          return  underwritersPutUnderwriters(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type UnderwritersPutUnderwritersMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUnderwritersPutUnderwritersHook>>>>
    export type UnderwritersPutUnderwritersMutationBody = DomainModelBenchmarkUnderwriterBody
    export type UnderwritersPutUnderwritersMutationError = unknown

    export const useUnderwritersPutUnderwriters = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersPutUnderwritersHook>>>, TError,{data: DomainModelBenchmarkUnderwriterBody}, TContext>, }
) => {

      const mutationOptions = useUnderwritersPutUnderwritersMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useUnderwritersDeleteUnderwritersHook = () => {
        const underwritersDeleteUnderwriters = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return underwritersDeleteUnderwriters(
          {url: `/api/Underwriters/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getUnderwritersDeleteUnderwritersQueryKey = (id: number,) => {
    return [`/api/Underwriters/delete/${id}`] as const;
    }

    
export const useUnderwritersDeleteUnderwritersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useUnderwritersDeleteUnderwritersHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersDeleteUnderwritersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUnderwritersDeleteUnderwritersQueryKey(id);

  const underwritersDeleteUnderwriters =  useUnderwritersDeleteUnderwritersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useUnderwritersDeleteUnderwritersHook>>>> = ({ signal }) => underwritersDeleteUnderwriters(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersDeleteUnderwritersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type UnderwritersDeleteUnderwritersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUnderwritersDeleteUnderwritersHook>>>>
export type UnderwritersDeleteUnderwritersQueryError = unknown

export const useUnderwritersDeleteUnderwriters = <TData = Awaited<ReturnType<ReturnType<typeof useUnderwritersDeleteUnderwritersHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersDeleteUnderwritersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useUnderwritersDeleteUnderwritersQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useUnderwritersGetAllUnderwriteDetailsHook = () => {
        const underwritersGetAllUnderwriteDetails = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelVMUnderwriter>();

        return (
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return underwritersGetAllUnderwriteDetails(
          {url: `/api/UnderwriteDetails/GetAllUnderwriteDetails/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getUnderwritersGetAllUnderwriteDetailsQueryKey = (startIndex: number,
    endIndex: number,) => {
    return [`/api/UnderwriteDetails/GetAllUnderwriteDetails/${startIndex}/${endIndex}`] as const;
    }

    
export const useUnderwritersGetAllUnderwriteDetailsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useUnderwritersGetAllUnderwriteDetailsHook>>>, TError = unknown>(startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetAllUnderwriteDetailsHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUnderwritersGetAllUnderwriteDetailsQueryKey(startIndex,endIndex);

  const underwritersGetAllUnderwriteDetails =  useUnderwritersGetAllUnderwriteDetailsHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetAllUnderwriteDetailsHook>>>> = ({ signal }) => underwritersGetAllUnderwriteDetails(startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetAllUnderwriteDetailsHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type UnderwritersGetAllUnderwriteDetailsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetAllUnderwriteDetailsHook>>>>
export type UnderwritersGetAllUnderwriteDetailsQueryError = unknown

export const useUnderwritersGetAllUnderwriteDetails = <TData = Awaited<ReturnType<ReturnType<typeof useUnderwritersGetAllUnderwriteDetailsHook>>>, TError = unknown>(
 startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetAllUnderwriteDetailsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useUnderwritersGetAllUnderwriteDetailsQueryOptions(startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useUnderwritersGetUnderwriterByBrokerIDHook = () => {
        const underwritersGetUnderwriterByBrokerID = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelVMUnderwriter>();

        return (
    brokerID: number,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return underwritersGetUnderwriterByBrokerID(
          {url: `/api/UnderwriteDetails/GetUnderwriterByBrokerID/${brokerID}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getUnderwritersGetUnderwriterByBrokerIDQueryKey = (brokerID: number,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/UnderwriteDetails/GetUnderwriterByBrokerID/${brokerID}/${startIndex}/${endIndex}`] as const;
    }

    
export const useUnderwritersGetUnderwriterByBrokerIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useUnderwritersGetUnderwriterByBrokerIDHook>>>, TError = unknown>(brokerID: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetUnderwriterByBrokerIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUnderwritersGetUnderwriterByBrokerIDQueryKey(brokerID,startIndex,endIndex);

  const underwritersGetUnderwriterByBrokerID =  useUnderwritersGetUnderwriterByBrokerIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetUnderwriterByBrokerIDHook>>>> = ({ signal }) => underwritersGetUnderwriterByBrokerID(brokerID,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(brokerID && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetUnderwriterByBrokerIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type UnderwritersGetUnderwriterByBrokerIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetUnderwriterByBrokerIDHook>>>>
export type UnderwritersGetUnderwriterByBrokerIDQueryError = unknown

export const useUnderwritersGetUnderwriterByBrokerID = <TData = Awaited<ReturnType<ReturnType<typeof useUnderwritersGetUnderwriterByBrokerIDHook>>>, TError = unknown>(
 brokerID: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetUnderwriterByBrokerIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useUnderwritersGetUnderwriterByBrokerIDQueryOptions(brokerID,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useUnderwritersGetUnderwriterByWritingCompanyIDHook = () => {
        const underwritersGetUnderwriterByWritingCompanyID = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelVMUnderwriter>();

        return (
    writingCompanyID: number,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return underwritersGetUnderwriterByWritingCompanyID(
          {url: `/api/UnderwriteDetails/GetUnderwriterByWritingCompanyID/${writingCompanyID}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getUnderwritersGetUnderwriterByWritingCompanyIDQueryKey = (writingCompanyID: number,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/UnderwriteDetails/GetUnderwriterByWritingCompanyID/${writingCompanyID}/${startIndex}/${endIndex}`] as const;
    }

    
export const useUnderwritersGetUnderwriterByWritingCompanyIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useUnderwritersGetUnderwriterByWritingCompanyIDHook>>>, TError = unknown>(writingCompanyID: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetUnderwriterByWritingCompanyIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUnderwritersGetUnderwriterByWritingCompanyIDQueryKey(writingCompanyID,startIndex,endIndex);

  const underwritersGetUnderwriterByWritingCompanyID =  useUnderwritersGetUnderwriterByWritingCompanyIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetUnderwriterByWritingCompanyIDHook>>>> = ({ signal }) => underwritersGetUnderwriterByWritingCompanyID(writingCompanyID,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(writingCompanyID && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetUnderwriterByWritingCompanyIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type UnderwritersGetUnderwriterByWritingCompanyIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetUnderwriterByWritingCompanyIDHook>>>>
export type UnderwritersGetUnderwriterByWritingCompanyIDQueryError = unknown

export const useUnderwritersGetUnderwriterByWritingCompanyID = <TData = Awaited<ReturnType<ReturnType<typeof useUnderwritersGetUnderwriterByWritingCompanyIDHook>>>, TError = unknown>(
 writingCompanyID: number,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUnderwritersGetUnderwriterByWritingCompanyIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useUnderwritersGetUnderwriterByWritingCompanyIDQueryOptions(writingCompanyID,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useUserGetAllHook = () => {
        const userGetAll = useCustomInstance<DomainModelBenchmarkUser[]>();

        return (
    
 signal?: AbortSignal
) => {
        return userGetAll(
          {url: `/api/BenchmarkUsers/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getUserGetAllQueryKey = () => {
    return [`/api/BenchmarkUsers/getAll`] as const;
    }

    
export const useUserGetAllQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useUserGetAllHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserGetAllHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUserGetAllQueryKey();

  const userGetAll =  useUserGetAllHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useUserGetAllHook>>>> = ({ signal }) => userGetAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserGetAllHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type UserGetAllQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUserGetAllHook>>>>
export type UserGetAllQueryError = unknown

export const useUserGetAll = <TData = Awaited<ReturnType<ReturnType<typeof useUserGetAllHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserGetAllHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useUserGetAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useUserPutUserHook = () => {
        const userPutUser = useCustomInstance<DomainModelBenchmarkUser>();

        return (
    params?: UserPutUserParams,
 signal?: AbortSignal
) => {
        return userPutUser(
          {url: `/api/BenchmarkUsers/edit`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getUserPutUserQueryKey = (params?: UserPutUserParams,) => {
    return [`/api/BenchmarkUsers/edit`, ...(params ? [params]: [])] as const;
    }

    
export const useUserPutUserQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useUserPutUserHook>>>, TError = unknown>(params?: UserPutUserParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserPutUserHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUserPutUserQueryKey(params);

  const userPutUser =  useUserPutUserHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useUserPutUserHook>>>> = ({ signal }) => userPutUser(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserPutUserHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type UserPutUserQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUserPutUserHook>>>>
export type UserPutUserQueryError = unknown

export const useUserPutUser = <TData = Awaited<ReturnType<ReturnType<typeof useUserPutUserHook>>>, TError = unknown>(
 params?: UserPutUserParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserPutUserHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useUserPutUserQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useUserDeleteUserHook = () => {
        const userDeleteUser = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return userDeleteUser(
          {url: `/api/BenchmarkUsers/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getUserDeleteUserQueryKey = (id: number,) => {
    return [`/api/BenchmarkUsers/delete/${id}`] as const;
    }

    
export const useUserDeleteUserQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useUserDeleteUserHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserDeleteUserHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUserDeleteUserQueryKey(id);

  const userDeleteUser =  useUserDeleteUserHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useUserDeleteUserHook>>>> = ({ signal }) => userDeleteUser(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserDeleteUserHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type UserDeleteUserQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUserDeleteUserHook>>>>
export type UserDeleteUserQueryError = unknown

export const useUserDeleteUser = <TData = Awaited<ReturnType<ReturnType<typeof useUserDeleteUserHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserDeleteUserHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useUserDeleteUserQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useUserGroupGetAllHook = () => {
        const userGroupGetAll = useCustomInstance<DomainModelBechmarkUserGroup[]>();

        return (
    
 signal?: AbortSignal
) => {
        return userGroupGetAll(
          {url: `/api/BechmarkUserGroup/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getUserGroupGetAllQueryKey = () => {
    return [`/api/BechmarkUserGroup/getAll`] as const;
    }

    
export const useUserGroupGetAllQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useUserGroupGetAllHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupGetAllHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUserGroupGetAllQueryKey();

  const userGroupGetAll =  useUserGroupGetAllHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useUserGroupGetAllHook>>>> = ({ signal }) => userGroupGetAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupGetAllHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type UserGroupGetAllQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUserGroupGetAllHook>>>>
export type UserGroupGetAllQueryError = unknown

export const useUserGroupGetAll = <TData = Awaited<ReturnType<ReturnType<typeof useUserGroupGetAllHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupGetAllHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useUserGroupGetAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useUserGroupPutActivityHook = () => {
        const userGroupPutActivity = useCustomInstance<DomainModelBechmarkUserGroup>();

        return (
    domainModelBechmarkUserGroup: DomainModelBechmarkUserGroup,
 ) => {
        return userGroupPutActivity(
          {url: `/api/BenchmarkUsersRoles/edit`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBechmarkUserGroup
    },
          );
        }
      }
    


export const useUserGroupPutActivityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupPutActivityHook>>>, TError,{data: DomainModelBechmarkUserGroup}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupPutActivityHook>>>, TError,{data: DomainModelBechmarkUserGroup}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const userGroupPutActivity =  useUserGroupPutActivityHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useUserGroupPutActivityHook>>>, {data: DomainModelBechmarkUserGroup}> = (props) => {
          const {data} = props ?? {};

          return  userGroupPutActivity(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type UserGroupPutActivityMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUserGroupPutActivityHook>>>>
    export type UserGroupPutActivityMutationBody = DomainModelBechmarkUserGroup
    export type UserGroupPutActivityMutationError = unknown

    export const useUserGroupPutActivity = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupPutActivityHook>>>, TError,{data: DomainModelBechmarkUserGroup}, TContext>, }
) => {

      const mutationOptions = useUserGroupPutActivityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useUserGroupMembersGetAllHook = () => {
        const userGroupMembersGetAll = useCustomInstance<DomainModelBechmarkUserGroupMember[]>();

        return (
    
 signal?: AbortSignal
) => {
        return userGroupMembersGetAll(
          {url: `/api/BechmarkUserGroupMember/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getUserGroupMembersGetAllQueryKey = () => {
    return [`/api/BechmarkUserGroupMember/getAll`] as const;
    }

    
export const useUserGroupMembersGetAllQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useUserGroupMembersGetAllHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupMembersGetAllHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUserGroupMembersGetAllQueryKey();

  const userGroupMembersGetAll =  useUserGroupMembersGetAllHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useUserGroupMembersGetAllHook>>>> = ({ signal }) => userGroupMembersGetAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupMembersGetAllHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type UserGroupMembersGetAllQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUserGroupMembersGetAllHook>>>>
export type UserGroupMembersGetAllQueryError = unknown

export const useUserGroupMembersGetAll = <TData = Awaited<ReturnType<ReturnType<typeof useUserGroupMembersGetAllHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupMembersGetAllHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useUserGroupMembersGetAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useUserGroupMembersPutActivityHook = () => {
        const userGroupMembersPutActivity = useCustomInstance<DomainModelBechmarkUserGroupMember>();

        return (
    domainModelBechmarkUserGroupMember: DomainModelBechmarkUserGroupMember,
 ) => {
        return userGroupMembersPutActivity(
          {url: `/api/BechmarkUserGroupMember/edit`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBechmarkUserGroupMember
    },
          );
        }
      }
    


export const useUserGroupMembersPutActivityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupMembersPutActivityHook>>>, TError,{data: DomainModelBechmarkUserGroupMember}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupMembersPutActivityHook>>>, TError,{data: DomainModelBechmarkUserGroupMember}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const userGroupMembersPutActivity =  useUserGroupMembersPutActivityHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useUserGroupMembersPutActivityHook>>>, {data: DomainModelBechmarkUserGroupMember}> = (props) => {
          const {data} = props ?? {};

          return  userGroupMembersPutActivity(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type UserGroupMembersPutActivityMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUserGroupMembersPutActivityHook>>>>
    export type UserGroupMembersPutActivityMutationBody = DomainModelBechmarkUserGroupMember
    export type UserGroupMembersPutActivityMutationError = unknown

    export const useUserGroupMembersPutActivity = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupMembersPutActivityHook>>>, TError,{data: DomainModelBechmarkUserGroupMember}, TContext>, }
) => {

      const mutationOptions = useUserGroupMembersPutActivityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useUserGroupMembersDeleteUserHook = () => {
        const userGroupMembersDeleteUser = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return userGroupMembersDeleteUser(
          {url: `/api/BechmarkUserGroupMember/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getUserGroupMembersDeleteUserQueryKey = (id: number,) => {
    return [`/api/BechmarkUserGroupMember/delete/${id}`] as const;
    }

    
export const useUserGroupMembersDeleteUserQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useUserGroupMembersDeleteUserHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupMembersDeleteUserHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUserGroupMembersDeleteUserQueryKey(id);

  const userGroupMembersDeleteUser =  useUserGroupMembersDeleteUserHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useUserGroupMembersDeleteUserHook>>>> = ({ signal }) => userGroupMembersDeleteUser(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupMembersDeleteUserHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type UserGroupMembersDeleteUserQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUserGroupMembersDeleteUserHook>>>>
export type UserGroupMembersDeleteUserQueryError = unknown

export const useUserGroupMembersDeleteUser = <TData = Awaited<ReturnType<ReturnType<typeof useUserGroupMembersDeleteUserHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupMembersDeleteUserHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useUserGroupMembersDeleteUserQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useUserGroupTemplatesGetAllHook = () => {
        const userGroupTemplatesGetAll = useCustomInstance<DomainModelBechmarkUserGroupTemplate[]>();

        return (
    
 signal?: AbortSignal
) => {
        return userGroupTemplatesGetAll(
          {url: `/api/BechmarkUserGroupTemplate/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getUserGroupTemplatesGetAllQueryKey = () => {
    return [`/api/BechmarkUserGroupTemplate/getAll`] as const;
    }

    
export const useUserGroupTemplatesGetAllQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useUserGroupTemplatesGetAllHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupTemplatesGetAllHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUserGroupTemplatesGetAllQueryKey();

  const userGroupTemplatesGetAll =  useUserGroupTemplatesGetAllHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useUserGroupTemplatesGetAllHook>>>> = ({ signal }) => userGroupTemplatesGetAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupTemplatesGetAllHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type UserGroupTemplatesGetAllQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUserGroupTemplatesGetAllHook>>>>
export type UserGroupTemplatesGetAllQueryError = unknown

export const useUserGroupTemplatesGetAll = <TData = Awaited<ReturnType<ReturnType<typeof useUserGroupTemplatesGetAllHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupTemplatesGetAllHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useUserGroupTemplatesGetAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useUserGroupTemplatesPutActivityHook = () => {
        const userGroupTemplatesPutActivity = useCustomInstance<DomainModelBechmarkUserGroupTemplate>();

        return (
    domainModelBechmarkUserGroupTemplate: DomainModelBechmarkUserGroupTemplate,
 ) => {
        return userGroupTemplatesPutActivity(
          {url: `/api/BechmarkUserGroupTemplate/edit`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBechmarkUserGroupTemplate
    },
          );
        }
      }
    


export const useUserGroupTemplatesPutActivityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupTemplatesPutActivityHook>>>, TError,{data: DomainModelBechmarkUserGroupTemplate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupTemplatesPutActivityHook>>>, TError,{data: DomainModelBechmarkUserGroupTemplate}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const userGroupTemplatesPutActivity =  useUserGroupTemplatesPutActivityHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useUserGroupTemplatesPutActivityHook>>>, {data: DomainModelBechmarkUserGroupTemplate}> = (props) => {
          const {data} = props ?? {};

          return  userGroupTemplatesPutActivity(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type UserGroupTemplatesPutActivityMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUserGroupTemplatesPutActivityHook>>>>
    export type UserGroupTemplatesPutActivityMutationBody = DomainModelBechmarkUserGroupTemplate
    export type UserGroupTemplatesPutActivityMutationError = unknown

    export const useUserGroupTemplatesPutActivity = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupTemplatesPutActivityHook>>>, TError,{data: DomainModelBechmarkUserGroupTemplate}, TContext>, }
) => {

      const mutationOptions = useUserGroupTemplatesPutActivityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useUserGroupTemplatesDeleteUserHook = () => {
        const userGroupTemplatesDeleteUser = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return userGroupTemplatesDeleteUser(
          {url: `/api/BechmarkUserGroupTemplate/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getUserGroupTemplatesDeleteUserQueryKey = (id: number,) => {
    return [`/api/BechmarkUserGroupTemplate/delete/${id}`] as const;
    }

    
export const useUserGroupTemplatesDeleteUserQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useUserGroupTemplatesDeleteUserHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupTemplatesDeleteUserHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUserGroupTemplatesDeleteUserQueryKey(id);

  const userGroupTemplatesDeleteUser =  useUserGroupTemplatesDeleteUserHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useUserGroupTemplatesDeleteUserHook>>>> = ({ signal }) => userGroupTemplatesDeleteUser(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupTemplatesDeleteUserHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type UserGroupTemplatesDeleteUserQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUserGroupTemplatesDeleteUserHook>>>>
export type UserGroupTemplatesDeleteUserQueryError = unknown

export const useUserGroupTemplatesDeleteUser = <TData = Awaited<ReturnType<ReturnType<typeof useUserGroupTemplatesDeleteUserHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserGroupTemplatesDeleteUserHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useUserGroupTemplatesDeleteUserQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useUserRolesGetAllHook = () => {
        const userRolesGetAll = useCustomInstance<DomainModelBechmarkUserRole[]>();

        return (
    
 signal?: AbortSignal
) => {
        return userRolesGetAll(
          {url: `/api/BechmarkUserRole/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getUserRolesGetAllQueryKey = () => {
    return [`/api/BechmarkUserRole/getAll`] as const;
    }

    
export const useUserRolesGetAllQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useUserRolesGetAllHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserRolesGetAllHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUserRolesGetAllQueryKey();

  const userRolesGetAll =  useUserRolesGetAllHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useUserRolesGetAllHook>>>> = ({ signal }) => userRolesGetAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserRolesGetAllHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type UserRolesGetAllQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUserRolesGetAllHook>>>>
export type UserRolesGetAllQueryError = unknown

export const useUserRolesGetAll = <TData = Awaited<ReturnType<ReturnType<typeof useUserRolesGetAllHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserRolesGetAllHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useUserRolesGetAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useUserRolesPutActivityHook = () => {
        const userRolesPutActivity = useCustomInstance<DomainModelBechmarkUserRole>();

        return (
    domainModelBechmarkUserRole: DomainModelBechmarkUserRole,
 ) => {
        return userRolesPutActivity(
          {url: `/api/BechmarkUserRole/edit`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBechmarkUserRole
    },
          );
        }
      }
    


export const useUserRolesPutActivityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUserRolesPutActivityHook>>>, TError,{data: DomainModelBechmarkUserRole}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUserRolesPutActivityHook>>>, TError,{data: DomainModelBechmarkUserRole}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const userRolesPutActivity =  useUserRolesPutActivityHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useUserRolesPutActivityHook>>>, {data: DomainModelBechmarkUserRole}> = (props) => {
          const {data} = props ?? {};

          return  userRolesPutActivity(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type UserRolesPutActivityMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUserRolesPutActivityHook>>>>
    export type UserRolesPutActivityMutationBody = DomainModelBechmarkUserRole
    export type UserRolesPutActivityMutationError = unknown

    export const useUserRolesPutActivity = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUserRolesPutActivityHook>>>, TError,{data: DomainModelBechmarkUserRole}, TContext>, }
) => {

      const mutationOptions = useUserRolesPutActivityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useUserRolesDeleteUserHook = () => {
        const userRolesDeleteUser = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return userRolesDeleteUser(
          {url: `/api/BechmarkUserRole/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getUserRolesDeleteUserQueryKey = (id: number,) => {
    return [`/api/BechmarkUserRole/delete/${id}`] as const;
    }

    
export const useUserRolesDeleteUserQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useUserRolesDeleteUserHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserRolesDeleteUserHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUserRolesDeleteUserQueryKey(id);

  const userRolesDeleteUser =  useUserRolesDeleteUserHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useUserRolesDeleteUserHook>>>> = ({ signal }) => userRolesDeleteUser(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserRolesDeleteUserHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type UserRolesDeleteUserQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUserRolesDeleteUserHook>>>>
export type UserRolesDeleteUserQueryError = unknown

export const useUserRolesDeleteUser = <TData = Awaited<ReturnType<ReturnType<typeof useUserRolesDeleteUserHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUserRolesDeleteUserHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useUserRolesDeleteUserQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useValuationTypeGetAllValuationTypeHook = () => {
        const valuationTypeGetAllValuationType = useCustomInstance<DomainModelBenchmarkValuationType[]>();

        return (
    
 signal?: AbortSignal
) => {
        return valuationTypeGetAllValuationType(
          {url: `/api/ValuationType/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getValuationTypeGetAllValuationTypeQueryKey = () => {
    return [`/api/ValuationType/getAll`] as const;
    }

    
export const useValuationTypeGetAllValuationTypeQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useValuationTypeGetAllValuationTypeHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetAllValuationTypeHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getValuationTypeGetAllValuationTypeQueryKey();

  const valuationTypeGetAllValuationType =  useValuationTypeGetAllValuationTypeHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetAllValuationTypeHook>>>> = ({ signal }) => valuationTypeGetAllValuationType(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetAllValuationTypeHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ValuationTypeGetAllValuationTypeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetAllValuationTypeHook>>>>
export type ValuationTypeGetAllValuationTypeQueryError = unknown

export const useValuationTypeGetAllValuationType = <TData = Awaited<ReturnType<ReturnType<typeof useValuationTypeGetAllValuationTypeHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetAllValuationTypeHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useValuationTypeGetAllValuationTypeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useValuationTypeGetAllValuationTypeByStatusHook = () => {
        const valuationTypeGetAllValuationTypeByStatus = useCustomInstance<DomainModelBenchmarkValuationType[]>();

        return (
    statusId: number,
 signal?: AbortSignal
) => {
        return valuationTypeGetAllValuationTypeByStatus(
          {url: `/api/statuses/${statusId}/ValuationType`, method: 'GET', signal
    },
          );
        }
      }
    

export const getValuationTypeGetAllValuationTypeByStatusQueryKey = (statusId: number,) => {
    return [`/api/statuses/${statusId}/ValuationType`] as const;
    }

    
export const useValuationTypeGetAllValuationTypeByStatusQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useValuationTypeGetAllValuationTypeByStatusHook>>>, TError = unknown>(statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetAllValuationTypeByStatusHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getValuationTypeGetAllValuationTypeByStatusQueryKey(statusId);

  const valuationTypeGetAllValuationTypeByStatus =  useValuationTypeGetAllValuationTypeByStatusHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetAllValuationTypeByStatusHook>>>> = ({ signal }) => valuationTypeGetAllValuationTypeByStatus(statusId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(statusId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetAllValuationTypeByStatusHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ValuationTypeGetAllValuationTypeByStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetAllValuationTypeByStatusHook>>>>
export type ValuationTypeGetAllValuationTypeByStatusQueryError = unknown

export const useValuationTypeGetAllValuationTypeByStatus = <TData = Awaited<ReturnType<ReturnType<typeof useValuationTypeGetAllValuationTypeByStatusHook>>>, TError = unknown>(
 statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetAllValuationTypeByStatusHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useValuationTypeGetAllValuationTypeByStatusQueryOptions(statusId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useValuationTypeGetValuationTypeByCustomerIdHook = () => {
        const valuationTypeGetValuationTypeByCustomerId = useCustomInstance<DomainModelBenchmarkValuationType[]>();

        return (
    customerId: number,
 signal?: AbortSignal
) => {
        return valuationTypeGetValuationTypeByCustomerId(
          {url: `/api/customers/${customerId}/ValuationType`, method: 'GET', signal
    },
          );
        }
      }
    

export const getValuationTypeGetValuationTypeByCustomerIdQueryKey = (customerId: number,) => {
    return [`/api/customers/${customerId}/ValuationType`] as const;
    }

    
export const useValuationTypeGetValuationTypeByCustomerIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useValuationTypeGetValuationTypeByCustomerIdHook>>>, TError = unknown>(customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetValuationTypeByCustomerIdHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getValuationTypeGetValuationTypeByCustomerIdQueryKey(customerId);

  const valuationTypeGetValuationTypeByCustomerId =  useValuationTypeGetValuationTypeByCustomerIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetValuationTypeByCustomerIdHook>>>> = ({ signal }) => valuationTypeGetValuationTypeByCustomerId(customerId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetValuationTypeByCustomerIdHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ValuationTypeGetValuationTypeByCustomerIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetValuationTypeByCustomerIdHook>>>>
export type ValuationTypeGetValuationTypeByCustomerIdQueryError = unknown

export const useValuationTypeGetValuationTypeByCustomerId = <TData = Awaited<ReturnType<ReturnType<typeof useValuationTypeGetValuationTypeByCustomerIdHook>>>, TError = unknown>(
 customerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetValuationTypeByCustomerIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useValuationTypeGetValuationTypeByCustomerIdQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useValuationTypePostValuationTypeHook = () => {
        const valuationTypePostValuationType = useCustomInstance<DomainModelBenchmarkValuationType>();

        return (
    domainModelBenchmarkValuationTypeBody: DomainModelBenchmarkValuationTypeBody,
 ) => {
        return valuationTypePostValuationType(
          {url: `/api/ValuationType/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkValuationTypeBody
    },
          );
        }
      }
    


export const useValuationTypePostValuationTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypePostValuationTypeHook>>>, TError,{data: DomainModelBenchmarkValuationTypeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypePostValuationTypeHook>>>, TError,{data: DomainModelBenchmarkValuationTypeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const valuationTypePostValuationType =  useValuationTypePostValuationTypeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useValuationTypePostValuationTypeHook>>>, {data: DomainModelBenchmarkValuationTypeBody}> = (props) => {
          const {data} = props ?? {};

          return  valuationTypePostValuationType(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ValuationTypePostValuationTypeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useValuationTypePostValuationTypeHook>>>>
    export type ValuationTypePostValuationTypeMutationBody = DomainModelBenchmarkValuationTypeBody
    export type ValuationTypePostValuationTypeMutationError = unknown

    export const useValuationTypePostValuationType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypePostValuationTypeHook>>>, TError,{data: DomainModelBenchmarkValuationTypeBody}, TContext>, }
) => {

      const mutationOptions = useValuationTypePostValuationTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useValuationTypeRateValuationTypeHook = () => {
        const valuationTypeRateValuationType = useCustomInstance<DomainModelBenchmarkValuationType>();

        return (
    domainModelBenchmarkValuationTypeBody: DomainModelBenchmarkValuationTypeBody,
 ) => {
        return valuationTypeRateValuationType(
          {url: `/api/ValuationType/rate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkValuationTypeBody
    },
          );
        }
      }
    


export const useValuationTypeRateValuationTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeRateValuationTypeHook>>>, TError,{data: DomainModelBenchmarkValuationTypeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeRateValuationTypeHook>>>, TError,{data: DomainModelBenchmarkValuationTypeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const valuationTypeRateValuationType =  useValuationTypeRateValuationTypeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useValuationTypeRateValuationTypeHook>>>, {data: DomainModelBenchmarkValuationTypeBody}> = (props) => {
          const {data} = props ?? {};

          return  valuationTypeRateValuationType(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ValuationTypeRateValuationTypeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useValuationTypeRateValuationTypeHook>>>>
    export type ValuationTypeRateValuationTypeMutationBody = DomainModelBenchmarkValuationTypeBody
    export type ValuationTypeRateValuationTypeMutationError = unknown

    export const useValuationTypeRateValuationType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeRateValuationTypeHook>>>, TError,{data: DomainModelBenchmarkValuationTypeBody}, TContext>, }
) => {

      const mutationOptions = useValuationTypeRateValuationTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useValuationTypePutValuationTypeHook = () => {
        const valuationTypePutValuationType = useCustomInstance<DomainModelBenchmarkValuationType>();

        return (
    domainModelBenchmarkValuationTypeBody: DomainModelBenchmarkValuationTypeBody,
 ) => {
        return valuationTypePutValuationType(
          {url: `/api/ValuationType/edit`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkValuationTypeBody
    },
          );
        }
      }
    


export const useValuationTypePutValuationTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypePutValuationTypeHook>>>, TError,{data: DomainModelBenchmarkValuationTypeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypePutValuationTypeHook>>>, TError,{data: DomainModelBenchmarkValuationTypeBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const valuationTypePutValuationType =  useValuationTypePutValuationTypeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useValuationTypePutValuationTypeHook>>>, {data: DomainModelBenchmarkValuationTypeBody}> = (props) => {
          const {data} = props ?? {};

          return  valuationTypePutValuationType(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ValuationTypePutValuationTypeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useValuationTypePutValuationTypeHook>>>>
    export type ValuationTypePutValuationTypeMutationBody = DomainModelBenchmarkValuationTypeBody
    export type ValuationTypePutValuationTypeMutationError = unknown

    export const useValuationTypePutValuationType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypePutValuationTypeHook>>>, TError,{data: DomainModelBenchmarkValuationTypeBody}, TContext>, }
) => {

      const mutationOptions = useValuationTypePutValuationTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useValuationTypeDeleteValuationTypeHook = () => {
        const valuationTypeDeleteValuationType = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return valuationTypeDeleteValuationType(
          {url: `/api/ValuationType/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getValuationTypeDeleteValuationTypeQueryKey = (id: number,) => {
    return [`/api/ValuationType/delete/${id}`] as const;
    }

    
export const useValuationTypeDeleteValuationTypeQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useValuationTypeDeleteValuationTypeHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeDeleteValuationTypeHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getValuationTypeDeleteValuationTypeQueryKey(id);

  const valuationTypeDeleteValuationType =  useValuationTypeDeleteValuationTypeHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useValuationTypeDeleteValuationTypeHook>>>> = ({ signal }) => valuationTypeDeleteValuationType(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeDeleteValuationTypeHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ValuationTypeDeleteValuationTypeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useValuationTypeDeleteValuationTypeHook>>>>
export type ValuationTypeDeleteValuationTypeQueryError = unknown

export const useValuationTypeDeleteValuationType = <TData = Awaited<ReturnType<ReturnType<typeof useValuationTypeDeleteValuationTypeHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeDeleteValuationTypeHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useValuationTypeDeleteValuationTypeQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useValuationTypeUpdateValuationTypeHook = () => {
        const valuationTypeUpdateValuationType = useCustomInstance<DomainModelBenchmarkValuationType[]>();

        return (
    domainModelBenchmarkValuationType: DomainModelBenchmarkValuationType[],
 ) => {
        return valuationTypeUpdateValuationType(
          {url: `/api/ValuationType/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkValuationType
    },
          );
        }
      }
    


export const useValuationTypeUpdateValuationTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeUpdateValuationTypeHook>>>, TError,{data: DomainModelBenchmarkValuationType[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeUpdateValuationTypeHook>>>, TError,{data: DomainModelBenchmarkValuationType[]}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const valuationTypeUpdateValuationType =  useValuationTypeUpdateValuationTypeHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useValuationTypeUpdateValuationTypeHook>>>, {data: DomainModelBenchmarkValuationType[]}> = (props) => {
          const {data} = props ?? {};

          return  valuationTypeUpdateValuationType(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ValuationTypeUpdateValuationTypeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useValuationTypeUpdateValuationTypeHook>>>>
    export type ValuationTypeUpdateValuationTypeMutationBody = DomainModelBenchmarkValuationType[]
    export type ValuationTypeUpdateValuationTypeMutationError = unknown

    export const useValuationTypeUpdateValuationType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeUpdateValuationTypeHook>>>, TError,{data: DomainModelBenchmarkValuationType[]}, TContext>, }
) => {

      const mutationOptions = useValuationTypeUpdateValuationTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useValuationTypeGetHook = () => {
        const valuationTypeGet = useCustomInstance<DomainModelBenchmarkValuationType>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return valuationTypeGet(
          {url: `/api/ValuationType/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getValuationTypeGetQueryKey = (id: number,) => {
    return [`/api/ValuationType/${id}`] as const;
    }

    
export const useValuationTypeGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useValuationTypeGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getValuationTypeGetQueryKey(id);

  const valuationTypeGet =  useValuationTypeGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetHook>>>> = ({ signal }) => valuationTypeGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ValuationTypeGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetHook>>>>
export type ValuationTypeGetQueryError = unknown

export const useValuationTypeGet = <TData = Awaited<ReturnType<ReturnType<typeof useValuationTypeGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useValuationTypeGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useValuationTypeGetValuationTypeByNameHook = () => {
        const valuationTypeGetValuationTypeByName = useCustomInstance<DomainModelBenchmarkValuationType>();

        return (
    params: ValuationTypeGetValuationTypeByNameParams,
 signal?: AbortSignal
) => {
        return valuationTypeGetValuationTypeByName(
          {url: `/api/ValuationType`, method: 'GET',
        params, signal
    },
          );
        }
      }
    

export const getValuationTypeGetValuationTypeByNameQueryKey = (params: ValuationTypeGetValuationTypeByNameParams,) => {
    return [`/api/ValuationType`, ...(params ? [params]: [])] as const;
    }

    
export const useValuationTypeGetValuationTypeByNameQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useValuationTypeGetValuationTypeByNameHook>>>, TError = unknown>(params: ValuationTypeGetValuationTypeByNameParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetValuationTypeByNameHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getValuationTypeGetValuationTypeByNameQueryKey(params);

  const valuationTypeGetValuationTypeByName =  useValuationTypeGetValuationTypeByNameHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetValuationTypeByNameHook>>>> = ({ signal }) => valuationTypeGetValuationTypeByName(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetValuationTypeByNameHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ValuationTypeGetValuationTypeByNameQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetValuationTypeByNameHook>>>>
export type ValuationTypeGetValuationTypeByNameQueryError = unknown

export const useValuationTypeGetValuationTypeByName = <TData = Awaited<ReturnType<ReturnType<typeof useValuationTypeGetValuationTypeByNameHook>>>, TError = unknown>(
 params: ValuationTypeGetValuationTypeByNameParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuationTypeGetValuationTypeByNameHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useValuationTypeGetValuationTypeByNameQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useValuesGetSwaggerYamlFileHook = () => {
        const valuesGetSwaggerYamlFile = useCustomInstance<ValuesGetSwaggerYamlFile200One | ValuesGetSwaggerYamlFile200Two | ValuesGetSwaggerYamlFile200Three | ValuesGetSwaggerYamlFile200Four>();

        return (
    
 signal?: AbortSignal
) => {
        return valuesGetSwaggerYamlFile(
          {url: `/swaggeryaml`, method: 'GET', signal
    },
          );
        }
      }
    

export const getValuesGetSwaggerYamlFileQueryKey = () => {
    return [`/swaggeryaml`] as const;
    }

    
export const useValuesGetSwaggerYamlFileQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useValuesGetSwaggerYamlFileHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuesGetSwaggerYamlFileHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getValuesGetSwaggerYamlFileQueryKey();

  const valuesGetSwaggerYamlFile =  useValuesGetSwaggerYamlFileHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useValuesGetSwaggerYamlFileHook>>>> = ({ signal }) => valuesGetSwaggerYamlFile(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuesGetSwaggerYamlFileHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ValuesGetSwaggerYamlFileQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useValuesGetSwaggerYamlFileHook>>>>
export type ValuesGetSwaggerYamlFileQueryError = unknown

export const useValuesGetSwaggerYamlFile = <TData = Awaited<ReturnType<ReturnType<typeof useValuesGetSwaggerYamlFileHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuesGetSwaggerYamlFileHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useValuesGetSwaggerYamlFileQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useValuesGetSwaggerYamlHook = () => {
        const valuesGetSwaggerYaml = useCustomInstance<ValuesGetSwaggerYaml200One | ValuesGetSwaggerYaml200Two | ValuesGetSwaggerYaml200Three | ValuesGetSwaggerYaml200Four>();

        return (
    
 signal?: AbortSignal
) => {
        return valuesGetSwaggerYaml(
          {url: `/swagger/docs/v1/yaml`, method: 'GET', signal
    },
          );
        }
      }
    

export const getValuesGetSwaggerYamlQueryKey = () => {
    return [`/swagger/docs/v1/yaml`] as const;
    }

    
export const useValuesGetSwaggerYamlQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useValuesGetSwaggerYamlHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuesGetSwaggerYamlHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getValuesGetSwaggerYamlQueryKey();

  const valuesGetSwaggerYaml =  useValuesGetSwaggerYamlHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useValuesGetSwaggerYamlHook>>>> = ({ signal }) => valuesGetSwaggerYaml(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuesGetSwaggerYamlHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ValuesGetSwaggerYamlQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useValuesGetSwaggerYamlHook>>>>
export type ValuesGetSwaggerYamlQueryError = unknown

export const useValuesGetSwaggerYaml = <TData = Awaited<ReturnType<ReturnType<typeof useValuesGetSwaggerYamlHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuesGetSwaggerYamlHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useValuesGetSwaggerYamlQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useValuesGetHook = () => {
        const valuesGet = useCustomInstance<string>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return valuesGet(
          {url: `/api/Values/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getValuesGetQueryKey = (id: number,) => {
    return [`/api/Values/${id}`] as const;
    }

    
export const useValuesGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useValuesGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuesGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getValuesGetQueryKey(id);

  const valuesGet =  useValuesGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useValuesGetHook>>>> = ({ signal }) => valuesGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuesGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ValuesGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useValuesGetHook>>>>
export type ValuesGetQueryError = unknown

export const useValuesGet = <TData = Awaited<ReturnType<ReturnType<typeof useValuesGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValuesGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useValuesGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useValuesPostHook = () => {
        const valuesPost = useCustomInstance<void>();

        return (
    valuesPostValueBody: ValuesPostValueBody,
 ) => {
        return valuesPost(
          {url: `/api/Values`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: valuesPostValueBody
    },
          );
        }
      }
    


export const useValuesPostMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValuesPostHook>>>, TError,{data: ValuesPostValueBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValuesPostHook>>>, TError,{data: ValuesPostValueBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const valuesPost =  useValuesPostHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useValuesPostHook>>>, {data: ValuesPostValueBody}> = (props) => {
          const {data} = props ?? {};

          return  valuesPost(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ValuesPostMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useValuesPostHook>>>>
    export type ValuesPostMutationBody = ValuesPostValueBody
    export type ValuesPostMutationError = unknown

    export const useValuesPost = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValuesPostHook>>>, TError,{data: ValuesPostValueBody}, TContext>, }
) => {

      const mutationOptions = useValuesPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useValuesPutHook = () => {
        const valuesPut = useCustomInstance<void>();

        return (
    id: number,
    valuesPostValueBody: ValuesPostValueBody,
 ) => {
        return valuesPut(
          {url: `/api/Values/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: valuesPostValueBody
    },
          );
        }
      }
    


export const useValuesPutMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValuesPutHook>>>, TError,{id: number;data: ValuesPostValueBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValuesPutHook>>>, TError,{id: number;data: ValuesPostValueBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const valuesPut =  useValuesPutHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useValuesPutHook>>>, {id: number;data: ValuesPostValueBody}> = (props) => {
          const {id,data} = props ?? {};

          return  valuesPut(id,data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ValuesPutMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useValuesPutHook>>>>
    export type ValuesPutMutationBody = ValuesPostValueBody
    export type ValuesPutMutationError = unknown

    export const useValuesPut = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValuesPutHook>>>, TError,{id: number;data: ValuesPostValueBody}, TContext>, }
) => {

      const mutationOptions = useValuesPutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useValuesDeleteHook = () => {
        const valuesDelete = useCustomInstance<void>();

        return (
    id: number,
 ) => {
        return valuesDelete(
          {url: `/api/Values/${id}`, method: 'DELETE'
    },
          );
        }
      }
    


export const useValuesDeleteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValuesDeleteHook>>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValuesDeleteHook>>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const valuesDelete =  useValuesDeleteHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useValuesDeleteHook>>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  valuesDelete(id,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ValuesDeleteMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useValuesDeleteHook>>>>
    
    export type ValuesDeleteMutationError = unknown

    export const useValuesDelete = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValuesDeleteHook>>>, TError,{id: number}, TContext>, }
) => {

      const mutationOptions = useValuesDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary This method get request from Webhook and save data into database.
 */
export const useWebHookSubscriptionEventsWebHookHook = () => {
        const webHookSubscriptionEventsWebHook = useCustomInstance<SystemWebMvcActionResult>();

        return (
    
 ) => {
        return webHookSubscriptionEventsWebHook(
          {url: `/api/WebHook`, method: 'POST'
    },
          );
        }
      }
    


export const useWebHookSubscriptionEventsWebHookMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useWebHookSubscriptionEventsWebHookHook>>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useWebHookSubscriptionEventsWebHookHook>>>, TError,void, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const webHookSubscriptionEventsWebHook =  useWebHookSubscriptionEventsWebHookHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useWebHookSubscriptionEventsWebHookHook>>>, void> = () => {
          

          return  webHookSubscriptionEventsWebHook()
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type WebHookSubscriptionEventsWebHookMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useWebHookSubscriptionEventsWebHookHook>>>>
    
    export type WebHookSubscriptionEventsWebHookMutationError = unknown

    /**
 * @summary This method get request from Webhook and save data into database.
 */
export const useWebHookSubscriptionEventsWebHook = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useWebHookSubscriptionEventsWebHookHook>>>, TError,void, TContext>, }
) => {

      const mutationOptions = useWebHookSubscriptionEventsWebHookMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useWritingCompaniesGetAllWritingCompanyHook = () => {
        const writingCompaniesGetAllWritingCompany = useCustomInstance<DomainModelBenchmarkWritingCompany[]>();

        return (
    
 signal?: AbortSignal
) => {
        return writingCompaniesGetAllWritingCompany(
          {url: `/api/WritingCompanies/getAll`, method: 'GET', signal
    },
          );
        }
      }
    

export const getWritingCompaniesGetAllWritingCompanyQueryKey = () => {
    return [`/api/WritingCompanies/getAll`] as const;
    }

    
export const useWritingCompaniesGetAllWritingCompanyQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetAllWritingCompanyHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetAllWritingCompanyHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getWritingCompaniesGetAllWritingCompanyQueryKey();

  const writingCompaniesGetAllWritingCompany =  useWritingCompaniesGetAllWritingCompanyHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetAllWritingCompanyHook>>>> = ({ signal }) => writingCompaniesGetAllWritingCompany(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetAllWritingCompanyHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type WritingCompaniesGetAllWritingCompanyQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetAllWritingCompanyHook>>>>
export type WritingCompaniesGetAllWritingCompanyQueryError = unknown

export const useWritingCompaniesGetAllWritingCompany = <TData = Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetAllWritingCompanyHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetAllWritingCompanyHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useWritingCompaniesGetAllWritingCompanyQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useWritingCompaniesGetHook = () => {
        const writingCompaniesGet = useCustomInstance<DomainModelBenchmarkWritingCompany>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return writingCompaniesGet(
          {url: `/api/WritingCompanies/get/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getWritingCompaniesGetQueryKey = (id: number,) => {
    return [`/api/WritingCompanies/get/${id}`] as const;
    }

    
export const useWritingCompaniesGetQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getWritingCompaniesGetQueryKey(id);

  const writingCompaniesGet =  useWritingCompaniesGetHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetHook>>>> = ({ signal }) => writingCompaniesGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type WritingCompaniesGetQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetHook>>>>
export type WritingCompaniesGetQueryError = unknown

export const useWritingCompaniesGet = <TData = Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useWritingCompaniesGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useWritingCompaniesPostWritingCompanyHook = () => {
        const writingCompaniesPostWritingCompany = useCustomInstance<DomainModelBenchmarkWritingCompany>();

        return (
    domainModelBenchmarkWritingCompanyBody: DomainModelBenchmarkWritingCompanyBody,
 ) => {
        return writingCompaniesPostWritingCompany(
          {url: `/api/WritingCompanies/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkWritingCompanyBody
    },
          );
        }
      }
    


export const useWritingCompaniesPostWritingCompanyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesPostWritingCompanyHook>>>, TError,{data: DomainModelBenchmarkWritingCompanyBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesPostWritingCompanyHook>>>, TError,{data: DomainModelBenchmarkWritingCompanyBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const writingCompaniesPostWritingCompany =  useWritingCompaniesPostWritingCompanyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesPostWritingCompanyHook>>>, {data: DomainModelBenchmarkWritingCompanyBody}> = (props) => {
          const {data} = props ?? {};

          return  writingCompaniesPostWritingCompany(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type WritingCompaniesPostWritingCompanyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesPostWritingCompanyHook>>>>
    export type WritingCompaniesPostWritingCompanyMutationBody = DomainModelBenchmarkWritingCompanyBody
    export type WritingCompaniesPostWritingCompanyMutationError = unknown

    export const useWritingCompaniesPostWritingCompany = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesPostWritingCompanyHook>>>, TError,{data: DomainModelBenchmarkWritingCompanyBody}, TContext>, }
) => {

      const mutationOptions = useWritingCompaniesPostWritingCompanyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useWritingCompaniesPutWritingCompanyHook = () => {
        const writingCompaniesPutWritingCompany = useCustomInstance<DomainModelBenchmarkWritingCompany>();

        return (
    domainModelBenchmarkWritingCompanyBody: DomainModelBenchmarkWritingCompanyBody,
 ) => {
        return writingCompaniesPutWritingCompany(
          {url: `/api/WritingCompanies/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkWritingCompanyBody
    },
          );
        }
      }
    


export const useWritingCompaniesPutWritingCompanyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesPutWritingCompanyHook>>>, TError,{data: DomainModelBenchmarkWritingCompanyBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesPutWritingCompanyHook>>>, TError,{data: DomainModelBenchmarkWritingCompanyBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const writingCompaniesPutWritingCompany =  useWritingCompaniesPutWritingCompanyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesPutWritingCompanyHook>>>, {data: DomainModelBenchmarkWritingCompanyBody}> = (props) => {
          const {data} = props ?? {};

          return  writingCompaniesPutWritingCompany(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type WritingCompaniesPutWritingCompanyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesPutWritingCompanyHook>>>>
    export type WritingCompaniesPutWritingCompanyMutationBody = DomainModelBenchmarkWritingCompanyBody
    export type WritingCompaniesPutWritingCompanyMutationError = unknown

    export const useWritingCompaniesPutWritingCompany = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesPutWritingCompanyHook>>>, TError,{data: DomainModelBenchmarkWritingCompanyBody}, TContext>, }
) => {

      const mutationOptions = useWritingCompaniesPutWritingCompanyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useWritingCompaniesDeleteWritingCompanyHook = () => {
        const writingCompaniesDeleteWritingCompany = useCustomInstance<boolean>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return writingCompaniesDeleteWritingCompany(
          {url: `/api/WritingCompanies/delete/${id}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getWritingCompaniesDeleteWritingCompanyQueryKey = (id: number,) => {
    return [`/api/WritingCompanies/delete/${id}`] as const;
    }

    
export const useWritingCompaniesDeleteWritingCompanyQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useWritingCompaniesDeleteWritingCompanyHook>>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesDeleteWritingCompanyHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getWritingCompaniesDeleteWritingCompanyQueryKey(id);

  const writingCompaniesDeleteWritingCompany =  useWritingCompaniesDeleteWritingCompanyHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesDeleteWritingCompanyHook>>>> = ({ signal }) => writingCompaniesDeleteWritingCompany(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesDeleteWritingCompanyHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type WritingCompaniesDeleteWritingCompanyQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesDeleteWritingCompanyHook>>>>
export type WritingCompaniesDeleteWritingCompanyQueryError = unknown

export const useWritingCompaniesDeleteWritingCompany = <TData = Awaited<ReturnType<ReturnType<typeof useWritingCompaniesDeleteWritingCompanyHook>>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesDeleteWritingCompanyHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useWritingCompaniesDeleteWritingCompanyQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useWritingCompaniesGetAllWritingCompanyDetailsHook = () => {
        const writingCompaniesGetAllWritingCompanyDetails = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelVMWritingCompany>();

        return (
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return writingCompaniesGetAllWritingCompanyDetails(
          {url: `/api/WritingCompanies/GetAllWritingCompanyDetails/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getWritingCompaniesGetAllWritingCompanyDetailsQueryKey = (startIndex: number,
    endIndex: number,) => {
    return [`/api/WritingCompanies/GetAllWritingCompanyDetails/${startIndex}/${endIndex}`] as const;
    }

    
export const useWritingCompaniesGetAllWritingCompanyDetailsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetAllWritingCompanyDetailsHook>>>, TError = unknown>(startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetAllWritingCompanyDetailsHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getWritingCompaniesGetAllWritingCompanyDetailsQueryKey(startIndex,endIndex);

  const writingCompaniesGetAllWritingCompanyDetails =  useWritingCompaniesGetAllWritingCompanyDetailsHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetAllWritingCompanyDetailsHook>>>> = ({ signal }) => writingCompaniesGetAllWritingCompanyDetails(startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetAllWritingCompanyDetailsHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type WritingCompaniesGetAllWritingCompanyDetailsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetAllWritingCompanyDetailsHook>>>>
export type WritingCompaniesGetAllWritingCompanyDetailsQueryError = unknown

export const useWritingCompaniesGetAllWritingCompanyDetails = <TData = Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetAllWritingCompanyDetailsHook>>>, TError = unknown>(
 startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetAllWritingCompanyDetailsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useWritingCompaniesGetAllWritingCompanyDetailsQueryOptions(startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useWritingCompaniesGetWritingCompaniesByBrokerIDHook = () => {
        const writingCompaniesGetWritingCompaniesByBrokerID = useCustomInstance<ProvidersSPHelperGenericRecordListDomainModelVMWritingCompany>();

        return (
    brokerID: number,
    searchFilter: string,
    startIndex: number,
    endIndex: number,
 signal?: AbortSignal
) => {
        return writingCompaniesGetWritingCompaniesByBrokerID(
          {url: `/api/WritingCompanies/GetWritingCompaniesByBrokerID/${brokerID}/${searchFilter}/${startIndex}/${endIndex}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getWritingCompaniesGetWritingCompaniesByBrokerIDQueryKey = (brokerID: number,
    searchFilter: string,
    startIndex: number,
    endIndex: number,) => {
    return [`/api/WritingCompanies/GetWritingCompaniesByBrokerID/${brokerID}/${searchFilter}/${startIndex}/${endIndex}`] as const;
    }

    
export const useWritingCompaniesGetWritingCompaniesByBrokerIDQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetWritingCompaniesByBrokerIDHook>>>, TError = unknown>(brokerID: number,
    searchFilter: string,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetWritingCompaniesByBrokerIDHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getWritingCompaniesGetWritingCompaniesByBrokerIDQueryKey(brokerID,searchFilter,startIndex,endIndex);

  const writingCompaniesGetWritingCompaniesByBrokerID =  useWritingCompaniesGetWritingCompaniesByBrokerIDHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetWritingCompaniesByBrokerIDHook>>>> = ({ signal }) => writingCompaniesGetWritingCompaniesByBrokerID(brokerID,searchFilter,startIndex,endIndex, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(brokerID && searchFilter && startIndex && endIndex), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetWritingCompaniesByBrokerIDHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type WritingCompaniesGetWritingCompaniesByBrokerIDQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetWritingCompaniesByBrokerIDHook>>>>
export type WritingCompaniesGetWritingCompaniesByBrokerIDQueryError = unknown

export const useWritingCompaniesGetWritingCompaniesByBrokerID = <TData = Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetWritingCompaniesByBrokerIDHook>>>, TError = unknown>(
 brokerID: number,
    searchFilter: string,
    startIndex: number,
    endIndex: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useWritingCompaniesGetWritingCompaniesByBrokerIDHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useWritingCompaniesGetWritingCompaniesByBrokerIDQueryOptions(brokerID,searchFilter,startIndex,endIndex,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useZillowGetAllZillowByNameHook = () => {
        const zillowGetAllZillowByName = useCustomInstance<DomainModelBenchmarkZillow[]>();

        return (
    name: string,
 signal?: AbortSignal
) => {
        return zillowGetAllZillowByName(
          {url: `/api/Zillow/${name}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getZillowGetAllZillowByNameQueryKey = (name: string,) => {
    return [`/api/Zillow/${name}`] as const;
    }

    
export const useZillowGetAllZillowByNameQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useZillowGetAllZillowByNameHook>>>, TError = unknown>(name: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useZillowGetAllZillowByNameHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getZillowGetAllZillowByNameQueryKey(name);

  const zillowGetAllZillowByName =  useZillowGetAllZillowByNameHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useZillowGetAllZillowByNameHook>>>> = ({ signal }) => zillowGetAllZillowByName(name, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useZillowGetAllZillowByNameHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ZillowGetAllZillowByNameQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useZillowGetAllZillowByNameHook>>>>
export type ZillowGetAllZillowByNameQueryError = unknown

export const useZillowGetAllZillowByName = <TData = Awaited<ReturnType<ReturnType<typeof useZillowGetAllZillowByNameHook>>>, TError = unknown>(
 name: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useZillowGetAllZillowByNameHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useZillowGetAllZillowByNameQueryOptions(name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useZillowGetAllUsersHook = () => {
        const zillowGetAllUsers = useCustomInstance<DomainModelUser[]>();

        return (
    
 signal?: AbortSignal
) => {
        return zillowGetAllUsers(
          {url: `/api/Zillow/users`, method: 'GET', signal
    },
          );
        }
      }
    

export const getZillowGetAllUsersQueryKey = () => {
    return [`/api/Zillow/users`] as const;
    }

    
export const useZillowGetAllUsersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useZillowGetAllUsersHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useZillowGetAllUsersHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getZillowGetAllUsersQueryKey();

  const zillowGetAllUsers =  useZillowGetAllUsersHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useZillowGetAllUsersHook>>>> = ({ signal }) => zillowGetAllUsers(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useZillowGetAllUsersHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ZillowGetAllUsersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useZillowGetAllUsersHook>>>>
export type ZillowGetAllUsersQueryError = unknown

export const useZillowGetAllUsers = <TData = Awaited<ReturnType<ReturnType<typeof useZillowGetAllUsersHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useZillowGetAllUsersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useZillowGetAllUsersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useZillowGetCityByZipcodeHook = () => {
        const zillowGetCityByZipcode = useCustomInstance<DomainModelBenchmarkZillow>();

        return (
    zipcode: string,
 signal?: AbortSignal
) => {
        return zillowGetCityByZipcode(
          {url: `/api/city/${zipcode}`, method: 'GET', signal
    },
          );
        }
      }
    

export const getZillowGetCityByZipcodeQueryKey = (zipcode: string,) => {
    return [`/api/city/${zipcode}`] as const;
    }

    
export const useZillowGetCityByZipcodeQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useZillowGetCityByZipcodeHook>>>, TError = unknown>(zipcode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useZillowGetCityByZipcodeHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getZillowGetCityByZipcodeQueryKey(zipcode);

  const zillowGetCityByZipcode =  useZillowGetCityByZipcodeHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useZillowGetCityByZipcodeHook>>>> = ({ signal }) => zillowGetCityByZipcode(zipcode, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(zipcode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useZillowGetCityByZipcodeHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ZillowGetCityByZipcodeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useZillowGetCityByZipcodeHook>>>>
export type ZillowGetCityByZipcodeQueryError = unknown

export const useZillowGetCityByZipcode = <TData = Awaited<ReturnType<ReturnType<typeof useZillowGetCityByZipcodeHook>>>, TError = unknown>(
 zipcode: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useZillowGetCityByZipcodeHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useZillowGetCityByZipcodeQueryOptions(zipcode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useZillowGetAllZillowByStatusHook = () => {
        const zillowGetAllZillowByStatus = useCustomInstance<DomainModelBenchmarkZillow[]>();

        return (
    statusId: number,
 signal?: AbortSignal
) => {
        return zillowGetAllZillowByStatus(
          {url: `/api/statuses/${statusId}/Zillow`, method: 'GET', signal
    },
          );
        }
      }
    

export const getZillowGetAllZillowByStatusQueryKey = (statusId: number,) => {
    return [`/api/statuses/${statusId}/Zillow`] as const;
    }

    
export const useZillowGetAllZillowByStatusQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useZillowGetAllZillowByStatusHook>>>, TError = unknown>(statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useZillowGetAllZillowByStatusHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getZillowGetAllZillowByStatusQueryKey(statusId);

  const zillowGetAllZillowByStatus =  useZillowGetAllZillowByStatusHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useZillowGetAllZillowByStatusHook>>>> = ({ signal }) => zillowGetAllZillowByStatus(statusId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(statusId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useZillowGetAllZillowByStatusHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ZillowGetAllZillowByStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useZillowGetAllZillowByStatusHook>>>>
export type ZillowGetAllZillowByStatusQueryError = unknown

export const useZillowGetAllZillowByStatus = <TData = Awaited<ReturnType<ReturnType<typeof useZillowGetAllZillowByStatusHook>>>, TError = unknown>(
 statusId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useZillowGetAllZillowByStatusHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useZillowGetAllZillowByStatusQueryOptions(statusId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useZillowRateZillowHook = () => {
        const zillowRateZillow = useCustomInstance<DomainModelBenchmarkZillow>();

        return (
    domainModelBenchmarkZillowBody: DomainModelBenchmarkZillowBody,
 ) => {
        return zillowRateZillow(
          {url: `/api/Zillow/Proxy`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkZillowBody
    },
          );
        }
      }
    


export const useZillowRateZillowMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useZillowRateZillowHook>>>, TError,{data: DomainModelBenchmarkZillowBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useZillowRateZillowHook>>>, TError,{data: DomainModelBenchmarkZillowBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const zillowRateZillow =  useZillowRateZillowHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useZillowRateZillowHook>>>, {data: DomainModelBenchmarkZillowBody}> = (props) => {
          const {data} = props ?? {};

          return  zillowRateZillow(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ZillowRateZillowMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useZillowRateZillowHook>>>>
    export type ZillowRateZillowMutationBody = DomainModelBenchmarkZillowBody
    export type ZillowRateZillowMutationError = unknown

    export const useZillowRateZillow = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useZillowRateZillowHook>>>, TError,{data: DomainModelBenchmarkZillowBody}, TContext>, }
) => {

      const mutationOptions = useZillowRateZillowMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useZillowGetAllZillowHook = () => {
        const zillowGetAllZillow = useCustomInstance<DomainModelBenchmarkZillow[]>();

        return (
    
 signal?: AbortSignal
) => {
        return zillowGetAllZillow(
          {url: `/api/Zillow`, method: 'GET', signal
    },
          );
        }
      }
    

export const getZillowGetAllZillowQueryKey = () => {
    return [`/api/Zillow`] as const;
    }

    
export const useZillowGetAllZillowQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useZillowGetAllZillowHook>>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useZillowGetAllZillowHook>>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getZillowGetAllZillowQueryKey();

  const zillowGetAllZillow =  useZillowGetAllZillowHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useZillowGetAllZillowHook>>>> = ({ signal }) => zillowGetAllZillow(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useZillowGetAllZillowHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type ZillowGetAllZillowQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useZillowGetAllZillowHook>>>>
export type ZillowGetAllZillowQueryError = unknown

export const useZillowGetAllZillow = <TData = Awaited<ReturnType<ReturnType<typeof useZillowGetAllZillowHook>>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useZillowGetAllZillowHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useZillowGetAllZillowQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const useZillowPutZillowHook = () => {
        const zillowPutZillow = useCustomInstance<ZillowPutZillow200OneItem[] | ZillowPutZillow200TwoItem[] | ZillowPutZillow200ThreeItem[] | ZillowPutZillow200FourItem[]>();

        return (
    domainModelBenchmarkZillowBody: DomainModelBenchmarkZillowBody,
 ) => {
        return zillowPutZillow(
          {url: `/api/Zillow`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkZillowBody
    },
          );
        }
      }
    


export const useZillowPutZillowMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useZillowPutZillowHook>>>, TError,{data: DomainModelBenchmarkZillowBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useZillowPutZillowHook>>>, TError,{data: DomainModelBenchmarkZillowBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const zillowPutZillow =  useZillowPutZillowHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useZillowPutZillowHook>>>, {data: DomainModelBenchmarkZillowBody}> = (props) => {
          const {data} = props ?? {};

          return  zillowPutZillow(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ZillowPutZillowMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useZillowPutZillowHook>>>>
    export type ZillowPutZillowMutationBody = DomainModelBenchmarkZillowBody
    export type ZillowPutZillowMutationError = unknown

    export const useZillowPutZillow = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useZillowPutZillowHook>>>, TError,{data: DomainModelBenchmarkZillowBody}, TContext>, }
) => {

      const mutationOptions = useZillowPutZillowMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useZillowPostZillowHook = () => {
        const zillowPostZillow = useCustomInstance<ZillowPostZillow200One | ZillowPostZillow200Two | ZillowPostZillow200Three | ZillowPostZillow200Four>();

        return (
    domainModelBenchmarkZillowBody: DomainModelBenchmarkZillowBody,
 ) => {
        return zillowPostZillow(
          {url: `/api/Zillow`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: domainModelBenchmarkZillowBody
    },
          );
        }
      }
    


export const useZillowPostZillowMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useZillowPostZillowHook>>>, TError,{data: DomainModelBenchmarkZillowBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useZillowPostZillowHook>>>, TError,{data: DomainModelBenchmarkZillowBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const zillowPostZillow =  useZillowPostZillowHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useZillowPostZillowHook>>>, {data: DomainModelBenchmarkZillowBody}> = (props) => {
          const {data} = props ?? {};

          return  zillowPostZillow(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ZillowPostZillowMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useZillowPostZillowHook>>>>
    export type ZillowPostZillowMutationBody = DomainModelBenchmarkZillowBody
    export type ZillowPostZillowMutationError = unknown

    export const useZillowPostZillow = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useZillowPostZillowHook>>>, TError,{data: DomainModelBenchmarkZillowBody}, TContext>, }
) => {

      const mutationOptions = useZillowPostZillowMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const useZillowDeleteZillowHook = () => {
        const zillowDeleteZillow = useCustomInstance<boolean>();

        return (
    id: number,
 ) => {
        return zillowDeleteZillow(
          {url: `/api/Zillow/${id}`, method: 'DELETE'
    },
          );
        }
      }
    


export const useZillowDeleteZillowMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useZillowDeleteZillowHook>>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useZillowDeleteZillowHook>>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      const zillowDeleteZillow =  useZillowDeleteZillowHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useZillowDeleteZillowHook>>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  zillowDeleteZillow(id,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ZillowDeleteZillowMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useZillowDeleteZillowHook>>>>
    
    export type ZillowDeleteZillowMutationError = unknown

    export const useZillowDeleteZillow = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useZillowDeleteZillowHook>>>, TError,{id: number}, TContext>, }
) => {

      const mutationOptions = useZillowDeleteZillowMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
